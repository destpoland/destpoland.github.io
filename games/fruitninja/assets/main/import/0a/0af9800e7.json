[1,["13t36dfc1IUK+oMq3BIbZn","a88V2mRu9JKoyiwSI59BTw","42qv/HlStJlYXhwcLIjNb9_f9941","4cU7SHOQlBuK+ga8YnegTH","43xroAPiRJfqojH0QjFfGh","d1NGQ2rJZCcbhjH0/erZWw","aaVuBeVrtIAYA84/ds8skJ","a3zQCfCrBCDZJ4uf2rk5u8","8dwWQ0dK9KOopcpOOhG0dS","b5OjXKX/NFuIfWBmrhKpx2","f5mrThPjVIf75i8YYJm0k0_6c48a","37C2H1ft9CupUCefuNtoiC","4dvko4mmhC+6IW6OW2jbb1","1brw/JvvpFnIvdrxpFCgMZ","c7lTfgZhdGbIgh7yDK6+2g","54V2Driu1Bf7LAtFtACjuE","c72KTFFZpOVpC/BCt0ohMj_f9941","b2j9RPJNROboWIdKUYQDRp","1cxEjPYqJBuKlQNQPFFYQ4_f9941","50SGIKHqJJKJfNeaTJIeQc","48dHSbw3xCxJdc+xZXegRj_42893","c48e5FQ/9EIas9xFBf3E0g_6c48a","82tuC7HUpFXaJwH68XJawY","4c+8hoZcRF2bFujrRovFV/_f9941","33Gv7BehpNv4K3FSFmhWcm_6c48a","24HHra0LRM5ZJiFhbtPi0b_6c48a","692nn2Hc1L0YcY8nUVg1D5_f9941","453TklMghIo7kE5l15xysF_f9941","cdfSZQ6s1ICrKxsRM2Xzc3_f9941","62o4uY3jBAWLP9/0cfgq7T_f9941","a8KvjL/d9OV4AIADCUCiyr","8cTgBsRlhHypVbysRvQCEs_f9941","11OwB94vlGK61+sQtNv1v3","f9CWsNUjFKmqMiNdPadGKY","70KwvJv3dMHagzN3ugwrKd","6dACoEYK5Ij47drGoTBOzw_6c48a","7byOfF2sRJvKV7nutlH3TH_f9941","c5zsuBQbtAdJie1J3qEEZY_f9941","0d3xJZ+YBDFpJ9GRSflSC4_f9941","9eCmYmmSxGpIU941qS216R_6c48a","4fSTBlvPVPXah50LMNiD9r_6c48a","d8erCr/DRH3KJa1CMm3aT5_6c48a","a3tMxC5utGhYruL9u2MJli","4cnB9BgRxB35AGzTZB9s5I_f9941","362zbH4JxLI6gyxg12fpsO","03jnzEg0lAAZ/Ighk9/4sL_f9941","f32qn4ZrpPM7sqXntDkk05_f9941","efRsVXr4JBcZF+ymNptMzn_f9941","eeIhyBYkVDIK60hP3cKoDU","d1BmiHh/JNUY/ANfXFxSc3_f9941","14hQoLb3tOE5JB0y7CO3RG","f8wb0eyCFNB7YcUTIwokZT_f9941","52XbSDjANL8bA3WAB2/ZY3","a29CeWm5ZFfq0p1BsBpARn_38162","a29CeWm5ZFfq0p1BsBpARn_76400","a29CeWm5ZFfq0p1BsBpARn_94bed","a29CeWm5ZFfq0p1BsBpARn_97ec3","a29CeWm5ZFfq0p1BsBpARn_f2fe0","a29CeWm5ZFfq0p1BsBpARn_2ca23","027WRLwgRMaZ4Hf+Z0crmo","4afdcEI5lIK6MKrwC0UIgh","ceDqFfEdJPD5LiUoOM1bAb","2aA4wJFAdD6bRR53ryNFD1","b0fejYe2tB35VwcdohHziM_6c48a","e7YtUmzPFBy6KQNNm2F1ax_6c48a","c6iheCiuFJbJllLtegGtVq","9eCmYmmSxGpIU941qS216R_f9941","7cgWgd/f1Oy5+jhYgMP/Z1","65Adj0GJhA5oQgVzv2Nvkx_6c48a","233w9QjJlBPaRwBd+ywHKf_6c48a","ee+eLu8DdGv41D7pbdIOgl","6a1Lxl43RPfbEAXqjraUXy","c8Jb6XIQtPpIJZL9HGpWfX_f9941","e0qQaOk+5DsZ2zsksinJs5_f9941","68uf1pXH9BnpZgFLMYnPRb_f9941","b5snqx50BDmLQHhI/CssiX_6c48a","79G2UweYhJ8YCWy31b2DFy_6c48a","77saqQesZILrLVnYcATxwr_f9941","46oI+wslxF87QLYD5hq4Ua_f9941","42GquAcU9HmI+EovaQcL90","f1QSizCAxOO7abuQS1qKjB_6c48a","58j3yatPxLQ5yhD6XdwiEr","e8pjAFGTlOdKdvajC5leg8","e6MguL9s5JKYcPoO8HofuE_6c48a","4fPLQCDtVDs5m0JW/gE0Gn","3dy6tmwUxJAroFKzBxG0dG_6c48a","86hGA92W9OrKJEyhh52mwF","beey6EDqxINIRiBTWrTX8B_6c48a","f15kIR1xpFS4q+DZiSjaaK_f9941","3dhlvGD+lArqz62LQlZZph_abdf2","6dFCCLs3BOTLbmTBUxSnF1","01K0TOdiZHOpo5Ka09L5xX_6c48a","bc7H/Le85MW5e3r1KWrYgc","24OodJ67FFKKoubM/WDTnO","01ICWFf/5KjpnmIcdoAwd4","19vPKhTjxD1L5n02d2f+Lr_73b7f","12j2osCahCK6iElIF1YNIs","96PVYuWDVL/Ihyol6RB2fm_6c48a","feKWYgYtlHRaXSZvSPgaF3","d0gLW67KlHWK3v7ne888uU","1avdlCymdGb5MxJCb9TYgR_6c48a","40J5VO1xVOZa2exGr1UZHY","27+ZY1ml1BEp/RhRqygJyt_f9941","6aASarM8FIN6tFVLn4tBKZ_6c48a","36/6Aha79ETr2EUA1HOarO","dbpzze4GZC4ZpINBxiNa32","16Gn0abX5P/owoI6sjhA0M","48lhe5vipFT77ByFjFZ7UG_f9941","6cvrFbacJGzZIxvXN61xcg","2dvf9APlhMhYdo9nbtGvpM_6c48a","14HLuQSlBPQqQwFfOFFASr","eadHiwQI1AUrcD8NI1Xglf","eb71tDyLRGcIm27g4/WLX0_e411d","eb71tDyLRGcIm27g4/WLX0_da3ed","eb71tDyLRGcIm27g4/WLX0_1b538","eb71tDyLRGcIm27g4/WLX0_2269c","eb71tDyLRGcIm27g4/WLX0_63e94","eb71tDyLRGcIm27g4/WLX0_50317","0a07uvwV9B66g8ljmsjE7Z_f9941","27rsXVVhlGdoTsHoAR362x","04mVHTeQtEuIw9LvKfE0kS","583GSPOQJDRIWaEoyiKHks","beFEDfothEbpHC1i1b2XCf_f9941","f6933iIg5EoLEcfHdfmUxo_f9941","83vlLWcFZBQYecoL4RlcXC_f9941","dfmw2XiEpNObOMRgWneX0u_f9941","05x/VCXfBNJ4eSYLeIgIg1","ddYaqC4ttLk4T/J4O7ql7n_a51b1","dd9pofB8BAJ5EvC0Y+90kO_d9a77","784E5wGgpDapR6B45HSIq7","99y6vnp7xAbKyslpGd5UqM","f6RU/YDRJEO6kbt0QRTRVt","edklvGWixAu4IjHY+IXaro_abad5","edklvGWixAu4IjHY+IXaro_8dba9","edklvGWixAu4IjHY+IXaro_acbf8","edklvGWixAu4IjHY+IXaro_ef318","b9OOpphg1KGK0XFM9ItgR+","84LN1p7p1IX6rZy1rEFcc+","32RrZXLuRM4YMrxEEGykWk_e85d0","d0MqyYBeFAkIi762QNy1/B_b47c0","6fAc9/gb9Kfr1dCvwZaWSA_b47c0","19LWlqRm9MXr2Ub5toLcU8","f3zTdF9bJCM7OMMUF8BwZ/_f9941","3dJd0hnU1F4YoSx0hnwmCq","3258H44wVM6LGNhQYP0F9K","63hulbTspA8ZSjuUC3Ww6Y","2f8eNlizBMzp0fy0gk2ok7_6c48a","43WfSIkVlBy7iVQpULx31G","bbrk9KfKZDAY6b/njEm+e6","dfJxi22vlOK56yR/C+I2ug_f9941","e0iUjkiQBEHYFqji7TP6EA","7dWo1fHbpBDqAqZNo3cNlF_f9941","31y9ytLHROmqGDwBCLgKAD_f9941","e1hdWcuRxJybx+MYOHEDof","d7H2fw5WVKl6DNcByVP9tp","84jPwBRHxM0J0GwABH98qS_f9941","fdCImM4bBABrV3cSjCasrF_f9941","aaUzfLTkdFMpV2HYXB/uFG_f9941","9e4vnvJDFGxbxMDGTxgb0A_f9941","04v1Gq8IBHU6YbvNXiAg0N_f9941","76DGf4d5FEC5D/OPrzWH8P_f9941","53+TPlrO1IjLcwPeFSqttV_6c48a","9ftDgJgsRDZLcI5ZmxZ9Cp","b2y6SIryFG5Zhou7JXvmMq","2fVdD0k8pNoZmZVIzd1APZ","0a1wjlE2BH5J023X1I1KVN","645oy5gB9Bw4JjqDzU90T5","ceAz9KI2NETZOOjPsauW8O_f9941","b2SF/MqzdCUKVmy81TZK/V_f9941","c0wpDM+otBh58SFLMbXuEj_f9941","a4O32S99xLlpBVZa/Adarc","01R52BWFNFjK/hbXI6dzz4_6c48a","03vW1mcVdKKJYCVq9b4c8a_6c48a","03T+c3zytIcotTZ4eiK1ee_ca978","03T+c3zytIcotTZ4eiK1ee_0a2e6","03T+c3zytIcotTZ4eiK1ee_fc723","03T+c3zytIcotTZ4eiK1ee_e85d0","03T+c3zytIcotTZ4eiK1ee_73aa8","08GzR/+ClHaohsC2fsKc80_6c48a","08RW8P3JdDjrCgsJbsaByB_6c48a","0ajGdhA5tIDYHuXH2OQQxg_6c48a","0a07uvwV9B66g8ljmsjE7Z_6c48a","0cj9WErr9JMLbuJpaw602W_6c48a","0eME+VBGxKT5mVpwr7wT1t_6c48a","b4fRfpyiZBjrILficm0nb0_f9941","a26uzSZSVETrL4UrsyT165_f9941","35EL1P1K5H/4+obCjP66Go_f9941","19hUmuiyhBl7Q1EotBiDPw_f9941","13Sxzt+lNBX41pby2abaP0_6c48a","86dGY+jnpFIoFkpyWIn0J+","1cqkbYa/ROepmpflVlCtYD","19vPKhTjxD1L5n02d2f+Lr_022d7","19vPKhTjxD1L5n02d2f+Lr_c0dd5","19vPKhTjxD1L5n02d2f+Lr_cde92","20V5Yrk+JIWoKH7u/I6cE2_6c48a","99QVVVp6ZFIoQpBFHPb6TT","0exxy4ggZHh612EIFiwarZ","b0EQ1e8mhD4LRYxEIBGDpS","66zjKNjfxHwZA4divJY+xD","11NcG+SBdLW64fQGaGy5Bm","feBvFdoFZGcrhWKyYx1Wnm_38162","feBvFdoFZGcrhWKyYx1Wnm_94bed","feBvFdoFZGcrhWKyYx1Wnm_f2fe0","feBvFdoFZGcrhWKyYx1Wnm_e85d0","feBvFdoFZGcrhWKyYx1Wnm_2ca23","27+ZY1ml1BEp/RhRqygJyt_6c48a","0ewSrMPbVK4K11qxj/0zyH","5f3BHRFh9IW4+P4okKeq7N","c2AnLODw9FMah14O1jLmP6","2faMoOcQtHIqphCIBmqQi8_6c48a","31y9ytLHROmqGDwBCLgKAD_6c48a","32+i2k9OpHxqoiFaYi592V_6c48a","36BOse3yBMAZcj6QT4T1EE_6c48a","36Jf8ApyxLHrUVNNDJ4MUF_6c48a","36+N5eMVBGUaW8QXh+vmC8_6c48a","c50dGbpEtG5L3IdPTufrIF_aa51d","c50dGbpEtG5L3IdPTufrIF_e017e","c50dGbpEtG5L3IdPTufrIF_56ccb","c50dGbpEtG5L3IdPTufrIF_e85d0","c50dGbpEtG5L3IdPTufrIF_33793","f3kij+TH1EcYQ4pPXWimnj_6c48a","3dzsdCFSBM5r6nf+aYg4mW_6c48a","3d/sTwv0dCgbrunu3S1Czy_6c48a","2cZBAUmtVNzrlrVY3+NfdO","ecw4WRA+tLn4GQYAMCF02I","16I1/TbZROTKfYd/OO6/Sh","3fbi1YasBK/oqnwfNsPc9M_6c48a","c5RkX9jTREI6oj+8gx6u4U_6c48a","471bzaJOZLXJCWH+XgpAX4_6c48a","48lhe5vipFT77ByFjFZ7UG_6c48a","60LgoXly9ECoFI/PCRf0cT","d3Q0Gk0olFHbokzPKqrN4x","500yk+WsFMQ7jlUPunk5WF_6c48a","c5c6gsn4BGm5yEgSxGwpIt_6c48a","53z9IE/gJEJa6NQMWJr0dS_6c48a","55Iz/+ysxHSLMhVeoEW4Ep_6c48a","2faMoOcQtHIqphCIBmqQi8_f9941","01R52BWFNFjK/hbXI6dzz4_f9941","32+i2k9OpHxqoiFaYi592V_f9941","3d/sTwv0dCgbrunu3S1Czy_f9941","3f5weh7ClOXbVT9Hc5O43P","84i4JeWUxMhZneN6lTbl6z_6c48a","ceK3dXl7hObLTp4brcbnMY","22lAcHw/RAi4PdxyOL8DSd_6c48a","5ad7WzfBNGr4Im/S0yf6qO_6c48a","62wuoq6tNNkpW2PqrnVshk_6c48a","034b+chcRHIJpyJlSehOf0","0cJ+d05VFLaaFRmRdjxEDf","48dHSbw3xCxJdc+xZXegRj_64375","48dHSbw3xCxJdc+xZXegRj_6bd2d","48dHSbw3xCxJdc+xZXegRj_2f1ba","48dHSbw3xCxJdc+xZXegRj_b6c59","48dHSbw3xCxJdc+xZXegRj_52e3d","48dHSbw3xCxJdc+xZXegRj_bfe6c","48dHSbw3xCxJdc+xZXegRj_4825f","48dHSbw3xCxJdc+xZXegRj_09444","48dHSbw3xCxJdc+xZXegRj_786de","0dtaHoZpVDorhl6lPiRQYb","b3bCo+2mVH1aSZNHInxRDN_f9941","36Jf8ApyxLHrUVNNDJ4MUF_f9941","fa+a9QaOhK8LmJ7RohLJKE_f9941","03vW1mcVdKKJYCVq9b4c8a_f9941","53z9IE/gJEJa6NQMWJr0dS_f9941","66af86/ipBiYjuIhGoh1J4_f9941","b25iRuchtArYzedG69fCf3_f9941","a0UedAkYhFMZxuxRX/4CW0_f9941","1fFi9SO5JHTK8KpyomRasL_f9941","5fA3dL40pHIrLawMWG+nXf_f9941","69GJunEAZA8oMGu/9XWjCu_f9941","72UEM3PUlBy47PyhpPysRV","90ucJSMjdKDZ9PjZs6cRTx","51JgBzV/RDxJn1a0njDABv","2d9Nwn1VZO4Y2vPxyUsS8P","caO6+4OKBKUqO0chlHfj/9","4b5CxBFrpP9qK82slp0f7F","66af86/ipBiYjuIhGoh1J4_6c48a","66eMUgB5lJ56nndLRxzBRQ_6c48a","e6yuku8ntCyqwpjooiOZWy","3aQ6/fa6hJebLRtEgP3se6","21DAvU3DZNeIcfA4q8Viqx_45f53","47g5ARAEJE5qDdT06yqhLE","6agH/vQZNCSqfOUlhxztYa_6c48a","dd9pofB8BAJ5EvC0Y+90kO_373ee","dd9pofB8BAJ5EvC0Y+90kO_33e28","6dxa2eyDpK2b1aJvulvwFG_6c48a","14NiGLrfNIv7bsvve9gIGM","a3ktkiKEZHWpIZrnAOoySf","ddYaqC4ttLk4T/J4O7ql7n_45f53","a06suhExNE252hnbiFMBD4","edklvGWixAu4IjHY+IXaro_e85d0","a3xGGLIBtIj4+RkyC+yX88_e1c05","a3xGGLIBtIj4+RkyC+yX88_6bfec","a3xGGLIBtIj4+RkyC+yX88_a9f47","a3xGGLIBtIj4+RkyC+yX88_e85d0","a3xGGLIBtIj4+RkyC+yX88_cae86","76DGf4d5FEC5D/OPrzWH8P_6c48a","53FEEPff1Fqrogbd3/1NE/_6c48a","7dWo1fHbpBDqAqZNo3cNlF_6c48a","84jPwBRHxM0J0GwABH98qS_6c48a","51Gfu2WNlF1IiSmP17HSXu_6c48a","baXAEZqjJBgZlVppS1BVWv_8a06b","baXAEZqjJBgZlVppS1BVWv_11792","baXAEZqjJBgZlVppS1BVWv_6aa5f","baXAEZqjJBgZlVppS1BVWv_e85d0","baXAEZqjJBgZlVppS1BVWv_f9884","32RrZXLuRM4YMrxEEGykWk_dec2e","32RrZXLuRM4YMrxEEGykWk_43404","32RrZXLuRM4YMrxEEGykWk_ed38f","32RrZXLuRM4YMrxEEGykWk_aede1","d1mcbCV2RMa6+cB8wgIGN3","d2d7yoQTVGN5icstajuDFm_f9941","0f7hnJXyBIM7ntz/tHZX/t","c3CX9d7H1BBoXVH7Kb2CMa_f9941","eauQwUJMVH6430m6IhBaE9_f9941","49+u8ASAFAaYTYZaBlNkMc","adt6l725BIWKwA7DiBJUyl","3dzsdCFSBM5r6nf+aYg4mW_f9941","bcLEKJ5o5I7KOwhfzbkUcJ","aciN8TwvROwrJ8omGd1T00","95KVhwxPBNp6UkvKpJHXHd","d27xyH4/tDL4toqOLn1RTA","c72UHnatVDvZv1v5oL9HhP","2eYX7yQ65F8JpgL+qRbBEF","347Sm8cCNDeJVWjDot2dAm","54WpAIE4dCbJ8LwHhkObWF","a0UedAkYhFMZxuxRX/4CW0_6c48a","08xHrYWPxLoblRuUPL42e6","97+PVgB8JAxKLO/4ym88jX","b6u9KSCqRHN7iTi9PmzdLg","9fd8g5JOZN4a13OW8NzYrB_6c48a","aaUzfLTkdFMpV2HYXB/uFG_6c48a","45Wib7QlJJCJfXN82YtjM4_6c48a","8fKgkUnm9IDq8CRPsNI5FI_6f8b3","8fKgkUnm9IDq8CRPsNI5FI_e640f","8fKgkUnm9IDq8CRPsNI5FI_1a66d","8fKgkUnm9IDq8CRPsNI5FI_893e7","b8XPD5WyJKX4X1Cca4yCym","74rgP+mqVDcaqMzFLjpE0l_4b777","74rgP+mqVDcaqMzFLjpE0l_79b9a","74rgP+mqVDcaqMzFLjpE0l_1151a","74rgP+mqVDcaqMzFLjpE0l_e85d0","74rgP+mqVDcaqMzFLjpE0l_3d72c","b25iRuchtArYzedG69fCf3_6c48a","b3bCo+2mVH1aSZNHInxRDN_6c48a","b7ujEspLpLAa/PxybxJV9W_6c48a","66XF1ZBLhIv7ouhEE0ntBI","d6sXI/Ts5FLINXE3QcgB0B","776Tk/tFpDdY7Xo2Tr1IBA","b6m/Wb7c1KIatUb4XU3Z+g_f7322","b6m/Wb7c1KIatUb4XU3Z+g_b360b","b6m/Wb7c1KIatUb4XU3Z+g_97e6a","b6m/Wb7c1KIatUb4XU3Z+g_e85d0","b6m/Wb7c1KIatUb4XU3Z+g_fa4a2","beFEDfothEbpHC1i1b2XCf_6c48a","c3CX9d7H1BBoXVH7Kb2CMa_6c48a","a8r4jvyuxGB6t0qpmWBdet_6c48a","c72KTFFZpOVpC/BCt0ohMj_6c48a","d1BmiHh/JNUY/ANfXFxSc3_6c48a","d2d7yoQTVGN5icstajuDFm_6c48a","d2+P+xFhdFzqluT1+DbuAb_6c48a","d3KKDaX/1CTJLm7ZzB/eT2_6c48a","2cT0UtMs9AkLVzi/ysHaxD","dfJxi22vlOK56yR/C+I2ug_6c48a","36BOse3yBMAZcj6QT4T1EE_f9941","a6GBLltulGcL8jUhvtjA/j","05/lYrB3pC4bDoTrSGsvB+_f9941","f92GR6MqxN5Jb/nWRth8so_f9941","d6fB3QTaVMsIzfxjUgqg1p","94emJjJ5FLDpj5Q8+EzllV","50a5XIFXpAyovBrDN9cCTF","7daeDj/j5M47sBv8TbNG7d","a2sNQiBApPy5EbuXxCY2Qb_219e8","a2sNQiBApPy5EbuXxCY2Qb_f14d7","a2sNQiBApPy5EbuXxCY2Qb_2953c","f1hB1UdPNJMpJAuRN1g/4v","a2sNQiBApPy5EbuXxCY2Qb_b578a","e8VgmAXGVHHpDT/p37yExp_6c48a","48vqdiY7pG7Iv1JnrnACE6","aayurWvGtFIaotXQfyldVg","f4suj9nkJFgYfPu+Ci8FYk","50pyLCyXFF1JMcVoFwupWv","c6BMvcRXZJs4by5vbBVLLZ","e0tNxIj4BNba168cgCJk3a","56gXrAaUFBeKgOwbScDPVx","afW+LW/MNLt6xKgzNBJxsi","500yk+WsFMQ7jlUPunk5WF_f9941","13Sxzt+lNBX41pby2abaP0_f9941","0eME+VBGxKT5mVpwr7wT1t_f9941","55Iz/+ysxHSLMhVeoEW4Ep_f9941","e8VgmAXGVHHpDT/p37yExp_f9941","b7ujEspLpLAa/PxybxJV9W_f9941","6dxa2eyDpK2b1aJvulvwFG_f9941","ffgZuOriBAqIK0TOrl3fog_f9941","20V5Yrk+JIWoKH7u/I6cE2_f9941","36+N5eMVBGUaW8QXh+vmC8_f9941","62wuoq6tNNkpW2PqrnVshk_f9941","6agH/vQZNCSqfOUlhxztYa_f9941","5ad7WzfBNGr4Im/S0yf6qO_f9941","08GzR/+ClHaohsC2fsKc80_f9941","471bzaJOZLXJCWH+XgpAX4_f9941","d3KKDaX/1CTJLm7ZzB/eT2_f9941","0ajGdhA5tIDYHuXH2OQQxg_f9941","d2+P+xFhdFzqluT1+DbuAb_f9941","0cj9WErr9JMLbuJpaw602W_f9941","3fbi1YasBK/oqnwfNsPc9M_f9941","08RW8P3JdDjrCgsJbsaByB_f9941","66eMUgB5lJ56nndLRxzBRQ_f9941","00ULpmEftEgbPKnbwKm9A+","66ANZ39GpG74VgEXZU6Tru","fdoJXLgx1GAa2UhGATlj3o","66JlIA0x9BvICYDMq/B+B6_f9941","e3rS5lNDdBgoZTnsHlGgIN","29ZTY4TlJLKrJYGbhA7guM","fd6v14rwxCeY51+0RGHRSM","ef/JVTexBBioabI72wFGnK","b8/TJNLQtKCoawCV05YdsW","58Li/I5fZAxbnnhELW95j7","47xzJs9klFG7M1dCMN59QC","cfhA3qP9ZGfqs+4dQHiGBI","73NGYlnyBH55v3ZraNrubp","8d+3xEcK9JvYegNCM1Goqf","56D9GkdoZBeb7Rb0yJ7YjO","07uiH+atFBArIP8x5Np3pD","1e+fSBdHhGHYdhqPabh+IM","87gHJW7T9IZpxLy5RKY1r9","99Rfdmqq1GVL7q2CakqJ+c","19k761nb1C65B3exYZBv39","34yEUvAxRMkZejtHcaA8p8","9e6bdGqwdEOq73WjwnP4nQ","03K9UAjihGobDqsYppHa2F","4brTYb3WpGX7LFuE9o8fSP","d2aJO4TsZADbFKoGWa0qkZ","87yxNA9FtFcbIS4DUDdQxu","23zqINVI1Cpp+jfKczpkgZ","b0k84d13hLvad+HeMO3JEZ","39TJpZgKBKdo1r4p/VzZrX","87cqMDnqRJjaXjrRMcDQaz","bc2/dAx7FLYb9DbxHeZITf","056GidWYVBOJoNmSlQ25O7","73SQpIgmVBcZtncKCpskr4","e6SSLXVBRAKrIUiEz1HX9T","75m1MGgJ1OaYTFDcXKMqXV","a94h6rZy1Nkph4/148zoVx","5a/+Db5V5CnKGOyBUaeqoK","6dNoPlzQ5D+oYnDnlvFe9g","70twnxzTxAwJUAfum4fWIQ","f4/voXkfJHeqZzGHjvxrJK","62/x20b75DEKPx9zRESf+U","1dw+j77dJGX4uRf2g4iR2O","ab4dONrMJDgJGwQNQdPVPW","82r0Dgp09KQKIVQjfKpR+B","69uHJMq+BGmrK0lGjWL9Cv","00fA2fMtxBKqzNdniDhDtM","d3g2y3bxhCQ7xN25/8qNyR","4dgXqXgXpDCZcaTSW2GIEZ","f1+bYeSI1MI7e+uhwZ6te3","73G3XVl4lB15miAuzLWerH","4evCUeAXhAU59lm0XsezpY","edUOesMxFPha+iFREjmoFg","e0GK+ospBObr61IjncWSDV","6cj+Hk8oJOdo7Njskqng3P","91HkQVD55L2KYDzmmPcwzd","244+qUMnpECL+fgGDqXVjk","f2yYuI6FJN0rfxCQFvm2kN","4e84Ok3jJLAoam/JjK6AAg","25ZcObCs5BRIsdfsCwLi0G","9bTe69QLpJcb/EMjEvPvS9","ddlV6CCbVHQpxsDmvHnA1Z","dbeA6z+9VPjYfybYgijf4Q","16wtYyQj1DCJBg0vUIiSu9","fbpHrzUhlMjLX+e6pD/Xba","59rDRZ+V5MF7Q5+ZBlY3is","19x5ivEddMpoNa1P/4OYAb","8e4LBBUTtAR7zeQrJUcWJH","47qUE8o7hPzLcO6DEx7K85","0965I9nJtMeYsxtVSy5G2I","3fAM0tKyJFjKm50M7cZMAa","1ak+yosKZNvJz6sw6GhYGr","8cUG9WwchJ66YPJaFMavpC","3fRNAZ7iZGtrLDpshtSMUC","21XA8Sg25N5LXWF8jTM+on","a6heQkRz5NQ7wrzY2RNHR7","d447G8LF1B4rAjZ9dJaelX","eaAhUuKSBNL6VKLiu7n8l6","4e4CEPaedKKYOmpCpabl2H","23nJ9trDNIm7uPqGJEEgv3","91eeX8wOFJd4BcK1+cNa6c","eauQwUJMVH6430m6IhBaE9_6c48a","49mEeWKrdOyLzUZmyNAHq5_6c48a","37HYgk9kRCSaNhkzr36GcH_6c48a","b65CgwXN9Gb7t2etQ9XC9l","81KHJaNY9CiorYodSVZLQr","f3zTdF9bJCM7OMMUF8BwZ/_6c48a","86O42BOx9O96MY1QYdgVvv_ebcc0","86O42BOx9O96MY1QYdgVvv_1032b","86O42BOx9O96MY1QYdgVvv_05586","86O42BOx9O96MY1QYdgVvv_980fe","fa+a9QaOhK8LmJ7RohLJKE_6c48a","fes2sw7sNBtqsGvUH0xFUb_f9941","c35r5vpnJEdqVvhWD5aeCt","fdCImM4bBABrV3cSjCasrF_6c48a","609xlc7CpF67qUiVX2DoHQ","1cPDpUR/ZBrobD6TzTrPRu_f9941","2cxWFue41N3IquwsO7r4qm_f9941","0fxId+ihVKOKMvBBte2tFA","45SbvncEFEXKyMedA55ZZn_f9941","0dT0e3x65BWq7dK2mECpDF","b83qQfx21Hc6uDH2UA+s/P_f9941","55frnjaqZNaKVO49pHiSR/_f9941","afE7BAmtpCYIJq3aOjRcev_f9941","7cWBhqsSRCqr+uo/4kdv+o","0d+r/7wjBDD4DIzhksnZ3O","ffgZuOriBAqIK0TOrl3fog_6c48a"],["node","targetInfo","_spriteFrame","root","_mesh","_font","data","_customMaterial","_effectAsset","_particleSystem","_mainTexture","_textureSource","asset","mainTexture","_defaultClip","_normalSprite","target","source","prefabSplat","_parent","splatSpriteFrame","_cameraComponent","scene","_envmapHDR","_envmapLDR","_texture","matExp","matStarfruit","matPowerup","iconBombDeflect","iconBerryBlast","iconPeachTime","nodeClaimableMission","nodeNotificationNewMission","textWithFriends","tagGreenClaim","xpBarFill","xpBarFillTransparant","textLevelAngka","_barSprite","trailGraphics","trail","line","camera","bladeTip","homescreen","mainCamera","textFruitCount","prefabSplash","prefabSliceDiamond","prefabSliceDiamondCritical","prefabArcadeTopLabel","matBestScoreBiasa","matBestScoreNew","matZenTimerNormal","matZenTimerTimeOut","prefabCriticalParticle","prefabTrailParticle","prefabBombRay","prefabCross","prefabParticleFront","prefabParticleBack","prefabParticleShadow","textFruitCombo","textFruitCritical","textBerryBlast","prefabBerryBlastShockwave","prefabTextPomegranateScore","prefabTextPomegranateSlice","prefabPomegranateRay","prefabPomegranateRay2D","prefabBombPurpleText","prefabTextPeachyTime","prefabPeachyBurst","prefabSpecificFruit","textBombDeflect","particleBombDeflect","labellGreenMaterial","labellGreyMaterial"],["cc.ImageAsset","cc.Texture2D",["cc.Node",["_name","_layer","_active","_id","_objFlags","__editorExtras__","_components","_parent","_prefab","_lpos","_children","_lscale","_euler","_lrot"],-3,9,1,4,5,2,5,5,5],"cc.SpriteFrame",["cc.Widget",["_alignFlags","_top","_bottom","_originalWidth","_left","_right","_originalHeight","_horizontalCenter","_alignMode","_enabled","_isAbsRight","_verticalCenter","node","__prefab","_target"],-9,1,4,1],["cc.Label",["_string","_actualFontSize","_isSystemFontUsed","_lineHeight","_enableWrapText","_fontSize","_overflow","_horizontalAlign","_verticalAlign","node","_font","__prefab","_customMaterial","_color"],-6,1,6,4,6,5],["cc.RealKeyframeValue",["interpolationMode","rightTangent","rightTangentWeight","leftTangent","leftTangentWeight","value","tangentWeightMode"],-4],["cc.Sprite",["_sizeMode","_type","_fillRange","_isTrimmedMode","node","_spriteFrame","__prefab","_color"],-1,1,6,4,5],["cc.ShapeModule",["_shapeType","radius","emitFrom","_enable","length","_angle","_arc","alignToDirection","radiusThickness","arcSpeed","_rotation","_position","_scale"],-6,4,5,5,5],["cc.Node",["_name","_active","_layer","_id","_components","_parent","_prefab","_lpos","_children","_lrot","_euler","_lscale"],-1,2,1,4,5,2,5,5,5],["cc.CurveRange",["mode","multiplier","constantMin","constantMax","constant","spline","splineMin","splineMax"],-2,4,4,4],["cc.ParticleSystem",["_simulationSpace","_capacity","_aabbHalfX","_aabbHalfY","_aabbHalfZ","duration","loop","startSize3D","playOnAwake","simulationSpeed","startRotation3D","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer","bursts"],-8,1,4,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9],["cc.Animation",["playOnLoad","node","_clips","__prefab","_defaultClip"],2,1,3,4,6],["cc.UITransform",["node","__prefab","_contentSize","_anchorPoint"],3,1,4,5,5],["cc.LabelOutline",["_width","_enabled","node","__prefab","_color"],1,1,4,5],["cc.Node",["_name","_layer","_id","_active","_components","_parent","_lpos","_prefab","_lscale","_children"],-1,12,1,5,4,5,2],["cc.GradientRange",["_mode","gradient","color","gradientMin","gradientMax","colorMin","colorMax"],2,4,5,4,4,5,5],["cc.Layout",["_layoutType","_affectedByScale","_resizeMode","_spacingX","_spacingY","_horizontalDirection","_verticalDirection","node","__prefab"],-4,1,4],["cc.RigidBody",["_group","_enabled","_useGravity","node","__prefab"],0,1,4],["cc.Material",["_defines","_states","_techIdx","_name","_props"],-1,12],["cc.ColorKey",["time","color"],2,5],["cc.VelocityOvertimeModule",["space","_enable","x","y","z","speedModifier"],1,4,4,4,4],["cc.ParticleSystemRenderer",["_alignSpace","_renderMode","_lengthScale","_velocityScale","_mainTexture"],-1,6],["cc.PrefabInfo",["fileId","root","asset","nestedPrefabInstanceRoots","targetOverrides"],2,1,1,2,9],["cc.PrefabInfo",["fileId","targetOverrides","root","asset","nestedPrefabInstanceRoots"],1,1,1,2],["cc.UIOpacity",["_opacity","node","__prefab"],2,1,4],["cc.LabelShadow",["_blur","_enabled","node","__prefab","_offset","_color"],1,1,4,5,5],["cc.Gradient",["colorKeys","alphaKeys"],3,9,9],["cc.RotationOvertimeModule",["_enable","_separateAxes","x","y","z"],1,4,4,4],["cc.Button",["_transition","_zoomScale","node","_normalSprite","__prefab","clickEvents"],1,1,6,4,9],["cc.ClickEvent",["_componentId","handler","customEventData","target"],0,1],["cc.Camera",["_projection","_priority","_visibility","_orthoHeight","_far","_clearFlags","_fov","node","_color"],-4,1,5],"cc.TextureCube",["531d0ROmLNAd7d9J2jXBkD6",["colliderRadius","node","__prefab"],2,1,4],["cc.PrefabInfo",["fileId","root","instance","asset","targetOverrides"],2,1,4,6,9],["cc.PrefabInstance",["fileId","propertyOverrides","prefabRootNode"],2,9,1],["cc.ParticleSystem",["duration","_capacity","node","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer","__prefab"],1,1,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],["cc.AlphaKey",["alpha","time"],1],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.SizeOvertimeModule",["_enable","size","x","y","z"],2,4,4,4,4],["cc.ForceOvertimeModule",["_enable","x","y","z"],2,4,4,4],["cc.TrailModule",["_enable","lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],2,4,4,4,4,1],["cc.Burst",["repeatInterval","count"],2,4],["cc.EffectAsset",["_name","shaders","techniques","combinations"],-1],["cc.Scene",["_name","_children","_globals","_prefab"],2,2,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_shadowColor","_size"],3,5,5],["cc.SkyboxInfo",["_envmapHDR","_envmapLDR"],3,6,6],["cc.Line",["_worldSpace","_enabled","_positions","_width","_color","node"],1,12,4,4,1],["RenderQueueDesc",["stages","isTransparent","sortMode"],0],["cc.Prefab",["_name"],2],["cc.CompPrefabInfo",["fileId"],2],["44361gMlj1Kjqm0hGPiPvAj",["node","__prefab"],3,1,4],["cc.TargetOverrideInfo",["propertyPath","source","sourceInfo","target","targetInfo"],2,1,4,1,4],["cc.TargetInfo",["localID"],2],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],1,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["cc.MeshRenderer",["node","__prefab","_materials","lightmapSettings","_mesh"],3,1,4,3,4,6],["cc.ModelLightmapSettings",[],3],["cc.Material",["_props","_defines"],1],["96c41znOatAZbf6QFu0yEI3",["_enabled","blur","node","__prefab","offset"],1,1,4,5],["cc.Mesh",["_native","_hash","_struct"],1,11],["cc.RealCurve",["_times","_values"],2,9],["cc.LimitVelocityOvertimeModule",["limitX","limitY","limitZ","limit"],3,4,4,4,4],["cc.TextureAnimationModule",["frameOverTime","startFrame"],3,4,4],["e76acDkfy9Coq4yyvH5geNL",["node","__prefab","matExp","matStarfruit","matPowerup"],3,1,4,6,6,6],["a9b30jub6lG24pxvNe9a7xc",["offsetX","offsetY","offsetZ","node","__prefab"],0,1,4],["5655axo/X9AlZ9a7wV8E7av",["node","__prefab"],3,1,4],["99544WoHgdBwri9fjCkjOnB",["node","__prefab"],3,1,4],["4a143Fh2HlI5oV1juP5TRF2",["node","__prefab"],3,1,4],["9058cfxX5RIArbndRVivXV8",["node","__prefab","iconBombDeflect","iconBerryBlast","iconPeachTime"],3,1,4,6,6,6],["cc.Mask",["node","__prefab"],3,1,4],["34e7egMYmBBQrIUNzB/xGOK",["node","__prefab","prefabSplat","splatSpriteFrame"],3,1,4,6,6],["19cfeEkEAtPR4ufZJYYgPzW",["node","__prefab","textLevelAngka","xpBarFillTransparant","xpBarFill","tagGreenClaim","textWithFriends","nodeNotificationNewMission","nodeClaimableMission"],3,1,4,1,1,1,1,1,1,1],["8d34ekFjbNM5q/X0vM02c7i",["fruitName","action","node","__prefab"],1,1,4],["91ac1WPrjhGZoTWzyp/q+/N",["mainCamera","target","node","__prefab"],1,1,4],["87cfbCMeURIPqqySIXa4ZV2",["colliderRadius","bombType","node","__prefab"],1,1,4],["cc.SceneAsset",["_name"],2],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["0c172ndj71P+7E8BmP3v+bU",["node"],3,1],["cc.Canvas",["node","_cameraComponent"],3,1,1],["c94299uflFBvpaB1IqBJqol",["node"],3,1],["0ea0b+BYWtB+pekVUpE9ly9",["node"],3,1],["cc.ProgressBar",["_totalLength","_progress","node","_barSprite"],1,1,1],["1ce0eccLXdI8rzpVS2bTHgE",["node","__prefab","topMaterial","middleMaterial","bottomMaterial"],3,1,4,3,3,3],["625d6JQb5RMcpritewxLviL",["node","__prefab"],3,1,4],["76f71VENV5CL6CIxvHjGTZ+",["node","__prefab"],3,1,4],["1d9f79OMKhJuLrGSkhSzGGB",["node"],3,1],["d7347eZappP+qQRvW00cqin",["node","bladeTip","camera","line","trail","trailGraphics","splatSpriteFrame","prefabSplash","prefabSliceDiamond","prefabSplat","prefabSliceDiamondCritical"],3,1,1,1,1,1,1,3,6,6,6,6],["cc64cOlEZxLkafi0Pm+9Hpt",["canvasScreenshot","mainScreen","labelLog","node","iconFruitFact","canvasBlade","canvasForTextBehind3D","canvasForGameplayText","mainCanvas2","mainCanvas","mainCanvasOverlay","camera","loadingScreen","homescreen","prefabArcadeTopLabel","matBestScoreBiasa","matBestScoreNew","matZenTimerNormal","matZenTimerTimeOut"],0,1,3,1,1,1,1,1,1,1,1,1,6,6,6,6,6],["a8fa7BOQaVHLLkO6EYCTcWA",["node"],3,1],["545d9ME/PlENZ3gIRzYmQaX",["node","listPrefabBlitzText"],3,1,3],["5ed4cW/5v1F7pgF6o9lUgrE",["node","colorTL","colorTR","colorBL","colorBR"],3,1,8,8,8,8],["374d173SU1O5ZRreZj2ihLR",["_enabled","node"],2,1],["0b079ZlGLxMPoqEt1zDI/O4",["prefabPath","type","node"],1,1],["d5c3cQbdXFEeJj9fFHZTltE",["node","fruitFBXList","juiceParticle","textFruitCount","mainCamera","prefabCriticalParticle","prefabTrailParticle","prefabBombRay","prefabCross","prefabParticleFront","prefabParticleBack","prefabParticleShadow","textFruitCombo","textFruitCritical","textBerryBlast","prefabBerryBlastShockwave","prefabTextPomegranateScore","prefabTextPomegranateSlice","prefabPomegranateRay","prefabPomegranateRay2D","prefabBombPurpleText","prefabTextPeachyTime","prefabPeachyBurst","prefabSpecificFruit","textBombDeflect","particleBombDeflect"],3,1,3,12,1,1,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],["f26442EaRBEEaxopYmLZeNE",["node","listBGM"],3,1,3],["cc.AudioSource",["node"],3,1],["cc.MotionStreak",["node","_customMaterial","_texture"],3,1,6,6],["cc.DirectionalLight",["_shadowSaturation","node","_staticSettings"],2,1,4],["cc.StaticLightSettings",[],3],["cc.BoxCollider",["node","_size"],3,1,5],["3f1d5S6BcFPt47lc32Lcgq0",["node","__prefab","labellGreenMaterial","labellGreyMaterial"],3,1,4,6,6],["ForwardPipeline",["_flows"],3,9],["ShadowFlow",["_name","_stages"],2,9],["ShadowStage",["_name"],2],["ForwardFlow",["_name","_priority","_stages"],1,9],["ForwardStage",["_name","renderQueues"],2,9],["3f3a4a0/cVFwZvy0Nw/9MrA",["node","__prefab"],3,1,4]],[[10,1],[51,0,2],[23,0,1,2,2],[10,4,2],[54,0,2],[65,0,1,2],[13,0,1,2,1],[59,0,1,2,2],[16,1],[6,0,5,3],[58,0,1,2,3],[10,0,2,3,4],[20,0,1,2],[6,0,5,2,4,5],[37,0,1,3],[60,0,1,2,3,4,1],[61,1],[56,0,1,2,3],[7,4,6,5,1],[50,0,2],[2,0,1,7,6,8,9,3],[13,0,1,2,3,1],[64,0,1,2,3],[66,0,1,2,3,1],[67,0,1,1],[14,0,2,3,4,2],[40,1,2,3,1],[41,1,2,3,4,5,1],[2,0,1,7,6,8,3],[39,0,1,2,3,4,2],[2,0,1,7,6,8,9,11,3],[22,0,4,2],[10,0,5,2],[16,0,1,2],[13,0,1,1],[18,0,3,4,2],[27,0,1,1],[6,1,2,3,4,5],[57,0,1,2,2],[21,1,0,2,3,4,5,3],[10,0,6,7,2],[28,2,3,4,1],[20,1,1],[10,0,2],[6,0,2,4,4],[6,5,1,2,3,4,6],[19,1,0,4,3],[6,0,5,1,3,5],[6,0,5,1,2,3,4,7],[2,0,1,7,10,6,8,9,3],[10,0,1,6,7,3],[2,4,5,7,8,3],[2,0,2,7,6,8,13,12,3],[34,0,1,2,3,2],[38,0,1,2],[52,0,1,1],[11,5,6,2,3,4,1,0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,37,27,28,29,30,31,32,33,34,35,36,8],[27,0,1],[10,0,1,5,3],[7,0,4,6,7,5,2],[42,0,1,2],[20,0,2],[26,1,0,2,3,4,3],[63,0,1,2,3,4,3],[5,0,1,5,3,4,2,9,11,12,10,7],[38,1,1],[13,0,2,1],[2,0,1,7,10,6,8,9,11,3],[2,0,1,10,6,8,3],[35,0,2,1,2],[8,3,0,2,1,4,5,9,7],[10,0,3,3],[9,0,5,4,6,2],[9,0,8,4,6,2],[5,0,1,5,3,6,4,2,9,11,12,10,8],[19,2,1,0,4,4],[37,0,2],[33,0,1,2,2],[7,1,0,4,6,5,3],[2,0,2,1,7,10,6,8,4],[29,0,1,2,4,5,3,3],[2,0,7,6,8,13,12,2],[16,0,3,4,2],[8,3,0,2,1,4,6,5,9,10,8],[12,1,3,1],[18,1,0,3,4,3],[10,1,2],[2,0,1,7,6,8,11,3],[2,0,1,7,6,3],[11,5,2,3,4,1,0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,7],[28,0,2,3,4,2],[2,0,10,6,8,9,2],[2,0,7,6,8,2],[20,1],[7,0,4,6,5,2],[30,0,1,3,3],[4,0,3,6,12,4],[12,0,1,3,2,4,2],[12,1,3,2,1],[5,0,7,1,5,3,6,4,2,9,11,12,10,9],[12,1,3,2,4,1],[53,0,1,2,3,4,2],[19,3,1,0,4,4],[5,0,1,5,3,4,2,9,11,13,10,7],[16,2,1],[9,0,4,6,2],[6,0,2],[99,0,1,2,3],[2,0,10,6,8,2],[2,0,1,7,6,8,9,13,12,3],[2,0,2,7,10,6,8,13,11,12,3],[14,1,0,2,3,4,3],[6,5,1,3,4],[21,0,2,3,4,5,2],[75,0,1,2,3,1],[55,0,1,2,3],[13,0,2,3,1],[5,0,1,5,3,6,4,2,9,11,13,10,8],[7,4,6,7,5,1],[85,0,1,1],[2,0,2,7,10,6,8,13,12,3],[2,0,7,6,8,12,2],[2,0,2,7,6,8,9,3],[2,0,2,7,6,8,9,13,12,3],[2,0,7,6,8,9,13,12,2],[2,0,1,7,10,6,8,3],[2,0,1,3,7,10,6,9,4],[9,0,2,5,4,6,3],[25,0,1,2,2],[25,1,2,1],[8,3,0,1,4,5,9,6],[4,0,3,6,12,13,4],[4,0,12,2],[77,0,1,2,3,3],[31,0,1,3,4,5,2,7,8,7],[2,0,2,1,7,10,6,8,9,11,4],[2,0,1,7,6,9,3],[15,0,1,5,4,6,3],[23,0,1,2,3,2],[5,0,7,1,5,3,6,4,2,9,11,13,10,9],[26,0,2,3,5,4,2],[21,2,3,4,5,1],[42,1,1],[7,4,6,1],[4,0,4,5,1,2,3,6,12,13,14,8],[4,0,1,12,13,3],[2,0,2,7,6,8,3],[2,0,7,6,9,13,12,2],[23,0,1,2,4,3,2],[35,0,1,2],[25,1,1],[11,0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,2],[8,3,0,2,1,4,5,9,10,7],[39,1,2,3,4,1],[6,0,1,2,3,4,6],[6,0,1,3,4],[28,0,1,2,3,4,3],[7,1,0,2,4,6,5,4],[7,0,3,4,6,5,3],[29,2,4,3,1],[30,0,1,2,3,4],[4,0,2,7,12,13,4],[92,0,1],[106,0,1,1],[2,0,1,10,6,8,9,3],[2,0,1,10,6,8,11,3],[2,0,2,1,7,10,6,8,9,4],[2,0,2,1,7,6,8,9,11,4],[2,0,3,7,6,3],[2,0,2,1,7,10,6,8,11,4],[2,0,1,7,10,6,3],[12,1,2,1],[24,0,1,2,3,3],[13,0,1],[5,0,7,1,3,6,4,2,9,11,12,10,8],[5,0,8,1,5,3,2,9,11,12,10,7],[5,0,1,3,6,4,2,9,11,12,10,7],[5,0,7,8,1,5,9,6],[11,2,3,4,1,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,5],[10,0,2,3,1,5],[10,4,1,3],[6,2,4,3],[21,1,2,3,4,5,2],[22,1,3,2,0,4,5],[7,0,4,7,5,2],[4,0,4,1,2,12,13,5],[74,0,1,1],[80,0,2],[81,0,1,2,3,4,1],[82,1],[83,1],[2,0,2,1,7,6,8,4],[2,0,1,6,8,3],[2,0,2,1,7,6,8,9,4],[2,0,10,6,8,11,2],[2,0,2,1,7,6,8,9,13,11,12,4],[2,0,1,7,6,8,9,13,11,12,3],[2,0,1,3,10,6,9,4],[2,0,1,7,10,6,9,3],[2,0,1,7,6,11,3],[2,0,1,7,6,8,13,12,3],[9,0,5,4,7,2],[15,0,4,7,2],[18,0,2,3,4,3],[33,1,2,1],[24,0,1,2,3,4,3],[5,0,1,5,3,4,2,9,11,10,7],[14,2,3,4,1],[14,0,2,4,2],[11,7,5,0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,4],[27,1,1],[10,0,2,3],[8,0,2,1,4,5,9,6],[8,2,9,2],[8,3,0,2,1,8,9,6],[8,3,0,1,9,4],[6,5,2,4,4],[22,4,1],[7,1,0,2,4,6,7,5,4],[7,4,5,1],[7,0,4,2],[69,0,1,2,3,4,4],[4,0,4,5,1,2,3,6,12,13,8],[4,0,5,1,12,13,4],[4,0,7,12,13,3],[4,9,0,1,12,13,14,4],[4,0,8,12,3],[4,0,5,2,12,13,4],[4,0,4,1,2,7,12,13,6],[4,0,1,2,3,6,12,6],[79,0,1,2,3,3],[44,0,1,2,2],[45,0,1,2,3,4,2],[46,0,1],[47,0,1,1],[31,0,1,6,5,2,7,6],[2,0,10,8,11,2],[2,0,10,6,8,9,13,12,2],[2,0,2,1,7,6,8,9,13,12,4],[2,0,7,10,6,8,9,13,12,2],[2,0,2,1,7,10,6,9,4],[2,0,1,7,6,9,11,3],[2,0,2,1,7,6,8,11,4],[2,0,2,1,7,10,6,4],[2,0,3,7,10,6,9,11,3],[2,4,5,8,3],[2,0,2,1,7,6,9,4],[2,0,3,7,6,13,12,3],[2,0,2,3,7,6,9,4],[2,0,1,3,7,6,9,4],[2,0,1,7,10,6,8,11,3],[9,0,5,8,4,6,2],[9,0,1,5,4,6,9,10,3],[9,0,1,2,5,8,4,6,7,11,4],[9,0,5,8,4,6,7,2],[9,0,8,4,6,7,2],[9,0,1,3,5,4,7,9,10,4],[9,0,1,3,5,4,4],[9,0,2,5,4,7,3],[15,0,1,5,4,7,6,8,3],[15,0,2,5,9,4,6,3],[15,0,3,1,5,4,6,4],[12,0,1,3,2,2],[12,0,1,2,4,2],[18,3,4,1],[34,0,1,2,4,3,2],[24,0,1,4,3],[19,0,4,2],[62,0,1,3],[13,0,1,3,1],[5,0,8,1,5,3,6,4,2,9,11,12,10,9],[5,0,1,2,9,11,10,4],[5,0,1,3,6,4,2,9,11,7],[5,0,1,5,3,6,4,2,9,12,10,8],[5,0,1,3,6,4,2,9,12,10,7],[5,0,7,1,9,4],[5,0,7,1,5,3,4,2,9,11,12,10,8],[5,0,8,1,5,3,6,4,2,9,11,13,10,9],[14,2,3,1],[14,0,2,3,2],[14,2,1],[26,0,2,3,4,2],[11,2,3,4,1,0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,6],[11,6,2,3,4,1,0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,37,27,28,29,30,31,32,33,34,35,36,7],[11,5,9,1,0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,5],[11,5,6,8,2,3,4,1,0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,37,27,28,29,30,31,32,33,34,35,36,9],[11,10,5,6,8,2,3,4,1,0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,37,27,28,29,30,31,32,33,34,35,36,10],[11,7,5,6,0,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,37,27,28,29,30,31,32,33,34,35,36,5],[36,0,1,2,27,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,3],[36,0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,2],[16,0,5,6,2],[8,0,2,7,1,9,5],[8,3,0,2,7,1,9,11,6],[8,3,0,2,1,8,4,6,5,9,10,9],[8,3,0,2,1,4,6,5,9,12,8],[8,3,0,2,7,1,9,6],[8,3,0,2,1,8,9,10,6],[6,1,3,3],[6,0,6,5,1,2,3,4,8],[40,0,1,2,3,2],[41,0,1,2,3,4,5,2],[22,1,2,0,4,4],[68,0,1,2,3,4,1],[17,2,0,1,7,8,4],[17,2,0,4,1,7,8,5],[17,0,3,5,1,7,8,5],[17,0,6,7,3],[17,2,0,3,1,7,8,5],[7,1,0,4,7,5,3],[7,0,4,5,2],[7,1,0,4,3],[29,2,3,1],[30,0,1,3],[43,0,1,2,4],[43,0,3,1,2,5],[70,0,1,1],[4,0,3,6,12,13,14,4],[4,0,1,3,12,13,4],[4,0,4,5,3,12,13,5],[4,0,5,12,13,3],[4,0,2,12,13,3],[4,0,4,1,7,12,13,5],[4,0,4,5,1,3,12,13,14,6],[4,0,4,1,12,13,4],[4,0,4,5,1,3,12,13,6],[4,1,12,13,2],[4,0,1,2,12,4],[4,0,1,2,6,12,5],[4,4,5,1,2,10,3,6,8,12,9],[4,0,3,8,12,13,4],[4,0,1,11,12,13,4],[4,0,4,5,1,2,12,13,6],[4,4,5,1,2,3,6,12,7],[4,0,5,1,12,13,14,4],[71,0,1,1],[72,0,1,1],[73,0,1,2,3,4,1],[76,0,1,2,3,4,5,6,7,8,1],[78,0,1,2,3,3],[44,0,1,3,2,2],[45,0,1,2],[46,0,1,1],[47,1],[84,0,1],[86,0,1],[87,0,1],[88,0,1,2,3,3],[31,0,1,3,4,2,7,8,6],[89,0,1,2,3,4,1],[90,0,1,1],[91,0,1,1],[93,0,1,2,3,4,5,6,7,8,9,10,1],[94,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,4],[95,0,1],[96,0,1,1],[97,0,1,2,3,4,1],[98,0,1,2],[100,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,1],[101,0,1,1],[102,0,1],[103,0,1,2,1],[104,0,1,2,2],[105,1],[48,1,0,2,3,4,3],[48,0,5,2,3,4,2],[107,0,1,2,3,1],[108,0,1],[109,0,1,2],[110,0,2],[111,0,1,2,3],[112,0,1,2],[49,0,2],[49,1,2,0,4],[113,0,1,1]],[[[[19,"BananaSP_freeze"],[108,"BananaSP_freeze",[-15,-16,-17,-18,-19],[[84,-11,[1,"01XpxQfytbzJPCnkIzSHCA"]],[35,2,-12,[1,"67KdewkNtMbaaU5Q0bawu8"]],[77,0.65,-13,[1,"7cnhTYP3ZE378LuawJ9t2w"]],[55,-14,[1,"166ak6c2ZFbY/eJPgeQdkC"]]],[148,"d5nv8PHZlY85D9IYNpJMmk",-10,0,[[101,["_trailModule","_particleSystem"],-3,[4,["d95GbZc2FJspockrI2TGig"]],-2,[4,["d95GbZc2FJspockrI2TGig"]]],[101,["_trailModule","_particleSystem"],-5,[4,["b1mG6y90NGhoETMAEjGS7S"]],-4,[4,["b1mG6y90NGhoETMAEjGS7S"]]],[101,["_trailModule","_particleSystem"],-7,[4,["cfLpj1lT5JgLA1JkgWdWN7"]],-6,[4,["cfLpj1lT5JgLA1JkgWdWN7"]]],[101,["_trailModule","_particleSystem"],-9,[4,["87kR+GzeROdI5U9ZweW7Wx"]],-8,[4,["87kR+GzeROdI5U9ZweW7Wx"]]]],[-1]]],[51,0,{},1,[53,"21VjHvuN9GNI9gCaRF+WeF",-20,[69,"abCReVuSBHtrg9ZL1XNGw8",1,[[17,"particle_bananaFreezeTrail",["_name"],[4,["21VjHvuN9GNI9gCaRF+WeF"]]],[38,["_lpos"],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[1,0,0,0]],[38,["_lrot"],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[3,0,0,0,1]],[38,["_euler"],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[1,0,0,0]]]],12]],[120,"BananaSP_freezeHalf1",false,1,[-23],[[15,-21,[1,"2aWW7hO5NNZI+n6p6XePbU"],[4],[16],5],[35,8,-22,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"61dZSVJh1D/pbKieN9iJiu",1,0],[3,-0.7071068407911905,0,0,0.7071067215818995],[1,-90.00000965934629,0,0]],[120,"BananaSP_freezeHalf2",false,1,[-26],[[15,-24,[1,"22JO86ex1FzYJzXGoNICOb"],[8],[16],9],[35,8,-25,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"e2fv32CtRIf7ymyGwaMig0",1,0],[3,-0.7071068407911905,0,0,0.7071067215818995],[1,-90.00000965934629,0,0]],[81,"BananaSP_freezeWhole",1,[[15,-27,[1,"57jnQV925OU6Pv9uuvrsR0"],[0],[16],1]],[2,"8e6jzNaihNTYKgI6atSpdy",1,0],[3,-0.7071068407911826,1.0677016076363387e-7,1.0677017497448912e-7,0.7071067215818914],[1,-90.0000096593463,0.00001730284635804297,-3.070370720683372e-13]],[121,"BananaSP_freezeHalf1Outline",3,[[15,-28,[1,"51l2C/XU5A/YjVji4FVkuZ"],[2],[16],3]],[2,"92wtGSgexHcaDgkrgaxqPR",1,0],[1,-2.544426174326281e-14,-2.610004738965784e-12,0.000017302846358042774]],[121,"BananaSP_freezeHalf2Outline",4,[[15,-29,[1,"e2gAij5YRGZa7rGnWsqUbn"],[6],[16],7]],[2,"d26EG74WVKc4N6parw/OTg",1,0],[1,-2.544426174326281e-14,-2.610004738965784e-12,0.000017302846358042774]],[81,"BananaSP_freezeOutline",1,[[15,-30,[1,"deSjlwjjFFYZzhohUR2o4D"],[10],[16],11]],[2,"02w3WGultDzpCmQaVQshMq",1,0],[3,-0.7071068407911826,1.0677016076363387e-7,1.0677017497448912e-7,0.7071067215818914],[1,-90.0000096593463,0.00001730284635804297,-3.070370720683372e-13]]],0,[0,-1,2,0,16,2,0,17,2,0,16,2,0,17,2,0,16,2,0,17,2,0,16,2,0,17,2,0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,5,0,-2,3,0,-3,4,0,-4,8,0,-5,2,0,3,2,0,0,3,0,0,3,0,-1,6,0,0,4,0,0,4,0,-1,7,0,0,5,0,0,6,0,0,7,0,0,8,0,6,1,30],[0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,12],[52,53,12,54,52,55,12,56,52,57,12,58,170]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"alphaThreshold":11},"mainColor",8,[4,4281523199],"secondColor",8,[4,4291097855],"thirdColor",8,[4,4278621907],"fourthColor",8,[4,4281260799]]],11]]],0,0,[0],[8],[3]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["01K0TOdiZHOpo5Ka09L5xX"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["01R52BWFNFjK/hbXI6dzz4"]}],[1],0,[],[],[]],[[{"name":"Glow_sprite","rect":{"x":2,"y":2,"width":124,"height":124},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[171]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[39,5]],[[[19,"BlitzText06"],[68,"BlitzText06",8192,[-5,-6],[[34,-2,[1,"9cbm062a5HtZN5n2jXpeS6"]],[100,-3,[1,"032BBXazVLObDf2zYXvTFD"],[6],7],[128,0,-4,[1,"46S4XK5kRA7JkjS4vkXjFJ"]]],[2,"b330N1rGJAurGuJwVync3O",-1,0]],[49,"top_textOutline",8192,1,[-12],[[6,-7,[1,"7fJv6dPXdLyLyPPVq/wbOW"],[5,370.81,64.7]],[103,"Unbelievable blitz!",45,45,45,false,false,-8,[1,"94mZp3jCxGdoZJ1mOApQcQ"],[4,4278255767],2],[25,4,-9,[1,"b2sJ6vP7hJp6sau3Q722MH"],[4,4278255767]],[62,false,1,-10,[1,"26e3l3kitGk5fUbQ9UbNkQ"],[0,3,-3]],[63,false,1,-11,[1,"dbzNeqaCRLobsI1RoDd6Q3"],[0,3,-3]]],[2,"f2K3UCVQ9MELtKuWnOAsy2",1,0],[1,0,30,0]],[49,"bot_textOutline",8192,1,[-18],[[6,-13,[1,"56//FF4hhOoaZvcuazO+5X"],[5,82.36,64.7]],[103,"+30",45,45,45,false,false,-14,[1,"60wm115o9LK7onvmiroJHt"],[4,4278255767],5],[25,4,-15,[1,"4fD63oY79LnbIJ1BlhyiZk"],[4,4278255767]],[62,false,1,-16,[1,"92A0UhiDBCQ7tcvRjhCZ3l"],[0,3,-3]],[63,false,1,-17,[1,"78aHrJ/GZGi6Bn5U3Nv30J"],[0,3,-3]]],[2,"9dpGuTdgBEP6LJprGLhrZ0",1,0],[1,0,-30,0]],[28,"top_text",8192,2,[[6,-19,[1,"b1mzevMARF7Kcm8noV/wDk"],[5,362.81,56.7]],[64,"Unbelievable blitz!",45,45,45,false,false,-20,[1,"94mZp3jCxGdoZJ1mOApQcQ"],0,1]],[2,"72014aGa5JKosXpIynNW0h",1,0]],[28,"bot_text",8192,3,[[6,-21,[1,"8fpKgxHFBGoZqMSUOs/4GN"],[5,74.36,56.7]],[64,"+30",45,45,45,false,false,-22,[1,"94mZp3jCxGdoZJ1mOApQcQ"],3,4]],[2,"fbNj6UVS1EDJ5567pa4wl8",1,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,4,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,-1,5,0,0,4,0,0,4,0,0,5,0,0,5,0,6,1,22],[0,0,0,0,0,0,0,0],[7,5,5,7,5,5,-1,14],[84,0,0,84,0,0,11,11]],[[[22,".bin",3681210972,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13888,"length":1728,"count":864,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":13888,"count":217,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.40757477283477783,-0.4075748026371002,-0.4237368404865265],"maxPosition",8,[1,0.40757477283477783,0.40755438804626465,0]]],-1],0,0,[],[],[]],[[[22,".bin",2528407701,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17024,"length":3168,"count":1584,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":17024,"count":266,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.45161551237106323,-0.4516156017780304,-0.4677368402481079],"maxPosition",8,[1,0.45161551237106323,0.4516156017780304,0.4670338034629822]]],-1],0,0,[],[],[]],[[[22,".bin",256149917,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11392,"length":1728,"count":864,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":11392,"count":178,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4076096713542938,-0.40758079290390015,-0.0003515139105729759],"maxPosition",8,[1,0.4075806438922882,0.40759938955307007,0.42303377389907837]]],-1],0,0,[],[],[]],[[[102,"outinesMort",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_VERTEX_COLOR":true}],[[[{"metallic":0.400000005960464,"roughness":0.806901276111603},"albedoScale",8,[1,1,1,1],"emissiveScale",8,[2,1,1,1,1]]],11]]],0,0,[0],[8],[13]],[[[22,".bin",906303775,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17024,"length":3168,"count":1584,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":17024,"count":266,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4076155126094818,-0.4076155722141266,-0.4237368404865265],"maxPosition",8,[1,0.4076155126094818,0.4076155722141266,0.42303377389907837]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["03vW1mcVdKKJYCVq9b4c8a"]}],[1],0,[],[],[]],[[{"name":"TagGreen","rect":{"x":3,"y":3,"width":118,"height":46},"offset":{"x":0,"y":0},"originalSize":{"width":124,"height":52},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[172]],[[[19,"particle_pomeTrailGlow"],[73,"particle_pomeTrailGlow",[-3],[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[72,"particle_pomeTrailGlowB",1,[-4],[2,"a6AYrN7aFNeKDWbPsMYaFv",1,0]],[178,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,2,[1,"42kh8dqFdGuZimC3nir7JU"],[[0,null],6,0],[33,4,[36,[[42,[4,4285027802]],[12,0.53,[4,4291674623]],[12,1,[4,4290399193]]],[[76,255],[14,255,1]]]],[11,3,6,10],[0],[0],[0],[0],[0],[71,3,6.283185307179586],[0],[3,1],[86,2.4],[3,3],[0],[54,true,[33,1,[36,[[93],[61,1]],[[76,0],[14,60,0.33],[14,60,0.33],[14,60,0.6],[14,0,1]]]]],[212,1,2,1.2,2.738,0.20671679660620837,[0]],[153,[32,1,[5,[0,1],[[48,2,1,-2,1,-2,1],[44,2,1,1]]]],[0],[0],[0]],[113,0,[40,2,[5,[0,1],[[48,2,-0.1111111111111111,-0.8733850129198967,1,-0.8733850129198967,1],[48,2,-0.2,0.06419753086419748,1,0.06419753086419748,1]]],[5,[0,1],[[13,2,0.07407407407407407,1,1],[48,2,0.2814814814814815,-0.17333333333333317,1,-0.17333333333333317,1]]]],[50,2,5,[5,[0,1],[[37,1,1,1,1],[181,1,1]]],[5,[0,1],[[13,2,0.13333333333333333,1,1],[13,2,1,1,1]]]],[40,2,[5,[0,1],[[13,2,-0.14074074074074075,1,1],[13,2,-0.362962962962963,1,1]]],[5,[0,1],[[13,2,0.11851851851851852,1,1],[13,2,0.37777777777777777,1,1]]]],[3,1]],[26,[11,3,-3,3],[11,3,-3,3],[11,3,-3,3]],[23,[0],[0],[0],[0]],[90,true,[0],[0],[11,3,-0.5235987755982988,-0.6981317007977318]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[178,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,1,[1,"d95GbZc2FJspockrI2TGig"],[[2,null],6,0],[33,4,[36,[[42,[4,4285027802]],[12,0.53,[4,4291674623]],[12,1,[4,4290399193]]],[[76,255],[14,255,1]]]],[11,3,6,10],[0],[0],[0],[0],[0],[71,3,6.283185307179586],[0],[3,1],[86,2.4],[3,3],[0],[54,true,[33,1,[36,[[93],[61,1]],[[76,0],[14,60,0.33],[14,60,0.33],[14,60,0.6],[14,0,1]]]]],[212,1,2,1.2,2.738,0.20671679660620837,[0]],[153,[32,1,[5,[0,1],[[48,2,1,-2,1,-2,1],[44,2,1,1]]]],[0],[0],[0]],[113,0,[40,2,[5,[0,1],[[48,2,-0.1111111111111111,-0.8733850129198967,1,-0.8733850129198967,1],[48,2,-0.2,0.06419753086419748,1,0.06419753086419748,1]]],[5,[0,1],[[13,2,0.07407407407407407,1,1],[48,2,0.2814814814814815,-0.17333333333333317,1,-0.17333333333333317,1]]]],[50,2,5,[5,[0,1],[[37,1,1,1,1],[181,1,1]]],[5,[0,1],[[13,2,0.13333333333333333,1,1],[13,2,1,1,1]]]],[40,2,[5,[0,1],[[13,2,-0.14074074074074075,1,1],[13,2,-0.362962962962963,1,1]]],[5,[0,1],[[13,2,0.11851851851851852,1,1],[13,2,0.37777777777777777,1,1]]]],[3,1]],[26,[11,3,-3,3],[11,3,-3,3],[11,3,-3,3]],[23,[0],[0],[0],[0]],[90,true,[0],[0],[11,3,0.5235987755982988,0.6981317007977318]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[59,39,59,39]],[[[19,"Orange"],[91,"Orange",[-6,-7,-8,-9],[[84,-2,[1,"40ZcfI8Q1Ky4LGcr2u12NR"]],[35,2,-3,[1,"c1qmV/Y/pHdKUypLcrY4uV"]],[77,0.5,-4,[1,"e9bcBvvZpEY5HoQ8iKbWN/"]],[55,-5,[1,"8ekf6WWYBGdZBb4jttNIiB"]]],[2,"91ZYlUkdlHm6ydRDNmHMHc",-1,0],[1,-1.982,0,0]],[52,"OrangeHalf1",false,1,[[15,-10,[1,"7aY+UikM5LWKG2P9V7S5Cx"],[0],[16],1],[35,8,-11,[1,"eesSIfTNRM4ZYfwjZbPlvF"]]],[2,"834xQB0QpAjYNPly1euhbh",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[52,"OrangeHalf2",false,1,[[15,-12,[1,"ffjJsd4HRAcoaqIo7fzCPL"],[2],[16],3],[35,8,-13,[1,"76H+gnm51FXp2fyoxak1rB"]]],[2,"04b5ZMSKZKApqaEbiN+f8g",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[81,"OrangeWhole",1,[[15,-14,[1,"beZ7PmRddKAr8BsBR07jXb"],[4],[16],5]],[2,"35QkU+LIpNDpOg6mjTkd28",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[52,"OrangeOutline",false,1,[[15,-15,[1,"d1zD2Yoa5GLKiaNN+wbu9n"],[6],[16],7]],[2,"5en6SMzLRAO4wD0b6k9fd/",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,5,0,6,1,15],[0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,4],[1,173,1,174,1,175,176,177]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4280152597],"secondColor",8,[4,4279151895],"thirdColor",8,[4,4279151895],"fourthColor",8,[4,4279151895]]],11]]],0,0,[0],[8],[3]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["08GzR/+ClHaohsC2fsKc80"]}],[1],0,[],[],[]],[[{"name":"passionfruit","rect":{"x":0,"y":0,"width":86,"height":90},"offset":{"x":-0.5,"y":0},"originalSize":{"width":87,"height":90},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[178]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["08RW8P3JdDjrCgsJbsaByB"]}],[1],0,[],[],[]],[[{"name":"watermelon","rect":{"x":1,"y":0,"width":96,"height":83},"offset":{"x":0.5,"y":1},"originalSize":{"width":97,"height":85},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[179]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4283914071],"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[85,5]],[[[19,"FruitBerryBlastText"],[68,"FruitBerryBlastText",8192,[-4,-5],[[34,-2,[1,"9cbm062a5HtZN5n2jXpeS6"]],[97,true,-3,[1,"f8p1uLb5JPSrIiVdAGWKE2"],[4],5]],[2,"b330N1rGJAurGuJwVync3O",-1,0]],[30,"top_text",8192,1,[[6,-6,[1,"bdTt6bcDFK6bOK01olEM0W"],[5,376.47,104.2]],[64,"BERRY BLAST!",60,60,70,false,false,-7,[1,"7dzxZEBjVNkocUIIXjqaaw"],0,1],[25,8,-8,[1,"2bRW0VautAP75COMRRNhVz"],[4,4278321278]],[62,false,1,-9,[1,"6151qDjWhMqKYVadNpOsBP"],[0,3,-3]],[63,false,1,-10,[1,"2dJx4tIIFFcZQ+qoARN4M5"],[0,3,-3]]],[2,"f5Pvvg3gpPNIUQdctRN6ND",1,0],[1,0,45,0],[1,0.65,0.65,0.65]],[30,"middle_text",8192,1,[[6,-11,[1,"7fJv6dPXdLyLyPPVq/wbOW"],[5,228.27,255.4]],[64,"+5",190,190,190,false,false,-12,[1,"94mZp3jCxGdoZJ1mOApQcQ"],2,3],[25,8,-13,[1,"b2sJ6vP7hJp6sau3Q722MH"],[4,4278321278]],[62,false,1,-14,[1,"26e3l3kitGk5fUbQ9UbNkQ"],[0,3,-3]],[63,false,1,-15,[1,"dbzNeqaCRLobsI1RoDd6Q3"],[0,3,-3]]],[2,"f2K3UCVQ9MELtKuWnOAsy2",1,0],[1,0,-27.077,0],[1,0.65,0.65,0.65]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,6,1,15],[0,0,0,0,0,0],[7,5,7,5,-1,14],[60,0,60,0,14,14]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["0ajGdhA5tIDYHuXH2OQQxg"]}],[1],0,[],[],[]],[[{"name":"pineapple","rect":{"x":0,"y":0,"width":78,"height":105},"offset":{"x":0,"y":0},"originalSize":{"width":78,"height":105},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[180]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["0a07uvwV9B66g8ljmsjE7Z"]}],[1],0,[],[],[]],[[{"name":"hbplus_w_straight","rect":{"x":0,"y":0,"width":400,"height":67},"offset":{"x":0,"y":0},"originalSize":{"width":400,"height":67},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[181]],[[[19,"particle_juiceCritical"],[73,"particle_juiceCritical",[-3],[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[72,"particle_juiceSmall",1,[-4],[2,"1eGkpbHVRA7YQtVRbaS87n",1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"17+MscORlKD6npLDx1rPQ0"],[[0,null],6,0],[8],[3,0.48],[0],[0],[3,6.3],[0],[0],[71,3,6.283185307179586],[0],[3,0.75],[3,0.4],[0],[0],[[60,0.01,[3,44]]],[54,true,[33,1,[36,[[12,0.004464285714285714,[4,4294943010]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.9933035714285714]]]]],[70,true,1,2,0.0001,2.738,0.20671679660620837,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[0],[0],[0]],[39,true,0,[11,3,-10.8,10.8],[11,3,-3.15,3.15],[211,3,2],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[90,true,[0],[0],[11,3,0.7853981633974483,1.5707963267948966]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[2,null],6,0],[8],[3,1.8],[0],[0],[11,3,4.8,9],[0],[0],[71,3,6.283185307179586],[0],[3,0.85],[58,1,2.4,[5,[0,1],[[37,1,1,1,1],[45,1,1,1,1,1]]]],[3,3.5],[0],[[60,0.01,[3,15]]],[54,true,[33,1,[36,[[12,0.004464285714285714,[4,4294963141]],[12,1,[4,4294899067]]],[[14,255,0.002232142857142857],[14,255,0.9933035714285714]]]]],[83,true,1,2,0.0001,2.738,1.5707963267948966,0.20671679660620837,[0],[1,0,0,43.3]],[29,true,[32,1,[5,[0,0.14102564102564102,1],[[13,2,1,0.04860266743843023,1],[47,2,0.9629629629629629,-0.6339319845464617,-0.6339319845464617],[37,-1.1210613598673298,1,-1.1210613598673298,1]]]],[0],[0],[0]],[39,true,0,[11,3,-8.4,8.4],[11,3,-3,3],[211,3,2],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[90,true,[0],[0],[11,3,0.7853981633974483,1.5707963267948966]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[61,40,61,40]],[[[19,"particle_pomeTrail"],[105,"particle_pomeTrail",[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[282,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[0,null],6,0],[33,4,[36,[[42,[4,4285027802]],[12,0.53,[4,4291674623]],[12,1,[4,4290399193]]],[[76,255],[14,255,1]]]],[11,3,2,3.2],[0],[0],[0],[0],[0],[0],[0],[3,1.1],[179,3,0.2,0.4,2.4],[3,19],[0],[54,true,[33,1,[36,[[93],[61,1]],[[76,0],[14,255,0.04241071428571429]]]]],[70,true,1,2,0.6,2.738,0.20671679660620837,[0]],[29,true,[32,1,[5,[0,1],[[48,2,1,-2,1,-2,1],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[40,2,[5,[0,1],[[48,2,-0.1111111111111111,-0.8733850129198967,1,-0.8733850129198967,1],[48,2,-0.2,0.06419753086419748,1,0.06419753086419748,1]]],[5,[0,1],[[13,2,0.07407407407407407,1,1],[48,2,0.2814814814814815,-0.17333333333333317,1,-0.17333333333333317,1]]]],[50,2,5,[5,[0,1],[[37,1,1,1,1],[181,1,1]]],[5,[0,1],[[13,2,0.13333333333333333,1,1],[13,2,1,1,1]]]],[40,2,[5,[0,1],[[13,2,-0.14074074074074075,1,1],[13,2,-0.362962962962963,1,1]]],[5,[0,1],[[13,2,0.11851851851851852,1,1],[13,2,0.37777777777777777,1,1]]]],[3,1]],[299,true,[11,3,-3,3],[11,3,-3,3],[11,3,-3,3]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-3],[31,1,1]]],0,[0,3,1,0,-1,2,0,9,2,0,6,1,3],[0,0],[-1,10],[86,87]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["0cj9WErr9JMLbuJpaw602W"]}],[1],0,[],[],[]],[[{"name":"starfruit","rect":{"x":0,"y":0,"width":95,"height":80},"offset":{"x":-1,"y":0.5},"originalSize":{"width":97,"height":81},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[182]],[[[19,"particle_juicePomeBurst"],[105,"particle_juicePomeBurst",[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[0,null],6,0],[8],[11,3,0.5,1.5],[0],[0],[3,30],[0],[0],[0],[0],[3,1.5],[86,2.4],[0],[0],[[60,0.01,[3,30]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[152,true,1,2,0.0001,2.738,0.20671679660620837,[0],[1,0,0,55]],[29,true,[32,1,[5,[0,0.14102564102564102,1],[[13,2,1,0.04860266743843023,1],[47,2,0.9629629629629629,-0.6339319845464617,-0.6339319845464617],[37,-1.1210613598673298,1,-1.1210613598673298,1]]]],[0],[0],[0]],[39,true,0,[43,3],[71,3,15],[43,3],[58,1,2,[5,[0,0.5384615384615384,1],[[297,0.06506506506506507,0.06506506506506507],[47,2,0.0962962962962963,1.2592592592592602,1.2592592592592602],[9,2,1]]]]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-3],[31,1,1]]],0,[0,3,1,0,-1,2,0,9,2,0,6,1,3],[0,0],[-1,10],[62,41]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["0eME+VBGxKT5mVpwr7wT1t"]}],[1],0,[],[],[]],[[{"name":"SplashSlice","rect":{"x":20,"y":36,"width":483,"height":220},"offset":{"x":5.5,"y":-18},"originalSize":{"width":512,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[183]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"alphaThreshold":0},"mainColor",8,[4,4294961551],"secondColor",8,[4,4290272543],"thirdColor",8,[4,4286134284],"fourthColor",8,[4,4286988562]]],11]]],0,0,[0],[8],[3]],[[[19,"missionEntry"],[164,"missionEntry",33554432,[-4,-5,-6],[[6,-2,[1,"e5kJP7+95DDY0aF29Msit6"],[5,435,90]],[302,-3,[1,"dbw8G8/rVKzqlqGkGtSHIo"],12,13,14]],[2,"49z2ZOgn9C0qKbebWZpPjD",-1,0],[1,0,0.5190000000000055,0]],[49,"layoutMissionClaim",33554432,1,[-9,-10,-11],[[6,-7,[1,"a43hI9zOpKIbPzW2Du4611"],[5,100,78.2]],[303,1,2,true,-8,[1,"c9Y1cuZoZJAKZvMVx9TiII"]]],[2,"1aC+wDbYhBiYoenfgNR0YD",1,0],[1,147.706,0,0]],[67,"MissionIconBacking",33554432,1,[-14,-15],[[6,-12,[1,"5aR7+V0ApCcbR19vPX/pVL"],[5,88,90]],[18,-13,[1,"07GEYNKrRD3L/sWFLMXUTy"],2]],[2,"e6KZLM/PpAtbw6sgBAKrYu",1,0],[1,-171.80399999999997,0,0],[1,0.8,0.8,1]],[67,"mission_textLayout",33554432,1,[-18,-19],[[21,-16,[1,"addvExWWlL6pMzet32SESX"],[5,100,106.7],[0,0,0.5]],[304,1,2,-10,true,-17,[1,"32yRrq8hRAfLfVMgSZrOro"]]],[2,"48Ez/2bDhLrbIwXX3binNi",1,0],[1,-130.565,1.2899999999999636,0],[1,0.40000000000000013,0.40000000000000013,1]],[67,"layoutMissionReward",33554432,2,[-22,-23],[[21,-20,[1,"f6mwF86CdDZKy7AloBUNjT"],[5,100,48],[0,1,0.5]],[305,1,6,1,true,-21,[1,"78ktHyilNBeKNk4jHrFy5/"]]],[2,"e9NrY21E9Oqbwmm5fUqjMm",1,0],[1,50,17.5,0],[1,0.9,0.9,0.9]],[67,"ButtonClaim",33554432,2,[-27],[[6,-24,[1,"23JOKwkpZLALfSagn5YSAT"],[5,200,70]],[78,1,0,-25,[1,"3edae4od9FkqkrLbTYQ8va"],9],[80,3,0.95,-26,[1,"cdb9bkbClF2qT5Z+NuB3AJ"],[[95,"e76acDkfy9Coq4yyvH5geNL","onClaimClicked",1]],10]],[2,"1eksYdOApCxqVmzZAELiSp",1,0],[1,0,-21.6,0],[1,0.5,0.5,0.5]],[20,"missions_text",33554432,4,[[21,-28,[1,"b8VPKGbxNBFqvjahoWQxyO"],[5,500,56.7],[0,0,0.5]],[139,"Slice 50 Green Apples",0,45,45,0,3,false,false,-29,[1,"53GDsuPltOAatGkbOqLkng"],[4,4280770714],3],[111,false,4,-30,[1,"38KvxXcLdL16gLGDyPptkx"],[4,4282729797]]],[2,"a9c18zzfxH87UNGwgfJ7tP",1,0],[1,5.684341886080802e-14,25,0]],[20,"missions_textProgress",33554432,4,[[21,-31,[1,"af0Up6kr1JS74hvS6nvfAD"],[5,500,60],[0,0,0.5]],[139,"49 to go!",0,45,45,0,2,false,false,-32,[1,"14N2XaYThGkYIrRajB9RX2"],[4,4283138224],4],[111,false,4,-33,[1,"bfchyRytJN57/nUSXb3wDw"],[4,4282729797]]],[2,"25YXsB869CVqIY2QSmSCBI",1,0],[1,5.684341886080802e-14,-23.35,0]],[20,"text_point",33554432,5,[[21,-34,[1,"cd1Ok3V2BDeoJUzpWlS+5z"],[5,70.22,56.4],[0,1,0.5]],[174,"100",2,40,0,2,false,false,-35,[1,"bbXFqANDRJr5akf10Wgwig"],6,7],[25,3,-36,[1,"6dw7D4COZFa5kW5hIjXmIB"],[4,4285015669]]],[2,"d9qaAXPCVGIqa90y1A4H87",1,0],[1,-46,0,0]],[191,"MissionIconBackingGreen",false,33554432,3,[[6,-37,[1,"480DP8Zl9HrrFjtjv5+KSv"],[5,88,90]],[18,-38,[1,"b7LBGSPAhBQJeBhbDdvFXO"],0]],[2,"dbCT4zUzVLfIJ00eXLra8E",1,0]],[30,"MissionIcon",33554432,3,[[6,-39,[1,"7fCoKErtVE/pU54T8w7MTP"],[5,233,246]],[18,-40,[1,"4b/5n3XztIPpvclPSyuzNp"],1]],[2,"a7A3yspItFCYmCiOJyHryu",1,0],[1,0.7500000000000568,0.5099999999999909,0],[1,0.3125,0.3125,1]],[20,"Icon",33554432,5,[[6,-41,[1,"80RGGmcAdAeoqesjYf7cGS"],[5,40,40]],[94,0,-42,[1,"a9k8WKP0pBDIoScBhVIFuz"],5]],[2,"53r/vig3JO+b1Ob4cPq73E",1,0],[1,-20,0,0]],[30,"text_claim",33554432,6,[[6,-43,[1,"cadj0h6shOe5Ipm4RzrgJQ"],[5,90,56.4]],[117,"Claim!",25,25,0,2,false,false,-44,[1,"960420ApdF5JQ2HR5/LxhV"],[4,4278217525],8]],[2,"14/TP0FHxLjJ3KCsQJoarS",1,0],[1,0,6.114,0],[1,1.8,1.8,1.8]],[191,"TickGreenClaimed",false,33554432,2,[[6,-45,[1,"4ezDUpcGpFEKhUn7t7jlQA"],[5,64,63]],[18,-46,[1,"f1oMysj+5MuJMAR/YlOce/"],11]],[2,"f48NQgJQhCKp6b1aK65clb",1,0]]],0,[0,3,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,-3,2,0,0,2,0,0,2,0,-1,5,0,-2,6,0,-3,14,0,0,3,0,0,3,0,-1,10,0,-2,11,0,0,4,0,0,4,0,-1,7,0,-2,8,0,0,5,0,0,5,0,-1,12,0,-2,9,0,0,6,0,0,6,0,0,6,0,-1,13,0,0,7,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,0,14,0,0,14,0,6,1,46],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,2,5,5,2,7,5,5,2,15,2,26,27,28],[184,185,186,17,17,88,42,0,0,43,43,187,42,33,8]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[63,5]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["13Sxzt+lNBX41pby2abaP0"]}],[1],0,[],[],[]],[[{"name":"splat14","rect":{"x":10,"y":0,"width":246,"height":242},"offset":{"x":5,"y":7},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[188]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4278190335],"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[64,7]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4294955517],"secondColor",8,[4,4288816794],"thirdColor",8,[4,4283568206],"fourthColor",8,[4,4288498584]]],11]]],0,0,[0],[8],[3]],[[[19,"BombRay"],[236,"BombRay",[-2],[2,"36TYCWR5tL76eIb5nKM9t/",-1,0],[1,15,1,15]],[92,"PomegranateRay",1,[[15,-3,[1,"c6IJqKTKtI54EJc/dnYmAI"],[0],[16],1]],[2,"a9x9TotKhB47+jzRv/3/Cy",1,0]]],0,[0,3,1,0,-1,2,0,0,2,0,6,1,3],[0,0],[-1,4],[189,89]],[[[19,"BlitzText03"],[68,"BlitzText03",8192,[-5,-6],[[34,-2,[1,"9cbm062a5HtZN5n2jXpeS6"]],[100,-3,[1,"b8LtKgYnFOaIw9OwJ4xABA"],[6],7],[128,0,-4,[1,"19ltGizPRAYrA1TO0gUfNn"]]],[2,"b330N1rGJAurGuJwVync3O",-1,0]],[49,"top_textOutline",8192,1,[-12],[[6,-7,[1,"7fJv6dPXdLyLyPPVq/wbOW"],[5,288.72,64.7]],[206,"Awesome blitz!",45,45,45,false,false,-8,[1,"94mZp3jCxGdoZJ1mOApQcQ"],2],[25,4,-9,[1,"b2sJ6vP7hJp6sau3Q722MH"],[4,4291313926]],[62,false,1,-10,[1,"26e3l3kitGk5fUbQ9UbNkQ"],[0,3,-3]],[63,false,1,-11,[1,"dbzNeqaCRLobsI1RoDd6Q3"],[0,3,-3]]],[2,"f2K3UCVQ9MELtKuWnOAsy2",1,0],[1,0,30,0]],[49,"bot_textOutline",8192,1,[-18],[[6,-13,[1,"56//FF4hhOoaZvcuazO+5X"],[5,82.36,64.7]],[206,"+15",45,45,45,false,false,-14,[1,"60wm115o9LK7onvmiroJHt"],5],[25,4,-15,[1,"4fD63oY79LnbIJ1BlhyiZk"],[4,4291313926]],[62,false,1,-16,[1,"92A0UhiDBCQ7tcvRjhCZ3l"],[0,3,-3]],[63,false,1,-17,[1,"78aHrJ/GZGi6Bn5U3Nv30J"],[0,3,-3]]],[2,"9dpGuTdgBEP6LJprGLhrZ0",1,0],[1,0,-30,0]],[28,"top_text",8192,2,[[6,-19,[1,"b1mzevMARF7Kcm8noV/wDk"],[5,280.72,56.7]],[64,"Awesome blitz!",45,45,45,false,false,-20,[1,"94mZp3jCxGdoZJ1mOApQcQ"],0,1]],[2,"72014aGa5JKosXpIynNW0h",1,0]],[28,"bot_text",8192,3,[[6,-21,[1,"8fpKgxHFBGoZqMSUOs/4GN"],[5,74.36,56.7]],[64,"+15",45,45,45,false,false,-22,[1,"94mZp3jCxGdoZJ1mOApQcQ"],3,4]],[2,"fbNj6UVS1EDJ5567pa4wl8",1,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,4,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,-1,5,0,0,4,0,0,4,0,0,5,0,0,5,0,6,1,22],[0,0,0,0,0,0,0,0],[7,5,5,7,5,5,-1,14],[90,0,0,90,0,0,11,11]],[[[22,".bin",1352546201,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4608,"length":264,"count":132,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":4608,"count":96,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.0000001192092896,-1.000000238418579,-1.0000001192092896],"maxPosition",8,[1,1.0000001192092896,1.000000238418579,1.0000001192092896]]],-1],0,0,[],[],[]],[[[22,".bin",3242984595,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5952,"length":360,"count":180,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":5952,"count":124,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1,-2.3871317011980864e-7,-1],"maxPosition",8,[1,1.0000001192092896,1.000000238418579,1.0000001192092896]]],-1],0,0,[],[],[]],[[[22,".bin",193010495,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6144,"length":360,"count":180,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":6144,"count":128,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-1.0000001192092896,-1.000000238418579,-1.0000001192092896],"maxPosition",8,[1,1,2.3871317011980864e-7,1]]],-1],0,0,[],[],[]],[[[19,"particle_shadow_fruit"],[202,"particle_shadow_fruit",[[-2,[221,0.3,-0.8,-1,-3,[1,"99LTjfbd5HxYa+mt/O415H"]]],1,4],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[151,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[0,null],6,0],[104,[4,4287801283]],[3,1.8],[0],[0],[0],[0],[0],[0],[0],[3,0.45],[0],[3,30],[0],[54,true,[33,1,[36,[[42,[4,4287801283]],[42,[4,4287801283]],[12,1,[4,4287801283]]],[[14,0,0.002232142857142857],[14,0,0.07400000000000001],[14,30,0.153],[14,0,0.9933035714285714]]]]],[291,1,2,true,0.04,[0]],[29,true,[32,1,[5,[0,0.21025641025641026,1],[[13,2,1,1,1],[298,2,3,1,-0.06280193236714939,0.23636217760247116,-0.06280193236714939,0.05120725360031629],[44,2,1,1]]]],[0],[0],[0]],[182,true,[40,2,[5,[0,1],[[13,2,0.05185185185185185,1,1],[48,2,0.23703703703703705,-0.0628019323671489,1,-0.0628019323671489,1]]],[5,[0,1],[[48,2,-0.02962962962962963,0.0395738203957382,1,0.0395738203957382,1],[13,2,-0.3111111111111111,1,1]]]],[50,2,10,[5,[0,1],[[216,-0.00001903306699875658,1,1],[45,0.0001960221098164969,0.00021505517681525349,1,0.00021505517681525349,1]]],[5,[0,0.6871794871794872,1],[[48,2,0.2736939847396931,0.021851776699007442,1,0.021851776699007442,1],[48,2,0.5259259259259259,0.5349794238683128,0.21019454274343388,0.5349794238683128,2.0511313010981804],[45,1,1.5154826958105647,1,1.5154826958105647,1]]]],[40,2,[5,[0,1],[[9,2,0.05185185185185185],[9,2,0.28888888888888886]]],[5,[0,1],[[9,2,-0.02962962962962963],[9,2,-0.26666666666666666]]]],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-4],[31,1,1]]],0,[0,3,1,0,-1,2,0,0,1,0,9,2,0,6,1,4],[0,0],[-1,10],[190,91]],[[[19,"PomegranateSliceTextScore"],[68,"PomegranateSliceTextScore",33554432,[-3,-4,-5],[[6,-2,[1,"28tzbsDoJMzawf/ySDO1di"],[5,313.42,242.8]]],[2,"72vpMTftdGtIdF8zZEiPVw",-1,0]],[28,"text_score_3",33554432,1,[[6,-6,[1,"36DZ3Mw09GwqQsAbe/n0g9"],[5,321.42,250.8]],[64,"+40",180,180,180,false,false,-7,[1,"f0sY8IF8lKJYVRiEAuSbZL"],0,1],[25,12,-8,[1,"2euONrhzxFNZ0awA8Sw9h+"],[4,4289331255]],[62,false,1,-9,[1,"03EgIPGL9KpL7mTwMiV8xQ"],[0,3,-3]],[63,false,1,-10,[1,"e4qafiyjlAx4JQjDgDTNqG"],[0,3,-3]],[129,-11,[1,"a74+/BGpVBloIgLXRPony7"]]],[2,"6be3eQ4khPZrG1cMsKvXUk",1,0]],[28,"text_score_2",33554432,1,[[6,-12,[1,"e6bro5XPdHbZ3F4SMTYu6X"],[5,321.42,250.8]],[64,"+40",180,180,180,false,false,-13,[1,"a85q7cJpJMVLaCdvnmmQUG"],2,3],[25,12,-14,[1,"75kQqfu5hFkqvddGrtLONR"],[4,4278264490]],[62,false,1,-15,[1,"d0OhhePPZIuKsIt+rqZsmC"],[0,3,-3]],[63,false,1,-16,[1,"14QwCllWpKUKibhJtd4czw"],[0,3,-3]],[129,-17,[1,"2069hwrENBjpAxHTCwPlJI"]]],[2,"64gTAbRgFAr7Sj8bK1U5xJ",1,0]],[28,"text_score_1",33554432,1,[[6,-18,[1,"1fWGqlYq1OFZSm7SlqW5Pr"],[5,321.42,250.8]],[64,"+40",180,180,180,false,false,-19,[1,"82M/xrc8tBv699ujYIJkiu"],4,5],[25,12,-20,[1,"09M9q/9u1NRp5nIv4zHOV2"],[4,4278220969]],[62,false,1,-21,[1,"3cwH6qAGhEMKknmVWk7IAN"],[0,3,-3]],[63,false,1,-22,[1,"bbcJrM5YFESI7AP3fVMjVp"],[0,3,-3]],[129,-23,[1,"9eCopi9g1AOLmT/32r//t8"]]],[2,"1fcnBji2dG0Ig8KrM363LM",1,0]]],0,[0,3,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,0,4,0,0,4,0,0,4,0,0,4,0,6,1,23],[0,0,0,0,0,0],[7,5,7,5,7,5],[92,0,93,0,94,0]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["1avdlCymdGb5MxJCb9TYgR"]}],[1],0,[],[],[]],[[[313,"builtin-standard",[{"hash":4079105024,"name":"builtin-standard|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":7,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":15,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":["HAS_SECOND_UV"]},{"name":"v_shadowBias","type":14,"count":1,"stageFlags":17,"location":7,"defines":["CC_RECEIVE_SHADOW"]},{"name":"v_tangent","type":16,"count":1,"stageFlags":17,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":9,"defines":["CC_USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 14) in vec4 a_color;\n  layout(location = 2) out lowp vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out mediump vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 6) out mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  layout(location = 7) out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 8) out mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  layout(location = 15) in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec3 v_luv;\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 6) in mediump vec2 v_uv1;\n#endif\nlayout(location = 4) in mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  layout(location = 7) in mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 2) in lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 8) in mediump vec4 v_tangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(set = 1, binding = 7) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(set = 1, binding = 8) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(set = 1, binding = 9) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out lowp vec4 v_color;\n#endif\nout vec3 v_position;\nout mediump vec3 v_normal;\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  out mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nin vec3 v_position;\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in mediump vec2 v_uv1;\n#endif\nin mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying mediump vec3 v_normal;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\nvarying mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":223,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":75}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_TWOSIDE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":[],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":3928335406,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":["HAS_SECOND_UV"]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 1) out vec2 v_uv1;\n#endif\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 1) in vec2 v_uv1;\n#endif\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out vec2 v_uv1;\n#endif\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in vec2 v_uv1;\n#endif\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":184,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":75}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"specularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrength":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"specularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrength":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[91,5]],[[[19,"MysteryBoxRV"],[108,"MysteryBoxRV",[-6,-7,-8],[[100,-2,[1,"34tJQDsH1PsKDMlFF3r3zB"],[6],7],[35,2,-3,[1,"67KdewkNtMbaaU5Q0bawu8"]],[77,0.65,-4,[1,"7cnhTYP3ZE378LuawJ9t2w"]],[55,-5,[1,"166ak6c2ZFbY/eJPgeQdkC"]]],[2,"1csv1gTjZJz4/u83VF4GNf",-1,0]],[146,"MysteryBoxRVHalf1",false,1,[[15,-9,[1,"032KPTpGRJxbl8t92ZYVdp"],[2],[16],3],[35,8,-10,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"4fyaTfoo5EA4UFpxo1sI4C",1,0]],[146,"MysteryBoxRVHalf2",false,1,[[15,-11,[1,"13aG37XAZGk6g1KW6XPB1J"],[4],[16],5],[35,8,-12,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"98sICWbkBMKI1weyq+bCbL",1,0]],[92,"MysteryBoxRVWhole",1,[[15,-13,[1,"e94xQ/1DxN6KFR3WAIEhKV"],[0],[16],1]],[2,"a6UeRz5sRAW6p+SKzr41XN",1,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,4,0,-2,2,0,-3,3,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,6,1,13],[0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,14],[65,191,65,192,65,193,95,95]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["20V5Yrk+JIWoKH7u/I6cE2"]}],[1],0,[],[],[]],[[{"name":"dragonfruit","rect":{"x":0,"y":0,"width":106,"height":88},"offset":{"x":0,"y":0},"originalSize":{"width":106,"height":88},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[194]],[[[22,".bin",4121909559,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":26688,"length":3960,"count":1980,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":26688,"count":417,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.39462825655937195,-0.41459226608276367,-0.3946281969547272],"maxPosition",8,[1,0.39462825655937195,0.7459818720817566,0.39462825655937195]]],-1],0,0,[],[],[]],[[[19,"PomegranateRay2D"],[192,"PomegranateRay2D",33554432,[[6,-2,[1,"1dQHBIs3pLor8TtCCEBUfY"],[5,449,451]],[18,-3,[1,"27THctbShBIbwQAiT758tF"],0]],[2,"6cA12rba1MMJcOGhmksVNU",-1,0]]],0,[0,3,1,0,0,1,0,0,1,0,6,1,3],[0],[2],[66]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["22lAcHw/RAi4PdxyOL8DSd"]}],[1],0,[],[],[]],[[[19,"text_deflect"],[68,"text_deflect",8192,[-5,-6,-7],[[34,-2,[1,"a5xVGwKp9IoLiQS9agmnjj"]],[98,-3,[1,"bb9ct11A9L+aI90cIKAMgS"],[6,7]],[315,-4,[1,"f7U4bKGcFFE58yLbou3YF3"]]],[2,"f1G9mQ4CBNCqhjeN9IUUCU",-1,0]],[20,"text_top",8192,1,[[21,-8,[1,"84A43L8KlNhIVOxL6z2Wyh"],[5,297.37,104.2],[0,0.5,0]],[175,"DEFLECT!",2,70,70,70,false,-9,[1,"fa5H+LWRlKyo4rqBFLUzFT"],0,1],[25,8,-10,[1,"f1tirVxsVJj64JB3bDdVM1"],[4,4284163584]]],[2,"37WdJCaKZA4rZPvjKWqFUM",1,0],[1,0,-5,0]],[20,"text_none_left",8192,1,[[21,-11,[1,"40l6KQCQFOsql7UoQzhZLA"],[5,259.55,104.2],[0,0.5,1]],[175,"NONE LEFT!",0,50,50,70,false,-12,[1,"a2KSyulwlE15potb6lWRDH"],2,3],[25,8,-13,[1,"b8JlwdEO5PV76EVyc0r0nF"],[4,4278190153]]],[2,"7evV7G2mNLaJ2/IRZ/q9vA",1,0],[1,0,5,0]],[193,"text_left",false,8192,1,[[21,-14,[1,"36o0tDe5dLL7tfTGIWniOU"],[5,170.49,104.2],[0,0.5,1]],[175,"1 LEFT!",0,50,50,70,false,-15,[1,"80YCvJGdtAwrAWT+fIS8W2"],4,5],[25,8,-16,[1,"11+kEXDSVOV6ygbu+owNiX"],[4,4283976514]]],[2,"1a7McWisdKlZcU1/7mCs7a",1,0],[1,0,5,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,0,4,0,6,1,16],[0,0,0,0,0,0,0,0],[7,5,7,5,7,5,-1,-2],[195,0,196,0,197,0,198,199]],[[[19,"Banana"],[108,"Banana",[-6,-7,-8,-9],[[84,-2,[1,"01XpxQfytbzJPCnkIzSHCA"]],[35,2,-3,[1,"67KdewkNtMbaaU5Q0bawu8"]],[77,0.65,-4,[1,"7cnhTYP3ZE378LuawJ9t2w"]],[55,-5,[1,"166ak6c2ZFbY/eJPgeQdkC"]]],[2,"d5nv8PHZlY85D9IYNpJMmk",-1,0]],[52,"BananaHalf1",false,1,[[15,-10,[1,"d9GphC6PxReL6J4Bdu2AjK"],[2],[16],3],[35,8,-11,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"75gBKcgAxb2LlpjUSSRmas",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[52,"BananaHalf2",false,1,[[15,-12,[1,"41Hq3q/3xYM7wnCBVxHbxY"],[4],[16],5],[35,8,-13,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"fd+lUzeetT6bjA0nMX2xY2",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[81,"BananaWhole",1,[[15,-14,[1,"58OSNak+1Zb7PFTJChJsMa"],[0],[16],1]],[2,"aerWqcaqNWAa7OPV5/uHRd",1,0],[3,-0.7071067811865395,1.0677015365820712e-7,1.0677015365820712e-7,0.7071067811865395],[1,-90.00000000000001,0.0000173028440550754,0]],[52,"BananaOutline",false,1,[[15,-15,[1,"d0Vv4u/fpb6okqbbRNfZcd"],[6],[16],7]],[2,"acnQLNzA5b6ouGuSJIp+T9",1,0],[3,-0.7071067811865395,1.0677015365820712e-7,1.0677015365820712e-7,0.7071067811865395],[1,-90.00000000000001,0.0000173028440550754,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,4,0,-2,2,0,-3,3,0,-4,5,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,5,0,6,1,15],[0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,4],[1,200,1,201,1,202,203,204]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["233w9QjJlBPaRwBd+ywHKf"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["24HHra0LRM5ZJiFhbtPi0b"]}],[1],0,[],[],[]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"alphaThreshold":11},"mainColor",8,[4,4280248575],"secondColor",8,[4,4290958847],"thirdColor",8,[4,4282078960],"fourthColor",8,[4,4281693950]]],11]]],0,0,[0],[8],[3]],[[[19,"particle_juiceWatermelon"],[73,"particle_juiceWatermelon",[-3],[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[72,"particle_juiceSmall",1,[-4],[2,"1eGkpbHVRA7YQtVRbaS87n",1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"17+MscORlKD6npLDx1rPQ0"],[[0,null],6,0],[8],[3,0.42],[0],[0],[3,8.4],[0],[0],[0],[0],[3,0.495],[3,0.3],[0],[0],[[60,0.01,[3,42]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[70,true,1,2,0.0001,2.738,0.20671679660620837,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[0],[0],[0]],[39,true,0,[11,3,-11.7,11.7],[11,3,-3.45,3.45],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[2,null],6,0],[8],[3,1.14],[0],[0],[11,3,3.6,6.4],[0],[0],[0],[0],[3,0.77],[58,1,2.4,[5,[0,1],[[37,1,1,1,1],[45,1,1,1,1,1]]]],[0],[0],[[60,0.01,[3,15]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[152,true,1,2,0.0001,2.738,0.20671679660620837,[0],[1,0,0,55]],[29,true,[32,1,[5,[0,0.14102564102564102,1],[[13,2,1,0.04860266743843023,1],[47,2,0.9629629629629629,-0.6339319845464617,-0.6339319845464617],[37,-1.1210613598673298,1,-1.1210613598673298,1]]]],[0],[0],[0]],[39,true,0,[11,3,-10.2,10.2],[43,3],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[22,21,22,21]],[[[19,"particle_juiceFreeze"],[73,"particle_juiceFreeze",[-3],[-2],[2,"26m5iuFiBH0IDxLTSmfkwE",-1,0]],[72,"particle_juiceSmall",1,[-4],[2,"84soY8lCdDP51aCv15FOUm",1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"7cCo6ncQhAk6p/xX35g7Zz"],[[0,null],6,0],[8],[3,0.4],[0],[0],[3,2.1],[0],[0],[71,3,6.283185307179586],[0],[3,1.2],[3,0.4],[0],[0],[[60,0.01,[3,16]]],[54,true,[82,3,[57,[[42,[4,33554312]],[12,1,[4,33554431]]]],[57,[[42,[4,33549236]],[12,1,[4,33554431]]]]]],[70,true,1,2,0.0001,2.738,0.20671679660620837,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[0],[0],[0]],[39,true,0,[11,3,-8,8],[11,3,-3.15,3.15],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[11,3,0.7853981633974483,1.5707963267948966]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"2ciXM6+NlLOIY3M3GEvlxG"],[[2,null],6,0],[8],[3,1.8],[0],[0],[11,3,4.2,8],[0],[0],[0],[0],[3,1.36],[58,1,2.4,[5,[0,1],[[37,1,1,1,1],[45,1,1,1,1,1]]]],[0],[0],[[60,0.01,[3,14]]],[54,true,[33,1,[36,[[61,0.004464285714285714],[12,1,[4,4294958973]]],[[14,255,0.002232142857142857],[14,255,0.9933035714285714]]]]],[83,true,1,2,0.0001,2.738,1.2217304763960306,0.20671679660620837,[0],[1,0,0,43.3]],[29,true,[32,1,[5,[0,0.14102564102564102,1],[[13,2,1,0.04860266743843023,1],[47,2,0.9629629629629629,-0.6339319845464617,-0.6339319845464617],[37,-1.1210613598673298,1,-1.1210613598673298,1]]]],[0],[0],[0]],[39,true,0,[11,3,-5,5],[11,3,-2,-1.5],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[11,3,0.7853981633974483,1.5707963267948966]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[96,63,9,10]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["27+ZY1ml1BEp/RhRqygJyt"]}],[1],0,[],[],[]],[[{"name":"splat11","rect":{"x":28,"y":36,"width":219,"height":189},"offset":{"x":9.5,"y":-2.5},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[205]],[[[19,"container_tutorialDeflect"],[68,"container_tutorialDeflect",33554432,[-6],[[34,-2,[1,"a4xS89VvdM7agUmd9Vjp2U"]],[222,45,590,590,334,334,100,100,-3,[1,"32AOd+lxtNIa/Heg7uKCic"]],[98,-4,[1,"6b8znE325MCKsNlpcCsaDC"],[14,15,16]],[334,-5,[1,"9chr+QN+JOa6x6Rzb5Cb+p"]]],[2,"ddJyCrY05H0K1oeapDh2tu",-1,0]],[79,"OfferClaim",false,33554432,1,[-9,-10,-11,-12,-13,-14,-15,-16],[[34,-7,[1,"d2+JKpGABMdYQBZQdyE2LI"]],[316,45,100,100,-8,[1,"03jccYHi1NzromP5z544Jh"],1]],[2,"c70Q6lyPFKnaG5iZAm//TX",1,0]],[67,"ButtonClaim",33554432,2,[-20],[[6,-17,[1,"4c9xq+/ahFcrfqnXuDvU6T"],[5,296,105]],[18,-18,[1,"acP6DSe+pCOqzj5zqKdRn4"],6],[80,3,0.9,-19,[1,"4eXU769QJI+osKRPpffTU6"],[[95,"99544WoHgdBwri9fjCkjOnB","btnClaimRewardClicked",1]],7]],[2,"5fSMuts/FM+pMh+oWWTX4u",1,0],[1,0,-270.478,0],[1,0.95,0.95,1]],[28,"BG",33554432,2,[[6,-21,[1,"c6HiCszn9OWr0Poh88OUn2"],[5,1320,800]],[59,0,-22,[1,"b0A4SFwN9Lw6n9KpEPJBTd"],[4,2097152000],0],[144,45,-610,-610,-350,-350,1320,800,-23,[1,"1eVTBC2JpP5rkQu0QIexVB"],2]],[2,"5eQMYfMyVB/bzdHFt1oWvk",1,0]],[30,"text_Free",33554432,3,[[6,-24,[1,"a84p6b0+xLEKTyaZiStd1E"],[5,250,50]],[176,"Claim Reward",40,0,2,false,false,-25,[1,"f4lhsOt99E5IWsbLw06pwn"],4,5],[140,0,-26,[1,"c5AIOgBj9AXoaLqAGkLPjr"],[4,2097207039],[0,1,-2]]],[2,"eazJDk7Q5OM6B/Mbd5q5MX",1,0],[1,0,7.62,0],[1,1.1111111111111112,1.1111111111111112,1]],[20,"text_tutDeflect1",33554432,2,[[6,-27,[1,"23GlljrTxFzbUbU7zMYDg/"],[5,900,100]],[74,"Oopps.. You've slice the bomb, but...",35,35,0,2,false,false,-28,[1,"8e7Ms3nBBGVJmKYWGgu55q"],8,9],[25,4,-29,[1,"bcRXXKf7tF4KBiX4ZWWChU"],[4,4282729797]]],[2,"7emXycjVlDrbNkRdhYJSXs",1,0],[1,0,300.755,0]],[20,"text_tutDeflect2",33554432,2,[[6,-30,[1,"b15Gcd5xpAMqumibZl5L0t"],[5,500,100]],[74,"CONGRATS!",45,45,0,2,false,false,-31,[1,"dcXNebdhxF57yTEt2Hvdzx"],10,11],[25,4,-32,[1,"56SEvPM45Goq/vGmHJFOOS"],[4,4282729797]]],[2,"4f4fHdtlZGE6sZr7N8osj1",1,0],[1,0,245.023,0]],[20,"text_tutDeflect3",33554432,2,[[6,-33,[1,"cdJyJ38B5Eu7u4DSM3H9Kj"],[5,1200,100]],[74,"YOU GOT 3 BOMB DEFLECTS!",55,55,0,2,false,false,-34,[1,"33BfyKWVZA1Ib3ipRC2Lfd"],12,13],[25,4,-35,[1,"6fS6buWs9AH4+gQE+VOHoS"],[4,4282729797]]],[2,"e8qWb0hApA0615lWvkUC2A",1,0],[1,0,179.561,0]],[109,"Rays-001",33554432,2,[[6,-36,[1,"f5ZlAWyuRAiJckbtEgSofi"],[5,449,451]],[118,-37,[1,"a0/UzcH7tKHaccm2JfVoew"],[4,2104491004],1]],[2,"91kIvrAzVCOZahihq2262r",1,0],[1,0,-57.079,0],[3,0,0,-0.3636902392712371,0.9315199460338089],[1,0,0,-42.654]],[20,"Rays",33554432,2,[[6,-38,[1,"25g1VExqtKBJzFbPzrm3Yl"],[5,449,451]],[118,-39,[1,"e8SFnH9CxIo7nOvMneU1TA"],[4,4285529084],2]],[2,"92xefL5MtBGZX7KaVd2ZC4",1,0],[1,0,-57.079,0]],[20,"IconHudPowerupBombDeflect",33554432,2,[[6,-40,[1,"a1i4t11WtE5ptbtD9ycC6y"],[5,210,229]],[18,-41,[1,"6607z5WlxM0o4hQi5XdI12"],3]],[2,"9ay3hE7SZCcZlaFMXAqpbM",1,0],[1,0,-29.711,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,-1,4,0,-2,9,0,-3,10,0,-4,11,0,-5,3,0,-6,6,0,-7,7,0,-8,8,0,0,3,0,0,3,0,0,3,0,-1,5,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,6,1,41],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,2,2,7,5,2,15,7,5,7,5,7,5,-1,-2,-3],[2,66,66,18,44,0,23,23,8,0,8,0,8,0,206,207,208]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[41,5]],[[[19,"particle_bananaDoubleTrail"],[73,"particle_bananaDoubleTrail",[-3],[-2],[2,"3dw3L9LExMhYl5K7SezCro",-1,0]],[127,"star",65536,1,[-4],[2,"9d1v3uEi1FCopqhwu/hUNZ",1,0]],[89,1,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"f3MnPFRTFCHaWCe/FxP92F"],[[0,null],6,0],[8],[3,0.7],[0],[0],[3,1],[0],[0],[71,3,6.283185307179586],[0],[3,1.1],[86,2.4],[3,15],[0],[54,true,[82,3,[57,[[42,[4,4294917120]]]],[57,[[42,[4,4294932482]]]]]],[130,true,3,0.001,2.738,0.20671679660620837,[0]],[29,true,[58,1,1.5,[5,[0.04358974358974359,1],[[13,2,1,1,1],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[40,2,[5,[0.002564102564102564,1],[[9,2,-0.16296296296296298],[9,2,-1]]],[5,[0,1],[[9,2,0.08148148148148149],[9,2,1]]]],[50,2,1.4,[5,[0,1],[[9,2,-0.9333333333333333],[9,2,-0.8888888888888888]]],[5,[0,1],[[9,2,0.8296296296296296],[9,2,0.8666666666666667]]]],[40,2,[5,[0,1],[[9,2,-0.1037037037037037],[9,2,-0.31851851851851853]]],[5,[0,1],[[9,2,0.07407407407407407],[9,2,0.3037037037037037]]]],[3,1]],[26,[32,1,[5,[0,1],[[9,2,1],[9,2,1]]]],[58,1,16,[5,[0,0.9897435897435898],[[47,2,-0.014814814814814815,-2.605664488017429,-2.605664488017429],[9,2,-1]]]],[32,1,[5,[0,1],[[9,2,1],[9,2,1]]]]],[23,[0],[0],[0],[0]],[90,true,[0],[0],[11,3,-3.490658503988659,3.490658503988659]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[89,0.1,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"eaKL/V/klKHrwpm0Dj1LyA"],[[2,null],6,0],[8],[11,3,1.8,2.2],[0],[0],[3,0.6],[0],[0],[0],[0],[3,0.6],[86,2.4],[3,13],[0],[54,true,[82,3,[57,[[93],[12,1,[4,4287868928]]]],[57,[[42,[4,4284869877]],[12,0.5,[4,4294953348]],[12,1,[4,4291548478]]]]]],[70,true,1,2,0.4,2.738,0.20671679660620837,[0]],[29,true,[40,2,[5,[0,0.8974358974358975],[[13,2,0.8888888888888888,1,1],[44,2,1,1]]],[5,[0,1],[[13,2,0.9629629629629629,1,1],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[40,2,[5,[0,1],[[9,2,-1],[106,2]]],[5,[0,1],[[13,2,1,1,1],[44,2,1,1]]]],[40,2,[5,[0,1],[[13,2,-1,1,1],[13,2,-0.9407407407407408,1,1]]],[5,[0,1],[[13,2,1,1,1],[13,2,0.8888888888888888,1,1]]]],[40,2,[5,[0,1],[[13,2,-0.05925925925925926,1,1],[13,2,-0.362962962962963,1,1]]],[5,[0,1],[[13,2,0.05185185185185185,1,1],[13,2,0.37777777777777777,1,1]]]],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[9,10,67,68]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[97,5]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4282022398],"secondColor",8,[4,4286163455],"thirdColor",8,[4,4278201043],"fourthColor",8,[4,4278201043]]],11]]],0,0,[0],[8],[3]],[[[19,"particle_juiceApple"],[105,"particle_juiceApple",[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[0,null],6,0],[8],[3,0.48],[0],[0],[3,7.05],[0],[0],[0],[0],[3,0.55],[3,0.3],[0],[0],[[60,0.01,[3,45]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[70,true,1,2,0.0001,2.738,0.20671679660620837,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[0],[0],[0]],[39,true,0,[11,3,-7.5,7.5],[11,3,-3.45,3.45],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-3],[31,1,1]]],0,[0,3,1,0,-1,2,0,9,2,0,6,1,3],[0,0],[-1,10],[34,24]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["2faMoOcQtHIqphCIBmqQi8"]}],[1],0,[],[],[]],[[{"name":"SliceDiamondNeutral","rect":{"x":3,"y":8,"width":26,"height":114},"offset":{"x":0,"y":-1},"originalSize":{"width":32,"height":128},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[209]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["2f8eNlizBMzp0fy0gk2ok7"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["31y9ytLHROmqGDwBCLgKAD"]}],[1],0,[],[],[]],[[{"name":"IconTimer","rect":{"x":2,"y":1,"width":62,"height":72},"offset":{"x":0,"y":-0.5},"originalSize":{"width":66,"height":73},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[210]],[[[22,".bin",687240309,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":26368,"length":3744,"count":1872,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":26368,"count":412,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.38786831498146057,-0.39685651659965515,-0.05536432936787605],"maxPosition",8,[1,0.5252382755279541,0.39685648679733276,0.3963702321052551]]],-1],0,0,[],[],[]],[[[22,".bin",1829818047,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":32640,"length":5736,"count":2868,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":32640,"count":510,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4195376932621002,-0.44084906578063965,-0.44133520126342773],"maxPosition",8,[1,0.5642512440681458,0.44084906578063965,0.4403627812862396]]],-1],0,0,[],[],[]],[[[22,".bin",3492208302,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":32640,"length":5736,"count":2868,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":32640,"count":510,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.38786831498146057,-0.39685651659965515,-0.3973426818847656],"maxPosition",8,[1,0.5252382755279541,0.39685648679733276,0.3963702321052551]]],-1],0,0,[],[],[]],[[[102,"outinesMort",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_VERTEX_COLOR":true}],[[[{"metallic":0.400000005960464,"roughness":0.806901276111603},"albedoScale",8,[1,1,1,1],"emissiveScale",8,[2,1,1,1,1]]],11]]],0,0,[0],[8],[13]],[[[22,".bin",263124628,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":23552,"length":3336,"count":1668,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":23552,"count":368,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.38216632604599,-0.39685651659965515,-0.3973426818847656],"maxPosition",8,[1,0.3224540650844574,0.39685648679733276,-0.0004861456691287458]]],-1],0,0,[],[],[]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"alphaThreshold":11},"mainColor",8,[4,4278245119],"secondColor",8,[4,4289131519],"thirdColor",8,[4,4281644524],"fourthColor",8,[4,4281644524]]],11]]],0,0,[0],[8],[3]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["32+i2k9OpHxqoiFaYi592V"]}],[1],0,[],[],[]],[[{"name":"levelUpRays","rect":{"x":29,"y":26,"width":459,"height":462},"offset":{"x":2.5,"y":-1},"originalSize":{"width":512,"height":512},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[211]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["33Gv7BehpNv4K3FSFmhWcm"]}],[1],0,[],[],[]],[[[19,"BlitzText04"],[68,"BlitzText04",8192,[-5,-6],[[34,-2,[1,"9cbm062a5HtZN5n2jXpeS6"]],[100,-3,[1,"e7pBN9aXtHVLlBE/minwsE"],[6],7],[128,0,-4,[1,"8eI3fTzxtMz487NXiAfV+r"]]],[2,"b330N1rGJAurGuJwVync3O",-1,0]],[49,"top_textOutline",8192,1,[-12],[[6,-7,[1,"7fJv6dPXdLyLyPPVq/wbOW"],[5,231.42,64.7]],[103,"Super blitz!",45,45,45,false,false,-8,[1,"94mZp3jCxGdoZJ1mOApQcQ"],[4,4278233595],2],[25,4,-9,[1,"b2sJ6vP7hJp6sau3Q722MH"],[4,4278233595]],[62,false,1,-10,[1,"26e3l3kitGk5fUbQ9UbNkQ"],[0,3,-3]],[63,false,1,-11,[1,"dbzNeqaCRLobsI1RoDd6Q3"],[0,3,-3]]],[2,"f2K3UCVQ9MELtKuWnOAsy2",1,0],[1,0,30,0]],[49,"bot_textOutline",8192,1,[-18],[[6,-13,[1,"56//FF4hhOoaZvcuazO+5X"],[5,82.36,64.7]],[103,"+20",45,45,45,false,false,-14,[1,"60wm115o9LK7onvmiroJHt"],[4,4278233595],5],[25,4,-15,[1,"4fD63oY79LnbIJ1BlhyiZk"],[4,4278233595]],[62,false,1,-16,[1,"92A0UhiDBCQ7tcvRjhCZ3l"],[0,3,-3]],[63,false,1,-17,[1,"78aHrJ/GZGi6Bn5U3Nv30J"],[0,3,-3]]],[2,"9dpGuTdgBEP6LJprGLhrZ0",1,0],[1,0,-30,0]],[28,"top_text",8192,2,[[6,-19,[1,"b1mzevMARF7Kcm8noV/wDk"],[5,223.42,56.7]],[64,"Super blitz!",45,45,45,false,false,-20,[1,"94mZp3jCxGdoZJ1mOApQcQ"],0,1]],[2,"72014aGa5JKosXpIynNW0h",1,0]],[28,"bot_text",8192,3,[[6,-21,[1,"8fpKgxHFBGoZqMSUOs/4GN"],[5,74.36,56.7]],[64,"+20",45,45,45,false,false,-22,[1,"94mZp3jCxGdoZJ1mOApQcQ"],3,4]],[2,"fbNj6UVS1EDJ5567pa4wl8",1,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,4,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,-1,5,0,0,4,0,0,4,0,0,5,0,0,5,0,6,1,22],[0,0,0,0,0,0,0,0],[7,5,5,7,5,5,-1,14],[98,0,0,98,0,0,11,11]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[25,5]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["36BOse3yBMAZcj6QT4T1EE"]}],[1],0,[],[],[]],[[{"name":"FruitSplashSpriteFrame","rect":{"x":4,"y":27,"width":250,"height":77},"offset":{"x":1,"y":-1.5},"originalSize":{"width":256,"height":128},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[212]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["36Jf8ApyxLHrUVNNDJ4MUF"]}],[1],0,[],[],[]],[[{"name":"LogoFruitNew","rect":{"x":0,"y":6,"width":512,"height":245},"offset":{"x":0,"y":-0.5},"originalSize":{"width":512,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[213]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["36+N5eMVBGUaW8QXh+vmC8"]}],[1],0,[],[],[]],[[{"name":"lemon","rect":{"x":0,"y":0,"width":90,"height":87},"offset":{"x":-1,"y":0},"originalSize":{"width":92,"height":87},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[214]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["37HYgk9kRCSaNhkzr36GcH"]}],[1],0,[],[],[]],[[[19,"Kiwifruit"],[91,"Kiwifruit",[-6,-7,-8,-9],[[84,-2,[1,"4f5JBzM4xHlYbCFUgxz2IK"]],[35,2,-3,[1,"899592F21MrZwEuaA6/vow"]],[77,0.5,-4,[1,"8eKrvdxrBLIomIgNp5YpyQ"]],[55,-5,[1,"f1KAXEXatOiqbCa/Qewiwd"]]],[2,"2cCBZ55QFAColRxw5hPxhz",-1,0],[1,-1.857,0,0]],[52,"KiwifruitHalf1",false,1,[[15,-10,[1,"feMcrl01NGd4EFkjjVMgJX"],[0],[16],1],[35,8,-11,[1,"48VfwruGFCkaWbL8eoywS6"]]],[2,"64eTUzXDNFuZ6jurH2xX+3",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[52,"KiwifruitHalf2",false,1,[[15,-12,[1,"996dgtOVhGdq+FWsTA6//l"],[2],[16],3],[35,8,-13,[1,"dbtwYwOsRAeoW9k3VoSeye"]]],[2,"04Y94tB29M9ow1do9NJQ9N",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[81,"KiwifruitWhole",1,[[15,-14,[1,"55N+TFG0FKa5eewu3/RyOg"],[4],[16],5]],[2,"b7okcwXS5AtqVUmkQj6dh8",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[52,"KiwifruitOutline",false,1,[[15,-15,[1,"f8Qjv3WbhIyqLIHATgiLlz"],[6],[16],7]],[2,"1eJQkvAqxBCKCb3iA8GU7y",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,5,0,6,1,15],[0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,4],[1,215,1,216,1,217,218,219]],[[[46,[{"rasterizerState":{"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[220,7]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"alphaThreshold":11},"mainColor",8,[4,4278245119],"secondColor",8,[4,4289131519],"thirdColor",8,[4,4281644524],"fourthColor",8,[4,4281644524]]],11]]],0,0,[0],[8],[3]],[[[22,".bin",3413559861,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":288,"length":12,"count":6,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":288,"count":6,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3999999761581421,-0.0020000000949949026,-2.5],"maxPosition",8,[1,0.3999999761581421,0,0]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["3dy6tmwUxJAroFKzBxG0dG"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["3dzsdCFSBM5r6nf+aYg4mW"]}],[1],0,[],[],[]],[[{"name":"FN_splash_loading","rect":{"x":0,"y":0,"width":2554,"height":945},"offset":{"x":0,"y":0},"originalSize":{"width":2554,"height":945},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[221]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["3d/sTwv0dCgbrunu3S1Czy"]}],[1],0,[],[],[]],[[{"name":"Badge","rect":{"x":13,"y":2,"width":325,"height":351},"offset":{"x":0.5,"y":12.5},"originalSize":{"width":350,"height":380},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[222]],[[[19,"particle_berryBlast"],[73,"particle_berryBlast",[-3,-4],[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[251,"particle_juiceStrawberry",1,[-6],[-5],[2,"b6WdSNjThPAamwGrtcd54f",1,0]],[72,"particle_wave",1,[-7],[2,"1eGkpbHVRA7YQtVRbaS87n",1,0]],[283,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,3,[1,"17+MscORlKD6npLDx1rPQ0"],[[0,null],6,0],[8],[3,12],[0],[0],[0],[0],[0],[0],[3,0.1],[3,0.42],[3,0.3],[0],[0],[[60,0.01,[3,1]]],[54,true,[33,1,[36,[[61,0.004464285714285714],[61,1]],[[14,255,0.002232142857142857],[14,0,0.9933035714285714]]]]],[70,true,1,2,0.0001,2.738,0.20671679660620837,[0]],[29,true,[32,1,[5,[0,0.9974358974358974],[[48,2,0.26666666666666666,1.4869281045751637,1,1.4869281045751637,1],[13,2,1,1,1]]]],[0],[0],[0]],[113,0,[11,3,-11.7,11.7],[11,3,-3.45,3.45],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-8],[31,1,1]],[72,"particle_juiceSmall",2,[-9],[2,"e6oOFTYMlMZrlZ8z2tTM5i",1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,5,[1,"a9JJZmKdJI1ZmqQmdKniOo"],[[2,null],6,0],[8],[3,0.6],[0],[0],[3,4],[0],[0],[0],[3,0.4],[3,1.3],[3,0.3],[0],[0],[[60,0.01,[3,42]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[70,true,1,2,0.0001,2.738,0.20671679660620837,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[0],[0],[0]],[39,true,0,[11,3,-0.5,0.5],[11,3,-0.5,0.5],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-10],[31,1,3]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"e96sr8xXhC3qG91ZIJ9KEd"],[[4,null],6,0],[8],[3,1.14],[0],[0],[11,3,3.6,6.4],[0],[0],[0],[3,0.4],[3,0.9],[58,1,2.4,[5,[0,1],[[37,1,1,1,1],[45,1,1,1,1,1]]]],[0],[0],[[60,0.01,[3,15]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[152,true,1,2,0.0001,2.738,0.20671679660620837,[0],[1,0,0,55]],[29,true,[32,1,[5,[0,0.14102564102564102,1],[[13,2,1,0.04860266743843023,1],[47,2,0.9629629629629629,-0.6339319845464617,-0.6339319845464617],[37,-1.1210613598673298,1,-1.1210613598673298,1]]]],[0],[0],[0]],[39,true,0,[11,3,-2,2],[11,3,-2,2],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-11],[31,1,5]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[6,null],6,0],[8],[11,3,0.7,1.3],[0],[0],[3,1],[0],[0],[0],[0],[3,1.1],[86,2.4],[0],[0],[[60,0.01,[3,23]]],[54,true,[82,3,[36,[[42,[4,4292202233]],[12,0.56,[4,4289833727]],[12,1,[4,4282864381]]],[[76,255],[14,255,1]]],[36,[[42,[4,4292202233]],[12,0.47,[4,4286804991]],[12,1,[4,4286457855]]],[[76,255],[14,255,1]]]]],[152,true,1,2,0.0001,2.738,0.20671679660620837,[0],[1,0,0,55]],[29,true,[40,2,[5,[0,0.8974358974358975],[[13,2,0.8888888888888888,1,1],[44,2,1,1]]],[5,[0,1],[[13,2,0.9629629629629629,1,1],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[11,3,-11,11],[11,3,-11,11],[43,3],[32,1,[5,[0,1],[[13,2,1,1,1],[154,2,-1.7687074829931972,1,-1.7687074829931972,1]]]]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-12],[31,1,7]]],0,[0,3,1,0,-1,8,0,-1,3,0,-2,2,0,-1,7,0,-1,5,0,-1,4,0,9,4,0,-1,6,0,9,6,0,9,7,0,9,8,0,6,1,12],[0,0,0,0,0,0,0,0],[-1,10,-1,10,-1,10,-1,10],[223,97,22,21,22,21,99,69]],[[[19,"PomegranateRay"],[237,"PomegranateRay",[-3,-4],[[98,-2,[1,"90qm1F4lREZbrbkeWjTvv/"],[4]]],[2,"09DzTuaxdRALSFXW3iU//w",-1,0],[1,2.504,0,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[92,"PomegranateRay",1,[[15,-5,[1,"09bl1mRi9MM76ePYHEHVlV"],[0],[16],1]],[2,"8374WCwgNPkJ+Rcmzy2Bj5",1,0]],[252,"particle",false,1,[-6],[2,"91UXW/V5RNk7zIg9IS1OxV",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[288,1,1,3,[1,"a7HwPZI/5Cu72eJdZ71Svf"],[2],[104,[4,1761607679]],[3,1],[0],[0],[0],[0],[0],[71,3,6.283185307179586],[0],[3,5],[0],[3,10],[0],[65,[8]],[213,0,[3,1]],[153,[0],[0],[0],[0]],[141,[0],[0],[0],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[90,true,[0],[0],[11,3,0.8726646259971648,1.3089969389957472]],[24,[32,1,[5,[0,1],[[9,2,1],[9,2,1]]]],[0]],[27,[3,1],[0],[8],[8],-7],[217,3]]],0,[0,3,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,-1,4,0,9,4,0,6,1,7],[0,0,0,0,0],[-1,4,-1,10,-1],[224,89,59,39,225]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["3fbi1YasBK/oqnwfNsPc9M"]}],[1],0,[],[],[]],[[{"name":"strawberry","rect":{"x":2,"y":0,"width":84,"height":80},"offset":{"x":1,"y":0.5},"originalSize":{"width":86,"height":81},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[226]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"alphaThreshold":11},"mainColor",8,[4,4294763979],"secondColor",8,[4,4293042809],"thirdColor",8,[4,4291187491],"fourthColor",8,[4,4291187491]]],11]]],0,0,[0],[8],[3]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[25,5]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4293024952],"secondColor",8,[4,4290648458],"thirdColor",8,[4,4284159279],"fourthColor",8,[4,4284159279]]],11]]],0,0,[0],[8],[3]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[227,7]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["45Wib7QlJJCJfXN82YtjM4"]}],[1],0,[],[],[]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4283914071],"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[100,5]],[[[19,"FruitCriticalText"],[68,"FruitCriticalText",8192,[-5,-6],[[34,-2,[1,"9cbm062a5HtZN5n2jXpeS6"]],[97,true,-3,[1,"f8p1uLb5JPSrIiVdAGWKE2"],[4],5],[335,-4,[1,"22PYij61RIGLl9hGTugpU6"]]],[2,"b330N1rGJAurGuJwVync3O",-1,0]],[30,"top_text",8192,1,[[6,-7,[1,"bdTt6bcDFK6bOK01olEM0W"],[5,384.09,104.2]],[64,"CRITICAL",90,90,70,false,false,-8,[1,"7dzxZEBjVNkocUIIXjqaaw"],0,1],[25,8,-9,[1,"2bRW0VautAP75COMRRNhVz"],[4,4283966988]],[62,false,1,-10,[1,"6151qDjWhMqKYVadNpOsBP"],[0,3,-3]],[63,false,1,-11,[1,"2dJx4tIIFFcZQ+qoARN4M5"],[0,3,-3]]],[2,"f5Pvvg3gpPNIUQdctRN6ND",1,0],[1,0,45,0],[1,0.65,0.65,0.65]],[30,"middle_text",8192,1,[[6,-12,[1,"7fJv6dPXdLyLyPPVq/wbOW"],[5,280.38,205]],[64,"+10",160,160,150,false,false,-13,[1,"94mZp3jCxGdoZJ1mOApQcQ"],2,3],[25,8,-14,[1,"b2sJ6vP7hJp6sau3Q722MH"],[4,4283966988]],[62,false,1,-15,[1,"26e3l3kitGk5fUbQ9UbNkQ"],[0,3,-3]],[63,false,1,-16,[1,"dbzNeqaCRLobsI1RoDd6Q3"],[0,3,-3]]],[2,"f2K3UCVQ9MELtKuWnOAsy2",1,0],[1,0,-29.923,0],[1,0.65,0.65,0.65]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,6,1,16],[0,0,0,0,0,0],[7,5,7,5,-1,14],[101,0,101,0,14,14]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["471bzaJOZLXJCWH+XgpAX4"]}],[1],0,[],[],[]],[[{"name":"peach","rect":{"x":2,"y":1,"width":91,"height":88},"offset":{"x":-0.5,"y":0},"originalSize":{"width":96,"height":90},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[228]],[[[22,".bin",1184684827,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10368,"length":1248,"count":624,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":10368,"count":162,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3924179673194885,-0.429849237203598,-0.4216691255569458],"maxPosition",8,[1,-1.4305114426349519e-8,4.9879179897516224e-8,2.6054017119131808e-17]]],-1],0,0,[],[],[]],[[[22,".bin",3025758705,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16000,"length":1740,"count":870,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":16000,"count":250,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,2.1818660655981148e-8,-5.0659380690376565e-8,-5.9604643443123e-10],"maxPosition",8,[1,0.5251678228378296,0.429849237203598,0.4216691255569458]]],-1],0,0,[],[],[]],[[[22,".bin",233053657,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7360,"length":720,"count":360,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":7360,"count":115,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.1383543610572815,-0.14344264566898346,-0.14581634104251862],"maxPosition",8,[1,0.12197615951299667,0.163847416639328,0.1135699525475502]]],-1],0,0,[],[],[]],[[[22,".bin",3127960651,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16000,"length":1740,"count":870,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":16000,"count":250,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,1.904037205679998e-10,-1.4305114426349519e-8,-0.4216691255569458],"maxPosition",8,[1,0.5251678228378296,0.429849237203598,5.9604643443123e-10]]],-1],0,0,[],[],[]],[[[22,".bin",2162725717,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10368,"length":1248,"count":624,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":10368,"count":162,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3924179673194885,-3.0121213856482143e-10,-2.98023217215615e-10],"maxPosition",8,[1,2.8610228852699038e-8,0.429849237203598,0.4216691255569458]]],-1],0,0,[],[],[]],[[[22,".bin",1478137601,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":37504,"length":6528,"count":3264,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":37504,"count":586,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.45879286527633667,-0.4216691255569458,-0.4216691255569458],"maxPosition",8,[1,0.45879286527633667,0.4216691255569458,0.4216691255569458]]],-1],0,0,[],[],[]],[[[22,".bin",2197236285,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16000,"length":1740,"count":870,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":16000,"count":250,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,1.904037205679998e-10,-0.429849237203598,-2.980233004823418e-10],"maxPosition",8,[1,0.5251678228378296,3.686348293285846e-8,0.4216691255569458]]],-1],0,0,[],[],[]],[[[22,".bin",1237187309,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10368,"length":1248,"count":624,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":10368,"count":162,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3924179673194885,-6.96252522303098e-9,-0.4216691255569458],"maxPosition",8,[1,9.53674295089968e-9,0.429849237203598,2.98023217215615e-10]]],-1],0,0,[],[],[]],[[[22,".bin",230238299,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10368,"length":1248,"count":624,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":10368,"count":162,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3924179673194885,-0.429849237203598,-2.6054017119131808e-17],"maxPosition",8,[1,9.53674295089968e-9,3.686348293285846e-8,0.4216691255569458]]],-1],0,0,[],[],[]],[[[22,".bin",3285521158,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":16000,"length":1740,"count":870,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":16000,"count":250,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-2.143785415853472e-8,-0.429849237203598,-0.4216691255569458],"maxPosition",8,[1,0.5251678228378296,3.686348293285846e-8,2.980233004823418e-10]]],-1],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["48lhe5vipFT77ByFjFZ7UG"]}],[1],0,[],[],[]],[[{"name":"BlackRibbon","rect":{"x":0,"y":0,"width":280,"height":182},"offset":{"x":-1,"y":9},"originalSize":{"width":282,"height":200},"rotated":false,"capInsets":[0,0,272,0],"packable":true}],[3],0,[0],[11],[229]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["49mEeWKrdOyLzUZmyNAHq5"]}],[1],0,[],[],[]],[[[19,"particle_frenzySideLeft"],[73,"particle_frenzySideLeft",[-3],[-2],[2,"d5bIs3FeJDzaGibidtUdcW",-1,0]],[72,"particle_frenzySideLeft-001",1,[-4],[2,"f6Kw0sdFRCMq0NUwdxlyi8",1,0]],[89,0.1,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"a9y0GPlepCNoTGcMRLA7Yr"],[[0,null],6,0],[33,1,[57,[[42,[4,4280629716]],[12,0.5044642857142857,[4,4281758975]],[12,1,[4,4281631999]]]]],[11,3,1,3],[0],[0],[11,3,7,9],[0],[0],[71,3,3.141592653589793],[0],[11,3,0.4,0.8],[179,3,1,2,2.4],[3,9],[0],[54,true,[82,3,[57,[[42,[4,4278202367]],[12,0.16294642857142855,[4,4278202367]],[12,1,[4,4283945983]]]],[57,[[42,[4,4278839039]],[12,1,[4,4283945983]]]]]],[83,true,1,2,3,2.738,1.3962634015954636,0.20671679660620837,[0],[1,0,0,-80]],[29,true,[40,2,[5,[0,0.882051282051282],[[47,2,0.7962962962962963,-0.11479028697571746,-0.11479028697571746],[47,2,0.003703703703703704,-1.743295019157089,-1.743295019157089]]],[5,[0,1],[[9,2,1],[155,2,-3.0858585858585847,-3.0858585858585847]]]],[0],[0],[0]],[113,0,[11,3,-5,5],[11,3,-2,-1.5],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[11,3,0.7853981633974483,1.5707963267948966]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[89,0.1,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"1eOmakoJFCXaaV5BBW0sDF"],[[2,null],6,0],[33,1,[57,[[42,[4,4281298409]],[12,0.5044642857142857,[4,4281782271]],[12,1,[4,4287291903]]]]],[11,3,1,3],[0],[0],[11,3,6,8],[0],[0],[71,3,3.141592653589793],[0],[11,3,0.4,0.8],[180,0.5,2.4],[3,9],[0],[54,true,[82,3,[57,[[42,[4,4278202367]],[12,0.16294642857142855,[4,4278202367]],[12,1,[4,4283945983]]]],[57,[[42,[4,4278839039]],[12,1,[4,4283945983]]]]]],[83,true,1,2,3,2.738,1.3962634015954636,0.20671679660620837,[0],[1,0,0,5]],[29,true,[40,2,[5,[0,0.882051282051282],[[47,2,0.7962962962962963,-0.11479028697571746,-0.11479028697571746],[47,2,0.003703703703703704,-1.743295019157089,-1.743295019157089]]],[5,[0,1],[[9,2,1],[155,2,-3.0858585858585847,-3.0858585858585847]]]],[0],[0],[0]],[113,0,[11,3,-5,5],[11,3,-2,-1.5],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[11,3,0.7853981633974483,1.5707963267948966]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[9,10,9,10]],[[[19,"BananaSP_frenzy"],[108,"BananaSP_frenzy",[-7,-8,-9,-10,-11],[[84,-3,[1,"01XpxQfytbzJPCnkIzSHCA"]],[35,2,-4,[1,"67KdewkNtMbaaU5Q0bawu8"]],[77,0.65,-5,[1,"7cnhTYP3ZE378LuawJ9t2w"]],[55,-6,[1,"166ak6c2ZFbY/eJPgeQdkC"]]],[205,"d5nv8PHZlY85D9IYNpJMmk",[],-2,0,[-1]]],[4,["3dw3L9LExMhYl5K7SezCro"]],[120,"BananaSP_frenzyHalf1",false,1,[-14],[[15,-12,[1,"2aWW7hO5NNZI+n6p6XePbU"],[4],[16],5],[35,8,-13,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"61dZSVJh1D/pbKieN9iJiu",1,0],[3,-0.7071068407911905,0,0,0.7071067215818995],[1,-90.00000965934629,0,0]],[120,"BananaSP_frenzyHalf2",false,1,[-17],[[15,-15,[1,"22JO86ex1FzYJzXGoNICOb"],[8],[16],9],[35,8,-16,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"e2fv32CtRIf7ymyGwaMig0",1,0],[3,-0.7071068407911905,0,0,0.7071067215818995],[1,-90.00000965934629,0,0]],[51,0,{},1,[53,"3dw3L9LExMhYl5K7SezCro",-18,[69,"3dOkN0HJ1Dz5TSSipXdPz3",1,[[10,"particle_bananaFrenzyTrail",["_name"],2],[7,["_lpos"],2,[1,0,0,0]],[7,["_lrot"],2,[3,0,0,0,1]],[7,["_euler"],2,[1,0,0,0]],[10,true,["_active"],2]]],12]],[81,"BananaSP_frenzyWhole",1,[[15,-19,[1,"57jnQV925OU6Pv9uuvrsR0"],[0],[16],1]],[2,"8e6jzNaihNTYKgI6atSpdy",1,0],[3,-0.7071068407911826,1.0677016076363387e-7,1.0677017497448912e-7,0.7071067215818914],[1,-90.0000096593463,0.00001730284635804297,-3.070370720683372e-13]],[121,"BananaSP_frenzyHalf1Outline",3,[[15,-20,[1,"51l2C/XU5A/YjVji4FVkuZ"],[2],[16],3]],[2,"92wtGSgexHcaDgkrgaxqPR",1,0],[1,-2.544426174326281e-14,-2.610004738965784e-12,0.000017302846358042774]],[121,"BananaSP_frenzyHalf2Outline",4,[[15,-21,[1,"e2gAij5YRGZa7rGnWsqUbn"],[6],[16],7]],[2,"d26EG74WVKc4N6parw/OTg",1,0],[1,-2.544426174326281e-14,-2.610004738965784e-12,0.000017302846358042774]],[81,"BananaSP_frenzyOutline",1,[[15,-22,[1,"deSjlwjjFFYZzhohUR2o4D"],[10],[16],11]],[2,"02w3WGultDzpCmQaVQshMq",1,0],[3,-0.7071068407911826,1.0677016076363387e-7,1.0677017497448912e-7,0.7071067215818914],[1,-90.0000096593463,0.00001730284635804297,-3.070370720683372e-13]]],0,[0,-1,5,0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,6,0,-2,3,0,-3,4,0,-4,9,0,-5,5,0,0,3,0,0,3,0,-1,7,0,0,4,0,0,4,0,-1,8,0,3,5,0,0,6,0,0,7,0,0,8,0,0,9,0,6,1,22],[0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,12],[70,53,12,54,70,55,12,56,70,57,12,58,230]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{},{}],[{},{},{}],[[[{"roughness":1,"metallic":0},"emissive",8,[4,4294967295]],{},{}],11,0,0]]],0,0,[0],[8],[13]],[[[19,"particle_juiceLemon"],[73,"particle_juiceLemon",[-3],[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[72,"particle_juiceSmall",1,[-4],[2,"1eGkpbHVRA7YQtVRbaS87n",1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"17+MscORlKD6npLDx1rPQ0"],[[0,null],6,0],[8],[3,0.42],[0],[0],[3,8.4],[0],[0],[0],[0],[3,0.495],[3,0.3],[0],[0],[[60,0.01,[3,44]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[70,true,1,2,0.0001,2.738,0.20671679660620837,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[0],[0],[0]],[39,true,0,[11,3,-11.7,11.7],[11,3,-3.45,3.45],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[2,null],6,0],[8],[3,1.14],[0],[0],[11,3,3.6,6.4],[0],[0],[0],[0],[3,0.77],[58,1,2.4,[5,[0,1],[[37,1,1,1,1],[45,1,1,1,1,1]]]],[0],[0],[[60,0.01,[3,14]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[83,true,1,2,0.0001,2.738,1.2217304763960306,0.20671679660620837,[0],[1,0,0,55]],[29,true,[32,1,[5,[0,0.14102564102564102,1],[[13,2,1,0.04860266743843023,1],[47,2,0.9629629629629629,-0.6339319845464617,-0.6339319845464617],[37,-1.1210613598673298,1,-1.1210613598673298,1]]]],[0],[0],[0]],[39,true,0,[11,3,-10.2,10.2],[43,3],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[34,24,34,24]],[[[19,"SpecificFruitHitText"],[165,"SpecificFruitHitText",8192,[-4,-5,-6],[[34,-2,[1,"9cbm062a5HtZN5n2jXpeS6"]],[98,-3,[1,"f8p1uLb5JPSrIiVdAGWKE2"],[6]]],[2,"b330N1rGJAurGuJwVync3O",-1,0],[1,0.65,0.65,0.65]],[20,"top_text",8192,1,[[21,-7,[1,"bdTt6bcDFK6bOK01olEM0W"],[5,300,104.2],[0,0.5,0]],[270,"APPLE",2,90,90,70,2,false,false,-8,[1,"7dzxZEBjVNkocUIIXjqaaw"],0,1],[25,8,-9,[1,"2bRW0VautAP75COMRRNhVz"],[4,4279910669]],[62,false,1,-10,[1,"6151qDjWhMqKYVadNpOsBP"],[0,3,-3]],[63,false,1,-11,[1,"2dJx4tIIFFcZQ+qoARN4M5"],[0,3,-3]]],[2,"f5Pvvg3gpPNIUQdctRN6ND",1,0],[1,0,31.697,0]],[28,"middle_text",8192,1,[[6,-12,[1,"7fJv6dPXdLyLyPPVq/wbOW"],[5,266.31,104.2]],[64,"PARTY",90,90,70,false,false,-13,[1,"94mZp3jCxGdoZJ1mOApQcQ"],2,3],[25,8,-14,[1,"b2sJ6vP7hJp6sau3Q722MH"],[4,4279910669]],[62,false,1,-15,[1,"26e3l3kitGk5fUbQ9UbNkQ"],[0,3,-3]],[63,false,1,-16,[1,"dbzNeqaCRLobsI1RoDd6Q3"],[0,3,-3]]],[2,"f2K3UCVQ9MELtKuWnOAsy2",1,0]],[20,"bottom_text",8192,1,[[6,-17,[1,"cajBPzUcRJnKfVPqUBQ//1"],[5,205.92,394]],[64,"+1",170,170,300,false,false,-18,[1,"6198NQpaRBzpmhXjpSjXmL"],4,5],[25,8,-19,[1,"69iI8q5HhDPYtqkvkGDba4"],[4,4279910669]],[62,false,1,-20,[1,"bemj1bfalIhIpXIUcz57Rd"],[0,3,-3]],[63,false,1,-21,[1,"4a+mmIH6RL8J8TV6qHmmkR"],[0,3,-3]]],[2,"38zoxPvZBKx7lVyf8w8kAD",1,0],[1,0,-113.386,0]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,0,4,0,0,4,0,0,4,0,6,1,21],[0,0,0,0,0,0,0],[7,5,7,5,7,5,-1],[71,0,71,0,71,0,231]],[[[19,"particle_juiceStrawberry"],[73,"particle_juiceStrawberry",[-3],[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[72,"particle_juiceSmall",1,[-4],[2,"1eGkpbHVRA7YQtVRbaS87n",1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"17+MscORlKD6npLDx1rPQ0"],[[0,null],6,0],[8],[3,0.42],[0],[0],[3,8.4],[0],[0],[0],[0],[3,0.495],[3,0.3],[0],[0],[[60,0.01,[3,42]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[70,true,1,2,0.0001,2.738,0.20671679660620837,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[0],[0],[0]],[39,true,0,[11,3,-11.7,11.7],[11,3,-3.45,3.45],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[2,null],6,0],[8],[3,1.14],[0],[0],[11,3,3.6,6.4],[0],[0],[0],[0],[3,0.77],[58,1,2.4,[5,[0,1],[[37,1,1,1,1],[45,1,1,1,1,1]]]],[0],[0],[[60,0.01,[3,15]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[83,true,1,2,0.0001,2.738,1.2217304763960306,0.20671679660620837,[0],[1,0,0,55]],[29,true,[32,1,[5,[0,0.14102564102564102,1],[[13,2,1,0.04860266743843023,1],[47,2,0.9629629629629629,-0.6339319845464617,-0.6339319845464617],[37,-1.1210613598673298,1,-1.1210613598673298,1]]]],[0],[0],[0]],[39,true,0,[11,3,-10.2,10.2],[43,3],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[22,21,22,21]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4284479231],"secondColor",8,[4,4282366463],"thirdColor",8,[4,4278357983],"fourthColor",8,[4,4278357983]]],11]]],0,0,[0],[8],[3]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["4fSTBlvPVPXah50LMNiD9r"]}],[1],0,[],[],[]],[[[19,"particle_pomeGibTrail"],[105,"particle_pomeGibTrail",[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[89,0.1,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[0,null],6,0],[104,[4,3808428031]],[11,3,0.9,1.8],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[86,2.4],[11,3,30,40],[0],[54,true,[82,3,[36,[[42,[4,4292202233]],[12,0.56,[4,4289833727]],[12,1,[4,4282864381]]],[[76,255],[14,255,1]]],[36,[[42,[4,4292202233]],[12,0.47,[4,4286804991]],[12,1,[4,4286457855]]],[[76,255],[14,255,1]]]]],[70,true,1,2,2.4,2.738,0.20671679660620837,[0]],[29,true,[40,2,[5,[0,0.8974358974358975],[[13,2,0.8888888888888888,1,1],[44,2,1,1]]],[5,[0,1],[[13,2,0.9629629629629629,1,1],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[40,2,[5,[0,1],[[9,2,-1],[106,2]]],[5,[0,1],[[13,2,1,1,1],[44,2,1,1]]]],[40,2,[5,[0,1],[[13,2,-1,1,1],[44,2,1,1]]],[5,[0,1],[[13,2,1,1,1],[44,2,1,1]]]],[40,2,[5,[0,1],[[13,2,-0.05925925925925926,1,1],[13,2,-0.362962962962963,1,1]]],[5,[0,1],[[13,2,0.05185185185185185,1,1],[13,2,0.37777777777777777,1,1]]]],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-3],[31,1,1]]],0,[0,3,1,0,-1,2,0,9,2,0,6,1,3],[0,0],[-1,10],[62,41]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["500yk+WsFMQ7jlUPunk5WF"]}],[1],0,[],[],[]],[[{"name":"splat13","rect":{"x":0,"y":17,"width":239,"height":239},"offset":{"x":-8.5,"y":-8.5},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[232]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["51Gfu2WNlF1IiSmP17HSXu"]}],[1],0,[],[],[]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[233,7]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["53FEEPff1Fqrogbd3/1NE/"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["53z9IE/gJEJa6NQMWJr0dS"]}],[1],0,[],[],[]],[[{"name":"NotificationGoldBorder","rect":{"x":1,"y":1,"width":66,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":68,"height":72},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[234]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["53+TPlrO1IjLcwPeFSqttV"]}],[1],0,[],[],[]],[[[19,"fruitSplat"],[165,"fruitSplat",16384,[-4],[[6,-2,[1,"28fa8m2Y5JdZmX4p9Ggzf8"],[5,250,77]],[143,-3,[1,"d1xbxPCx1LoYrkjbgcfVRj"]]],[2,"9b5WJX0+ZNk5O7j+HMT6IF",-1,0],[1,0.7,0.7,1]],[28,"assets",16384,1,[[6,-5,[1,"85+fTbudJDDbucYC5a+AfF"],[5,219,189]],[18,-6,[1,"20lgtZYItGB5AdGnPBKlel"],0]],[2,"19oeghMsBFa7IiWiok/0c+",1,0]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,6,1,6],[0],[2],[102]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[103,5]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["55Iz/+ysxHSLMhVeoEW4Ep"]}],[1],0,[],[],[]],[[{"name":"SplashSlice2","rect":{"x":12,"y":35,"width":460,"height":161},"offset":{"x":-14,"y":12.5},"originalSize":{"width":512,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[235]],[[[19,"fruitSlice_diamond"],[68,"fruitSlice_diamond",262144,[-5],[[6,-2,[1,"28fa8m2Y5JdZmX4p9Ggzf8"],[5,26,114]],[143,-3,[1,"d1xbxPCx1LoYrkjbgcfVRj"]],[97,true,-4,[1,"d1e/nZJ8BIFrXDRyk1+pv2"],[1],2]],[2,"9b5WJX0+ZNk5O7j+HMT6IF",-1,0]],[28,"assets",262144,1,[[6,-6,[1,"85+fTbudJDDbucYC5a+AfF"],[5,26,114]],[18,-7,[1,"20lgtZYItGB5AdGnPBKlel"],0]],[2,"19oeghMsBFa7IiWiok/0c+",1,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,6,1,7],[0,0,0],[2,-1,14],[236,104,104]],[[[19,"cont_LevelUpPopup"],[68,"cont_LevelUpPopup",131072,[-6,-7],[[6,-2,[1,"8dP3QQLG5NEpd3yTlXmYyb"],[5,1280,768]],[131,45,100,100,-3,[1,"4er7DmHEZDOrsywtDRrlKM"]],[100,-4,[1,"bawNGgLCFNLK0ji5K/e+lj"],[39,40],41],[336,-5,[1,"34t7ZzY75GMZdP1WCEedvX"],42,43,44]],[2,"76iW9TfctBs7bf9cLh0LH2",-1,0]],[164,"mask",131072,[-10,-11,-12,-13,-14,-15,-16],[[6,-8,[1,"95AjYijiFNK7ZBBd3h94Gb"],[5,605,490]],[186,-9,[1,"b8vLsgEMZB6rufxYvnhdaq"]]],[2,"8c+xEgHBJDT4bLAtoTgtnu",1,0],[1,0,-57.676,0]],[49,"Scroll",131072,1,[-19,-20,2,-21,-22],[[6,-17,[1,"14vdp7jCtNB6D6YDLbpakR"],[5,650,520]],[145,17,-1000,-18,[1,"85TdGQQ/FCGbXpa1DfCC9L"]]],[2,"e5ZLPvBZ9KepP63aHRp8eU",1,0],[1,0,1124,0]],[67,"ScrollHeader",131072,3,[-25,-26,-27,-28,-29],[[21,-23,[1,"67+IbNHdlF6YQYBh0ApeYh"],[5,1100,139],[0,0.5,1]],[78,1,0,-24,[1,"5ccWmMc4JABIFltrjtIhF6"],38]],[2,"1ejlEY4dxIaJZi7iIhdrDx",1,0],[1,0,210.538,0],[1,0.6,0.6,1]],[28,"BG",131072,1,[[6,-30,[1,"89Apgc65hI9ai2a7YAcjVn"],[5,2500,1468]],[59,0,-31,[1,"d7KR38m4NP244CsYTpeSWk"],[4,0],0],[222,45,-610,-610,-350,-350,1320,800,-32,[1,"f0uH+6yYlMqYWxHW+DVAM/"]],[159,-33,[1,"2fHwyLpq1KRrhvfiGveOis"],1]],[2,"e4ZbpofPJC/ZjE18+QhFXC",1,0]],[67,"border",131072,2,[-35,-36,-37],[[34,-34,[1,"d3vxkzvNhAwbTJSp7T0u5R"]]],[2,"b1JOJARKZGdLzbuDUAmrgJ",1,0],[1,0,-237.63400000000007,0],[1,0.8000000000000003,0.8000000000000003,1]],[67,"ButtonClaim",131072,2,[-41],[[6,-38,[1,"75f2a46f9O2Jk5zujYN0X1"],[5,240,80]],[94,0,-39,[1,"4cXKTpCVFO/79E96lQYj1u"],16],[80,3,0.9,-40,[1,"30L5MHpUlFdJD5wg2W+Mjb"],[[95,"9058cfxX5RIArbndRVivXV8","btnClaimClicked",1]],17]],[2,"a13GMTGYRJNLp5TDbruWbp",1,0],[1,0,-157.769,0],[1,0.95,0.95,1]],[67,"Badge",131072,4,[-44,-45],[[6,-42,[1,"229Ie7cntCH7vI/B8PIy+j"],[5,325,351]],[18,-43,[1,"ebQxdZV7xPWYfaqsmssMZT"],25]],[2,"3cZD1Cw6lA35YDcaNB2PZs",1,0],[1,0,60.885,0],[1,0.9,0.9,1]],[253,"particle_confetti",false,262144,4,[-47,-48,-49],[-46],[2,"78Y3syVS1NR4RSA+2MaZ6k",1,0],[1,0,90.84333333333325,0],[1,1.6666666666666665,1.6666666666666665,0.9999999999999999]],[20,"levelUpRays_Loop",131072,3,[[6,-50,[1,"deIWC2nLRJTp2+OXOjP2xN"],[5,459,462]],[118,-51,[1,"6cjDXOiOpH9KLUuTEnfibw"],[4,4293670616],3],[97,true,-52,[1,"49T0BeQCNFBJMJvRdnCXr1"],[4],5]],[2,"71EOhum4VMUp4+w5XakFE/",1,0],[1,0,216.493,0]],[20,"text1",131072,2,[[6,-53,[1,"daOa+4H11G2ZiRPgGEKryO"],[5,500,31.5]],[117,"Reward:",25,25,0,2,false,false,-54,[1,"97J6ziSt1MGqt7eQxyzzcy"],[4,4280770714],10],[111,false,4,-55,[1,"22d1O/WhZAAI2iAUq4P/jO"],[4,4282729797]]],[2,"ebSBUKUKRLa4XUN2aQg/ul",1,0],[1,0,170.63799999999992,0]],[30,"textPU",131072,2,[[6,-56,[1,"c0KL3dJF5LxrQn7VcW2402"],[5,800,100]],[74,"Bomb Deflect",60,60,60,2,false,false,-57,[1,"b7YpQhVX5MxKvF2BGczH00"],12,13],[25,5,-58,[1,"148PXvyAdOJaCB8lxWf7nJ"],[4,4282729797]]],[2,"a7C4FWD6NIbqCcupspCQle",1,0],[1,0,134.76499999999993,0],[1,0.6,0.6,0.9999999999999999]],[30,"text_Claim",131072,7,[[6,-59,[1,"18GUt7DWlKXK/VCiXVKkVq"],[5,250,50]],[176,"Claim",40,0,2,false,false,-60,[1,"eflEsi1CxNkJw+inGRKlZ1"],14,15],[140,0,-61,[1,"c2H4fpVCFCnpMtSEZ0j9Bn"],[4,2097207039],[0,1,-2]]],[2,"f1RDkgOKZNnp7lvdlui9cI",1,0],[1,0,7.62,0],[1,1.1111111111111112,1.1111111111111112,1]],[20,"textPU_amount",131072,2,[[6,-62,[1,"3dL5M81sNMPrOD6Ic5H+mK"],[5,97.19,110.8]],[64,"x1",80,80,80,false,false,-63,[1,"6fsr2y+5xFo6xqShKHzPdR"],18,19],[25,5,-64,[1,"b1M/pEJtlENKnQaJoyqwDq"],[4,4282729797]]],[2,"62Bpdm02NCELl5QlJ+5FLb",1,0],[1,48.065000000000055,-64.50700000000006,0]],[109,"text_LevelAngka",131072,8,[[6,-65,[1,"e7sMGorHZHCpYHKIhy7EAv"],[5,200,200]],[74,"1",180,180,0,2,false,false,-66,[1,"f1UmBcOfZB8Jx8tPaCvu7l"],21,22],[25,5,-67,[1,"16A89fcl9BFKjLciE33mTB"],[4,4285015669]]],[2,"44qJz80JNJFK3PQoVLeOP5",1,0],[1,-1.926,10.919,0],[3,0,0,0.08715574274765817,0.9961946980917455],[1,0,0,10]],[238,"text_LevelAngkaNew",false,131072,8,[[6,-68,[1,"5fDu2WwW9CbJxEawTaeM/I"],[5,200,200]],[74,"1",180,180,0,2,false,false,-69,[1,"48Mu7vTSFHaZaOV2gez+bY"],23,24],[25,5,-70,[1,"7fOfSiGV1FK7zLImtkWc3k"],[4,4285015669]]],[2,"e3og0cDL9JgaC3vfrY1odT",1,0],[1,-1.926,10.919,0],[3,0,0,0.08715574274765817,0.9961946980917455],[1,0,0,10]],[20,"text_header",131072,4,[[6,-71,[1,"55pkdUCI5EE5WOfT+tledd"],[5,800,100]],[74,"Level Up!",90,90,90,2,false,false,-72,[1,"c9BmhxPydErbyyHgB19jaz"],28,29],[25,5,-73,[1,"5bwq+b3qBBgYX9uoIGjs+K"],[4,4282729797]]],[2,"bd/KrVATxD/LeQU0lZt52M",1,0],[1,0,-63.91,0]],[30,"Glow_sprite",131072,3,[[6,-74,[1,"32oJmEtJVCA54JohfE0aRi"],[5,124,124]],[118,-75,[1,"79RWmTZutGAqCPl7D1rELv"],[4,4294931427],2]],[2,"b2ba081BFOVZ4Buk4Gc9Sq",1,0],[1,0,109.415,0],[1,5,5,1]],[20,"ScrollBacking",131072,2,[[21,-76,[1,"8ewMSELJFOm5JtYWOBoExs"],[5,625,490],[0,0.5,1]],[78,1,0,-77,[1,"f6qPZHP6tAtKkZaOxd9QYr"],6]],[2,"5d7CYFa5JLibWCZquGk3lL",1,0],[1,0,229.51499999999993,0]],[20,"border1",131072,6,[[6,-78,[1,"37GehCb1dDh5jdqcguW9i1"],[5,700,12]],[59,0,-79,[1,"a7EVh6cY5Pxr/sh88jKgfu"],[4,4285183722],7]],[2,"b7APDytf5DRZ3DreeAS3rm",1,0],[1,0,32.686,0]],[109,"border2",131072,6,[[6,-80,[1,"efViGoFyNCrIsS9JoteeAi"],[5,517,12]],[59,0,-81,[1,"e1xpmF20ZCgZUCYWBA8iVf"],[4,4285183722],8]],[2,"d8lPQvAeJCfIyERNpl6OIN",1,0],[1,-344.136,286.984,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[109,"border3",131072,6,[[6,-82,[1,"abG30p0rRLZ6wpDMZ2cQV4"],[5,517,12]],[59,0,-83,[1,"2c3zPnxZNBQJgSQiTacTB5"],[4,4285183722],9]],[2,"47lggMtHlJpZ4dcb36+MQZ",1,0],[1,344.136,286.984,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[30,"iconPU",131072,2,[[6,-84,[1,"37fjOHE5RJubWfTM6X4hX5"],[5,210,229]],[94,0,-85,[1,"a3Rp6t+WZEIKGPrCWNA0E4"],11]],[2,"f0RKEqFblMwr0bveLjfX3m",1,0],[1,0,-2.8020000000000778,0],[1,0.95,0.95,1]],[20,"ScrollBottom",131072,3,[[21,-86,[1,"9a67IZZ1ZDfpfGeX2yTMM/"],[5,695,111],[0,0.5,0]],[78,1,0,-87,[1,"18VXKm4bpCMYPbsUhWymNv"],20]],[2,"eeZ0+2PkFEM77cnEiU29/T",1,0],[1,0,-359.33,0]],[20,"BlackRibbon",131072,4,[[21,-88,[1,"c04yHfzZdBP4xXj3cwb26T"],[5,519,182],[0,1,0.5]],[157,1,0,1,-89,[1,"0aMht492RF16mL/dkRvAzy"],26]],[2,"42upsjkwNOv56FjBI0hHz2",1,0],[1,519.223,-100.042,0]],[30,"BlackRibbon-001",131072,4,[[21,-90,[1,"dd/0rdNg9AdrUC7l7Far6W"],[5,519.5,182],[0,1,0.5]],[157,1,0,1,-91,[1,"a2aiLsKIxNRIosyy0Yoff/"],27]],[2,"b4XVdHsqJKZ5GBXWZIiJG4",1,0],[1,-519.223,-100.042,0],[1,-1,1,1]],[127,"particle_confetti2",262144,9,[-92],[2,"bd/g1XNZdK7qq5t/212SzY",1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,27,[1,"af4DCgm+pAi4JDLu2yuaQK"],[[30,null],6,0],[104,[4,4281789589]],[11,3,12,15],[0],[0],[3,100],[0],[0],[71,3,6.283185307179586],[0],[3,1.5],[58,1,100,[5,[0,0.5153846153846153,1],[[9,2,0.007407407407407407],[47,2,1,0.27777777777777696,0.27777777777777696],[9,2,1]]]],[0],[0],[[142,[3,5]]],[65,[33,1,[36,[[42,[4,33554431]],[12,0.64,[4,33540434]]],[[76,255],[14,255,1]]]]],[70,true,1,2,100,2.738,0.20671679660620837,[0]],[29,true,[50,2,2,[5,[0,0.658974358974359,1],[[48,2,0.7888888888888889,0.7080610021786498,1,0.7080610021786498,1],[47,2,0.040740740740740744,-0.391713747645951,-0.391713747645951],[44,2,1,1]]],[5,[0,0.258974358974359,1],[[48,2,0.8814814814814815,0.7068557919621745,1,0.7068557919621745,1],[47,2,0.9666666666666667,-0.43333333333333357,-0.43333333333333357],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[50,2,500,[5,[0,1],[[9,2,-1],[106,2]]],[5,[0,1],[[13,2,1.0000000000000002,1.0000000000000002,1.0000000000000002],[44,2,1.0000000000000002,1.0000000000000002]]]],[50,2,700,[5,[0,1],[[48,2,-0.562962962962963,1.6296296296296304,1.0000000000000002,1.6296296296296304,1.0000000000000002],[13,2,-0.1037037037037037,1.0000000000000002,1.0000000000000002]]],[5,[0,1],[[13,2,0.43703703703703706,1,1],[44,2,1,1]]]],[0],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[156,true,true,[50,2,50,[5,[0,1],[[112,-0.05185185185185186,1.0518518518518518,1.0518518518518518],[9,2,-1]]],[5,[0,1],[[112,0.059259259259259255,1.0148148148148148,1.0148148148148148],[9,2,1]]]],[50,2,50,[5,[0,1],[[9,2,-0.08888888888888889],[9,2,-1]]],[5,[0,1],[[9,2,0.12592592592592594],[9,2,1]]]],[50,2,50,[5,[0,1],[[9,2,-0.0962962962962963],[9,2,-1]]],[5,[0,1],[[9,2,0.14074074074074072],[9,2,1]]]]],[24,[0],[0]],[27,[0],[0],[8],[8],-93],[31,1,31]],[127,"particle_confetti3",262144,9,[-94],[2,"20Ywuqrw9EtIZKcoTGkCc6",1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,29,[1,"aemtzJHEZBoqFFAA2cuCRW"],[[32,null],6,0],[104,[4,4283625983]],[11,3,40,60],[0],[0],[3,75],[0],[0],[43,3],[0],[3,1.5],[58,1,100,[5,[0,0.8512820512820513,1],[[9,2,0.007407407407407407],[47,2,1,0.27777777777777696,0.27777777777777696],[9,2,1]]]],[0],[0],[[142,[3,5]]],[65,[33,1,[36,[[42,[4,33554431]],[12,0.64,[4,33540434]]],[[76,255],[14,255,1]]]]],[70,true,1,2,100,2.738,0.20671679660620837,[0]],[29,true,[50,2,2,[5,[0,0.658974358974359,1],[[48,2,0.7888888888888889,0.7080610021786498,1,0.7080610021786498,1],[47,2,0.040740740740740744,-0.391713747645951,-0.391713747645951],[44,2,1,1]]],[5,[0,0.258974358974359,1],[[48,2,0.8814814814814815,0.7068557919621745,1,0.7068557919621745,1],[47,2,0.9666666666666667,-0.43333333333333357,-0.43333333333333357],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[50,2,500,[5,[0,1],[[9,2,-0.8518518518518519],[106,2]]],[5,[0,1],[[13,2,1.0000000000000002,1.0000000000000002,1.0000000000000002],[44,2,1.0000000000000002,1.0000000000000002]]]],[50,2,700,[5,[0,1],[[48,2,-0.562962962962963,1.6296296296296304,1.0000000000000002,1.6296296296296304,1.0000000000000002],[13,2,-0.1037037037037037,1.0000000000000002,1.0000000000000002]]],[5,[0,1],[[13,2,0.43703703703703706,1,1],[44,2,1,1]]]],[0],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[156,true,true,[50,2,50,[5,[0,1],[[112,-0.05185185185185186,1.0518518518518518,1.0518518518518518],[9,2,-1]]],[5,[0,1],[[112,0.059259259259259255,1.0148148148148148,1.0148148148148148],[9,2,1]]]],[50,2,50,[5,[0,1],[[9,2,-0.08888888888888889],[9,2,-1]]],[5,[0,1],[[9,2,0.12592592592592594],[9,2,1]]]],[86,20]],[24,[0],[0]],[27,[0],[0],[8],[8],-95],[31,1,33]],[127,"particle_confetti4",262144,9,[-96],[2,"20L0NShBpNQ5z1iXhY1XSO",1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,31,[1,"83n2HHQw5IU5OHCiMzcv3c"],[[34,null],6,0],[104,[4,4294801971]],[11,3,18,26],[0],[0],[3,100],[0],[0],[71,3,6.283185307179586],[0],[3,1.5],[58,1,100,[5,[0,0.5153846153846153,1],[[9,2,0.007407407407407407],[47,2,1,0.27777777777777696,0.27777777777777696],[9,2,1]]]],[0],[0],[[142,[3,5]]],[65,[33,1,[36,[[42,[4,33554431]],[12,0.64,[4,33540434]]],[[76,255],[14,255,1]]]]],[70,true,1,2,100,2.738,0.20671679660620837,[0]],[29,true,[50,2,2,[5,[0,0.658974358974359,1],[[48,2,0.7888888888888889,0.7080610021786498,1,0.7080610021786498,1],[47,2,0.040740740740740744,-0.391713747645951,-0.391713747645951],[44,2,1,1]]],[5,[0,0.258974358974359,1],[[48,2,0.8814814814814815,0.7068557919621745,1,0.7068557919621745,1],[47,2,0.9666666666666667,-0.43333333333333357,-0.43333333333333357],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[50,2,500,[5,[0,1],[[9,2,-1],[106,2]]],[5,[0,1],[[13,2,1.0000000000000002,1.0000000000000002,1.0000000000000002],[44,2,1.0000000000000002,1.0000000000000002]]]],[50,2,700,[5,[0,1],[[48,2,-0.562962962962963,1.6296296296296304,1.0000000000000002,1.6296296296296304,1.0000000000000002],[13,2,-0.1037037037037037,1.0000000000000002,1.0000000000000002]]],[5,[0,1],[[13,2,0.43703703703703706,1,1],[44,2,1,1]]]],[0],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[156,true,true,[50,2,50,[5,[0,1],[[112,-0.05185185185185186,1.0518518518518518,1.0518518518518518],[9,2,-1]]],[5,[0,1],[[112,0.059259259259259255,1.0148148148148148,1.0148148148148148],[9,2,1]]]],[50,2,50,[5,[0,1],[[9,2,-0.08888888888888889],[9,2,-1]]],[5,[0,1],[[9,2,0.12592592592592594],[9,2,1]]]],[50,2,50,[5,[0,1],[[9,2,-0.0962962962962963],[9,2,-1]]],[5,[0,1],[[9,2,0.14074074074074072],[9,2,1]]]]],[24,[0],[0]],[27,[0],[0],[8],[8],-97],[31,1,35]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,9,[1,"9ajV3cSjhNBbjBfnHS5qnZ"],[[36,null],6,0],[104,[4,4282327537]],[11,3,12,15],[0],[0],[3,100],[0],[0],[71,3,6.283185307179586],[0],[3,1.5],[58,1,100,[5,[0,0.5153846153846153,1],[[9,2,0.007407407407407407],[47,2,1,0.27777777777777696,0.27777777777777696],[9,2,1]]]],[0],[0],[[142,[3,5]]],[65,[33,1,[36,[[42,[4,33554431]],[12,0.64,[4,33540434]]],[[76,255],[14,255,1]]]]],[70,true,1,2,100,2.738,0.20671679660620837,[0]],[29,true,[50,2,2,[5,[0,0.658974358974359,1],[[48,2,0.7888888888888889,0.7080610021786498,1,0.7080610021786498,1],[47,2,0.040740740740740744,-0.391713747645951,-0.391713747645951],[44,2,1,1]]],[5,[0,0.258974358974359,1],[[48,2,0.8814814814814815,0.7068557919621745,1,0.7068557919621745,1],[47,2,0.9666666666666667,-0.43333333333333357,-0.43333333333333357],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[50,2,500,[5,[0,1],[[9,2,-1],[106,2]]],[5,[0,1],[[13,2,1.0000000000000002,1.0000000000000002,1.0000000000000002],[44,2,1.0000000000000002,1.0000000000000002]]]],[50,2,700,[5,[0,1],[[48,2,-0.562962962962963,1.6296296296296304,1.0000000000000002,1.6296296296296304,1.0000000000000002],[13,2,-0.1037037037037037,1.0000000000000002,1.0000000000000002]]],[5,[0,1],[[13,2,0.43703703703703706,1,1],[44,2,1,1]]]],[0],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[156,true,true,[50,2,50,[5,[0,1],[[112,-0.05185185185185186,1.0518518518518518,1.0518518518518518],[9,2,-1]]],[5,[0,1],[[112,0.059259259259259255,1.0148148148148148,1.0148148148148148],[9,2,1]]]],[50,2,50,[5,[0,1],[[9,2,-0.08888888888888889],[9,2,-1]]],[5,[0,1],[[9,2,0.12592592592592594],[9,2,1]]]],[50,2,50,[5,[0,1],[[9,2,-0.0962962962962963],[9,2,-1]]],[5,[0,1],[[9,2,0.14074074074074072],[9,2,1]]]]],[24,[0],[0]],[27,[0],[0],[8],[8],-98],[31,1,37]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,5,0,-2,3,0,0,2,0,0,2,0,-1,19,0,-2,6,0,-3,11,0,-4,23,0,-5,12,0,-6,7,0,-7,14,0,0,3,0,0,3,0,-1,18,0,-2,10,0,-4,24,0,-5,4,0,0,4,0,0,4,0,-1,8,0,-2,25,0,-3,26,0,-4,17,0,-5,9,0,0,5,0,0,5,0,0,5,0,0,5,0,0,6,0,-1,20,0,-2,21,0,-3,22,0,0,7,0,0,7,0,0,7,0,-1,13,0,0,8,0,0,8,0,-1,15,0,-2,16,0,-1,33,0,-1,27,0,-2,29,0,-3,31,0,0,10,0,0,10,0,0,10,0,0,11,0,0,11,0,0,11,0,0,12,0,0,12,0,0,12,0,0,13,0,0,13,0,0,13,0,0,14,0,0,14,0,0,14,0,0,15,0,0,15,0,0,15,0,0,16,0,0,16,0,0,16,0,0,17,0,0,17,0,0,17,0,0,18,0,0,18,0,0,19,0,0,19,0,0,20,0,0,20,0,0,21,0,0,21,0,0,22,0,0,22,0,0,23,0,0,23,0,0,24,0,0,24,0,0,25,0,0,25,0,0,26,0,0,26,0,-1,28,0,9,28,0,-1,30,0,9,30,0,-1,32,0,9,32,0,9,33,0,6,1,2,19,3,98],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,15,2,2,-1,14,2,2,2,2,5,2,7,5,7,5,2,15,7,5,2,7,5,7,5,2,2,2,7,5,-1,10,-1,10,-1,10,-1,10,2,-1,-2,14,29,30,31],[2,2,237,238,105,105,72,2,2,2,17,18,8,0,44,0,23,23,8,0,73,106,0,106,0,239,107,107,8,0,108,109,86,87,240,241,108,109,74,110,242,110,18,26,27]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[243,7]],[[[19,"particle_back"],[105,"particle_back",[-2],[2,"aaIPafIgtDMYkLTO0bOtva",-1,0]],[284,10,2,10,0,1,[1,"e8NNMIHTFNr7r420sJBNGu"],[[0,null],6,0],[8],[3,1],[0],[0],[3,3],[0],[0],[0],[0],[3,1],[0],[3,10],[0],[54,true,[33,1,[36,[[12,0.004464285714285714,[4,4294901821]],[12,0.6049107142857143,[4,4280942336]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[292,true,3,2,true,0.04,[0],[1,-0.1,0,0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[0],[0],[0]],[141,[0],[0],[0],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-3],[31,1,1]]],0,[0,3,1,0,-1,2,0,9,2,0,6,1,3],[0,0],[-1,10],[111,75]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["5ad7WzfBNGr4Im/S0yf6qO"]}],[1],0,[],[],[]],[[{"name":"orange","rect":{"x":0,"y":0,"width":97,"height":92},"offset":{"x":-1.5,"y":0},"originalSize":{"width":100,"height":92},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[244]],[[[19,"Starfruit_half_top"],[91,"Starfruit_half_top",[-4,-5,-6,-7,-8,-9],[[35,2,-2,[1,"67KdewkNtMbaaU5Q0bawu8"]],[204,-3,[1,"63u3dLfCpE34yC+k2EZI11"]]],[2,"f4jG+nL5xCW4+ZdmwYaJQO",-1,0],[1,-2.637,0,0]],[146,"StarfruitWhole",false,1,[[15,-10,[1,"cez7KXKtVAS7ZxuuFxYkgC"],[0,1],[16],2]],[2,"c4JIdhWmVFn6P4VDzoKIx7",1,0]],[146,"StarfruitWhole_Outline",false,1,[[15,-11,[1,"68YYaoukhL85WMWNKAaura"],[3,4],[16],5]],[2,"dbI+kVzzFKoYrVL9K8NwVn",1,0]],[92,"StarfruitHalfTop_Outline",1,[[15,-12,[1,"424DircFJGl4mm2IpBgv+1"],[6,7],[16],8]],[2,"53p1ysv0tLLopbL0PMWB3Q",1,0]],[122,"StarfruitHalfBottom_Outline",false,1,[[15,-13,[1,"e5RFYdZ+xL5Zg95/6mpm6V"],[9,10],[16],11]],[2,"43sF834B1NwZUYWvTNGyGm",1,0],[1,0,-0.267,0]],[122,"StarfruitHalfBottom",false,1,[[15,-14,[1,"7ePgJWBw1ANYbWBGQYmAvx"],[12,13],[16],14]],[2,"86Lzoo8b1GG5TMV7ruEYYt",1,0],[1,0,-0.267,0]],[92,"StarfruitHalfTop",1,[[15,-15,[1,"88JB2cqvxNYrM95TwbX+8e"],[15,16],[16],17]],[2,"c2KDbgLpFADIMCnZwJoCRw",1,0]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,7,0,0,2,0,0,3,0,0,4,0,0,5,0,0,6,0,0,7,0,6,1,15],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,4,-1,-2,4,-1,-2,4,-1,-2,4,-1,-2,4,-1,-2,4],[4,4,112,4,4,113,4,4,114,4,4,115,4,4,116,4,4,117]],[[[19,"particle_bananaFrenzyTrail"],[73,"particle_bananaFrenzyTrail",[-3],[-2],[2,"3dw3L9LExMhYl5K7SezCro",-1,0]],[127,"star",65536,1,[-4],[2,"9d1v3uEi1FCopqhwu/hUNZ",1,0]],[89,1,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"f3MnPFRTFCHaWCe/FxP92F"],[[0,null],6,0],[8],[3,0.7],[0],[0],[3,1],[0],[0],[71,3,6.283185307179586],[0],[3,1.1],[86,2.4],[3,15],[0],[54,true,[33,1,[57,[[42,[4,4282835455]],[12,0.12276785714285714,[4,4282835455]],[12,0.875,[4,4278222334]]]]]],[130,true,3,0.1,2.738,0.20671679660620837,[0]],[29,true,[58,1,1.5,[5,[0.04358974358974359,1],[[13,2,1,1,1],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[40,2,[5,[0.002564102564102564,1],[[9,2,-0.16296296296296298],[9,2,-1]]],[5,[0,1],[[9,2,0.08148148148148149],[9,2,1]]]],[50,2,1.4,[5,[0,1],[[9,2,-0.9333333333333333],[9,2,-0.8888888888888888]]],[5,[0,1],[[9,2,0.8296296296296296],[9,2,0.8666666666666667]]]],[40,2,[5,[0,1],[[9,2,-0.1037037037037037],[9,2,-0.31851851851851853]]],[5,[0,1],[[9,2,0.07407407407407407],[9,2,0.3037037037037037]]]],[3,1]],[26,[32,1,[5,[0,1],[[9,2,1],[9,2,1]]]],[58,1,16,[5,[0,0.9897435897435898],[[47,2,-0.014814814814814815,-2.605664488017429,-2.605664488017429],[9,2,-1]]]],[32,1,[5,[0,1],[[9,2,1],[9,2,1]]]]],[23,[0],[0],[0],[0]],[90,true,[0],[0],[11,3,-3.490658503988659,3.490658503988659]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[89,0.1,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"eaKL/V/klKHrwpm0Dj1LyA"],[[2,null],6,0],[33,1,[36,[[42,[4,4281757438]],[12,0.3,[4,4281757438]],[12,0.46,[4,4285249535]],[12,0.68,[4,4284316410]],[12,0.8,[4,4286575615]],[12,1,[4,4282903295]]],[[76,255],[14,255,1]]]],[11,3,1.8,2.2],[0],[0],[3,0.6],[0],[0],[0],[0],[3,0.6],[86,2.4],[3,13],[0],[65,[33,1,[57,[[42,[4,33554431]],[12,1,[4,33554431]]]]]],[70,true,1,2,0.6,2.738,0.20671679660620837,[0]],[29,true,[40,2,[5,[0,0.8974358974358975],[[13,2,0.8888888888888888,1,1],[44,2,1,1]]],[5,[0,1],[[13,2,0.9629629629629629,1,1],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[40,2,[5,[0,1],[[9,2,-1],[106,2]]],[5,[0,1],[[13,2,1,1,1],[44,2,1,1]]]],[40,2,[5,[0,1],[[13,2,-1,1,1],[13,2,-0.9407407407407408,1,1]]],[5,[0,1],[[13,2,1,1,1],[13,2,0.8888888888888888,1,1]]]],[40,2,[5,[0,1],[[13,2,-0.05925925925925926,1,1],[13,2,-0.362962962962963,1,1]]],[5,[0,1],[[13,2,0.05185185185185185,1,1],[13,2,0.37777777777777777,1,1]]]],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[9,10,67,68]],[[[314,"builtin-sprite",[{}],[{"hash":67215139,"name":"builtin-sprite|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"varyings":[{"name":"color","type":16,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"uv0","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 color;\nlayout(location = 1) out vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nlayout(location = 0) in vec4 color;\n#if USE_TEXTURE\n  layout(location = 1) in vec2 uv0;\n  layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n  o *= color;\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":1}},"defines":[{"name":"USE_LOCAL","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean","defines":[]},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"IS_GRAY","type":"boolean","defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"builtin-sprite|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["62wuoq6tNNkpW2PqrnVshk"]}],[1],0,[],[],[]],[[{"name":"lime","rect":{"x":0,"y":0,"width":96,"height":78},"offset":{"x":0,"y":0},"originalSize":{"width":96,"height":78},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[245]],[[[19,"Pomegranate"],[194,"Pomegranate",[-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33],[[35,2,-13,[1,"67KdewkNtMbaaU5Q0bawu8"]],[55,-14,[1,"166ak6c2ZFbY/eJPgeQdkC"]],[77,0.65,-15,[1,"4cfp2mCChOJrjNxNGDrMlC"]]],[138,"af1ccjQCtDEpC+ojf4f97F",-12,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]],[1,1.15,1.15,1.15]],[110,"pomegranate_jiblet_1",false,1,[-38],[[15,-34,[1,"61CLaEMLtAGY+AcFk0tITS"],[5],[16],6],[55,-35,[1,"166ak6c2ZFbY/eJPgeQdkC"]],[85,false,8,-36,[1,"24ubKwWcpBPp7H5j/LBdFL"]],[114,-37,[1,"26nR/fEr9G4YUui50z8dpU"],7,8]],[2,"172zNrETNAIIgw+UGruZKw",1,0],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,2,2,2],[1,-90.00000000000003,0,0]],[110,"pomegranate_jiblet_2",false,1,[-43],[[15,-39,[1,"171qdqpphJUKuvS/erKHph"],[10],[16],11],[55,-40,[1,"166ak6c2ZFbY/eJPgeQdkC"]],[85,false,8,-41,[1,"24ubKwWcpBPp7H5j/LBdFL"]],[114,-42,[1,"26nR/fEr9G4YUui50z8dpU"],12,13]],[2,"betbhG+vdLl5ae8aNbDshG",1,0],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,2,2,2],[1,-90.00000000000003,0,0]],[110,"pomegranate_jiblet_3",false,1,[-48],[[15,-44,[1,"f1sqee1OlHRJgDZTy0zyIO"],[15],[16],16],[55,-45,[1,"166ak6c2ZFbY/eJPgeQdkC"]],[85,false,8,-46,[1,"24ubKwWcpBPp7H5j/LBdFL"]],[114,-47,[1,"26nR/fEr9G4YUui50z8dpU"],17,18]],[2,"f9W6ViUZtLIpVwbivnpXsS",1,0],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,2,2,2],[1,-90.00000000000003,0,0]],[110,"pomegranate_jiblet_4",false,1,[-53],[[15,-49,[1,"0dDwaHb0NI9pW/0VMlHqRC"],[20],[16],21],[55,-50,[1,"166ak6c2ZFbY/eJPgeQdkC"]],[85,false,8,-51,[1,"24ubKwWcpBPp7H5j/LBdFL"]],[114,-52,[1,"26nR/fEr9G4YUui50z8dpU"],22,23]],[2,"44b433UTtMa4IlOElxLAES",1,0],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,2,2,2],[1,-90.00000000000003,0,0]],[110,"pomegranate_jiblet_5",false,1,[-58],[[15,-54,[1,"bbQ8xUKLFOQ5gI22iJrWn6"],[25],[16],26],[55,-55,[1,"166ak6c2ZFbY/eJPgeQdkC"]],[85,false,8,-56,[1,"24ubKwWcpBPp7H5j/LBdFL"]],[114,-57,[1,"26nR/fEr9G4YUui50z8dpU"],27,28]],[2,"34f6eiK+hLHo4m+e0RBjBh",1,0],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,2,2,2],[1,-90.00000000000003,0,0]],[110,"pomegranate_jiblet_6",false,1,[-63],[[15,-59,[1,"a1gmCjBmBPQYlRYv/Bs7np"],[30],[16],31],[55,-60,[1,"166ak6c2ZFbY/eJPgeQdkC"]],[85,false,8,-61,[1,"24ubKwWcpBPp7H5j/LBdFL"]],[114,-62,[1,"26nR/fEr9G4YUui50z8dpU"],32,33]],[2,"20ICSAElFEXJhYqszFalSH",1,0],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,2,2,2],[1,-90.00000000000003,0,0]],[110,"pomegranate_jiblet_7",false,1,[-68],[[15,-64,[1,"98pzAgRutOFbox9LOri64I"],[35],[16],36],[55,-65,[1,"166ak6c2ZFbY/eJPgeQdkC"]],[85,false,8,-66,[1,"24ubKwWcpBPp7H5j/LBdFL"]],[114,-67,[1,"26nR/fEr9G4YUui50z8dpU"],37,38]],[2,"fdB5Fg2HZDIIluL+Z4fWE1",1,0],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,2,2,2],[1,-90.00000000000003,0,0]],[110,"pomegranate_jiblet_8",false,1,[-73],[[15,-69,[1,"87+NH+QXhBzJpcMdWAw8Px"],[40],[16],41],[55,-70,[1,"166ak6c2ZFbY/eJPgeQdkC"]],[85,false,8,-71,[1,"24ubKwWcpBPp7H5j/LBdFL"]],[114,-72,[1,"26nR/fEr9G4YUui50z8dpU"],42,43]],[2,"80LLx7X+5Hk7zELeeqd/f/",1,0],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,2,2,2],[1,-90.00000000000003,0,0]],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[239,"pomegranate_single",1,[-75,-76],[[15,-74,[1,"5d4dMEfidLarlFqWUCuE+X"],[2],[16],3]],[2,"b7z+jn5KNP2bWZISucxRVL",1,0],[1,0.06637491285800934,0,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[52,"pomegranate_p_piece_1",false,1,[[15,-77,[1,"71jZBFVwRJ87R3tvEt/DRw"],[44],[16],45],[55,-78,[1,"166ak6c2ZFbY/eJPgeQdkC"]],[85,false,8,-79,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"7fTHDLMaxN6aEye5eZ/BAn",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[52,"pomegranate_p_piece_2",false,1,[[15,-80,[1,"8awfh/Z2VBbpQ66I0I2XnI"],[46],[16],47],[55,-81,[1,"166ak6c2ZFbY/eJPgeQdkC"]],[85,false,8,-82,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"67kH2f605GxL/oWaMzWQMb",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[52,"pomegranate_p_piece_3",false,1,[[15,-83,[1,"48G4Iw2LNGxLeXWh5bP8SY"],[48],[16],49],[55,-84,[1,"166ak6c2ZFbY/eJPgeQdkC"]],[85,false,8,-85,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"99zYwn7w5MA7eiiQ2HZ4Ss",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[52,"pomegranate_p_piece_4",false,1,[[15,-86,[1,"3950Ku02xErre/RVWfDK6R"],[50],[16],51],[55,-87,[1,"166ak6c2ZFbY/eJPgeQdkC"]],[85,false,8,-88,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"12E/Z1XidOAZ7ErMbN8tds",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[52,"pomegranate_p_piece_5",false,1,[[15,-89,[1,"aarw7/lVBDRLr5nqJnmNR7"],[52],[16],53],[55,-90,[1,"166ak6c2ZFbY/eJPgeQdkC"]],[85,false,8,-91,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"0a6y7A7b9GwKkl33dZktcG",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[52,"pomegranate_p_piece_6",false,1,[[15,-92,[1,"a1qfwo9LtPDomHBGErB2xl"],[54],[16],55],[55,-93,[1,"166ak6c2ZFbY/eJPgeQdkC"]],[85,false,8,-94,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"0cGFPSBDxEur6DvyJlMoOY",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[52,"pomegranate_p_piece_7",false,1,[[15,-95,[1,"26ziI2z4FMaJ+8dlQn/kMM"],[56],[16],57],[55,-96,[1,"166ak6c2ZFbY/eJPgeQdkC"]],[85,false,8,-97,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"b3iArd7bVBObStHAr34lXq",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[52,"pomegranate_p_piece_8",false,1,[[15,-98,[1,"051xNubo1MUZwyGhR7FxXN"],[58],[16],59],[55,-99,[1,"166ak6c2ZFbY/eJPgeQdkC"]],[85,false,8,-100,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"ccfQePrh5Jr7UDB0B+h6he",1,0],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[51,0,{},18,[53,"21VjHvuN9GNI9gCaRF+WeF",-101,[69,"1fQ8PhMOlDL6Tg2c27orrl",1,[[10,"particle_pomeTrailGlow",["_name"],19],[7,["_lpos"],19,[1,0,0,0]],[7,["_lrot"],19,[3,0,0,0,1]],[7,["_euler"],19,[1,0,0,0]]]],0]],[51,0,{},18,[53,"21VjHvuN9GNI9gCaRF+WeF",-102,[69,"0075SX3gJIpaYytsYxTZ6g",1,[[17,"particle_pomeTrail",["_name"],[4,["21VjHvuN9GNI9gCaRF+WeF"]]],[38,["_lpos"],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[1,0,0,0]],[38,["_lrot"],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[3,0,0,0,1]],[38,["_euler"],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[1,0,0,0]]]],1]],[51,0,{},2,[53,"21VjHvuN9GNI9gCaRF+WeF",-103,[69,"938DTXcoJFF6NNAWpXwcIN",1,[[10,"particle_pomeGibTrail",["_name"],10],[7,["_lpos"],10,[1,0,0,0]],[7,["_lrot"],10,[3,0,0,0,1]],[7,["_euler"],10,[1,0,0,0]],[7,["_lscale"],10,[1,0.5,0.5,0.5]]]],4]],[51,0,{},3,[53,"21VjHvuN9GNI9gCaRF+WeF",-104,[69,"70DERSe2BCf7XLbj8HMELw",1,[[10,"particle_pomeGibTrail",["_name"],11],[7,["_lpos"],11,[1,0,0,0]],[7,["_lrot"],11,[3,0,0,0,1]],[7,["_euler"],11,[1,0,0,0]],[7,["_lscale"],11,[1,0.5,0.5,0.5]]]],9]],[51,0,{},4,[53,"21VjHvuN9GNI9gCaRF+WeF",-105,[69,"53XxyCTktPaZ4TRYh/d7FV",1,[[10,"particle_pomeGibTrail",["_name"],12],[7,["_lpos"],12,[1,0,0,0]],[7,["_lrot"],12,[3,0,0,0,1]],[7,["_euler"],12,[1,0,0,0]],[7,["_lscale"],12,[1,0.5,0.5,0.5]]]],14]],[51,0,{},5,[53,"21VjHvuN9GNI9gCaRF+WeF",-106,[69,"f1pXAN4vBKSp7QrRYhazmO",1,[[10,"particle_pomeGibTrail",["_name"],13],[7,["_lpos"],13,[1,0,0,0]],[7,["_lrot"],13,[3,0,0,0,1]],[7,["_euler"],13,[1,0,0,0]],[7,["_lscale"],13,[1,0.5,0.5,0.5]]]],19]],[51,0,{},6,[53,"21VjHvuN9GNI9gCaRF+WeF",-107,[69,"c9nTds3H9Mpa8dpFzoKdwg",1,[[10,"particle_pomeGibTrail",["_name"],14],[7,["_lpos"],14,[1,0,0,0]],[7,["_lrot"],14,[3,0,0,0,1]],[7,["_euler"],14,[1,0,0,0]],[7,["_lscale"],14,[1,0.5,0.5,0.5]]]],24]],[51,0,{},7,[53,"21VjHvuN9GNI9gCaRF+WeF",-108,[69,"07/23uNe5NopWMmP+qkWd9",1,[[10,"particle_pomeGibTrail",["_name"],15],[7,["_lpos"],15,[1,0,0,0]],[7,["_lrot"],15,[3,0,0,0,1]],[7,["_euler"],15,[1,0,0,0]],[7,["_lscale"],15,[1,0.5,0.5,0.5]]]],29]],[51,0,{},8,[53,"21VjHvuN9GNI9gCaRF+WeF",-109,[69,"5aRokwlVxCK6ojrPcoKfow",1,[[10,"particle_pomeGibTrail",["_name"],16],[7,["_lpos"],16,[1,0,0,0]],[7,["_lrot"],16,[3,0,0,0,1]],[7,["_euler"],16,[1,0,0,0]],[7,["_lscale"],16,[1,0.5,0.5,0.5]]]],34]],[51,0,{},9,[53,"21VjHvuN9GNI9gCaRF+WeF",-110,[69,"f6v8B0N2dEb5bgTc1Ydxco",1,[[10,"particle_pomeGibTrail",["_name"],17],[7,["_lpos"],17,[1,0,0,0]],[7,["_lrot"],17,[3,0,0,0,1]],[7,["_euler"],17,[1,0,0,0]],[7,["_lscale"],17,[1,0.5,0.5,0.5]]]],39]],[51,0,{},1,[53,"21VjHvuN9GNI9gCaRF+WeF",-111,[69,"74KZ2y7HhCMrWisGxAEkXJ",1,[[17,"particle_juicePomeBurst",["_name"],[4,["21VjHvuN9GNI9gCaRF+WeF"]]],[38,["_lpos"],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[1,0,0,0]],[38,["_lrot"],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[3,0,0,0,1]],[38,["_euler"],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[1,0,0,0]],[17,false,["_active"],[4,["21VjHvuN9GNI9gCaRF+WeF"]]]]],60]]],0,[0,-1,28,0,-2,29,0,-3,30,0,-4,31,0,-5,32,0,-6,33,0,-7,34,0,-8,35,0,-9,36,0,-10,37,0,-11,38,0,3,1,0,0,1,0,0,1,0,0,1,0,-1,18,0,-2,2,0,-3,3,0,-4,4,0,-5,5,0,-6,6,0,-7,7,0,-8,8,0,-9,9,0,-10,20,0,-11,21,0,-12,22,0,-13,23,0,-14,24,0,-15,25,0,-16,26,0,-17,27,0,-18,38,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,30,0,0,3,0,0,3,0,0,3,0,0,3,0,-1,31,0,0,4,0,0,4,0,0,4,0,0,4,0,-1,32,0,0,5,0,0,5,0,0,5,0,0,5,0,-1,33,0,0,6,0,0,6,0,0,6,0,0,6,0,-1,34,0,0,7,0,0,7,0,0,7,0,0,7,0,-1,35,0,0,8,0,0,8,0,0,8,0,0,8,0,-1,36,0,0,9,0,0,9,0,0,9,0,0,9,0,-1,37,0,0,18,0,-1,28,0,-2,29,0,0,20,0,0,20,0,0,20,0,0,21,0,0,21,0,0,21,0,0,22,0,0,22,0,0,22,0,0,23,0,0,23,0,0,23,0,0,24,0,0,24,0,0,24,0,0,25,0,0,25,0,0,25,0,0,26,0,0,26,0,0,26,0,0,27,0,0,27,0,0,27,0,3,28,0,3,29,0,3,30,0,3,31,0,3,32,0,3,33,0,3,34,0,3,35,0,3,36,0,3,37,0,3,38,0,6,1,111],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[12,12,-1,4,12,-1,4,18,20,12,-1,4,18,20,12,-1,4,18,20,12,-1,4,18,20,12,-1,4,18,20,12,-1,4,18,20,12,-1,4,18,20,12,-1,4,18,20,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,12],[246,247,6,248,19,6,20,15,16,19,6,20,15,16,19,6,20,15,16,19,6,20,15,16,19,6,20,15,16,19,6,20,15,16,19,6,20,15,16,19,6,20,15,16,6,249,6,250,6,251,6,252,6,253,6,254,6,255,6,256,257]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"alphaThreshold":11},"mainColor",8,[4,4278245119],"secondColor",8,[4,4289131519],"thirdColor",8,[4,4281644524],"fourthColor",8,[4,4281644524]]],11]]],0,0,[0],[8],[3]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[76,5]],[[[19,"homescreen"],[68,"homescreen",33554432,[-13,-14,-15],[[6,-2,[1,"ab5k3QUrtFVq67r72GSN5i"],[5,1280,768]],[131,45,100,100,-3,[1,"c3dbp1DktEUbst6669nj8e"]],[98,-4,[1,"768mdzRfhN/IATqMuDbhc6"],[49,50]],[337,-12,[1,"93ISLoJQxD+4BEI4q0rdbQ"],-11,-10,-9,-8,-7,-6,-5]],[2,"32dj/DIk9AG72d/xJI4jQG",-1,0]],[79,"UI_bawahHome",false,33554432,1,[-18,-19,-20,-21,-22,-23,-24,-25],[[6,-16,[1,"13x0enezZD87B/DtM1+C22"],[5,1280,768]],[317,42,768,100,-17,[1,"01D+9UxI1PJqrv+sodjSnV"]]],[2,"1281oAtlNDC651T+/D1hut",1,0]],[166,"UI_atasHome",false,33554432,1,[-28,-29,-30,-31],[[269,-26,[1,"8eIbHX7QxDhoQhalDrOmww"],[0,0.5,1]],[318,41,590,590,100,-27,[1,"905e4sWVFMXJQbMCQnThNL"]]],[2,"d0k7s5s2hAoYbEoi+OQQc/",1,0],[1,0,384,0]],[49,"PlayerInfo",33554432,3,[-34,-35,-36,-37,-38,-39],[[21,-32,[1,"b79CpPhalEYo8jBtv7B6p7"],[5,200,200],[0,1,1]],[319,33,-590,-33,[1,"98zULWU/tBI7ts3UNg7tDj"]]],[2,"2bjVxMa6FGnoQPLAm7x1j+",1,0],[1,640,0,0]],[67,"levelLabel",33554432,4,[-42,-43,-44,-45,-46,-47],[[34,-40,[1,"91ky9zmEZKV6BC7LWHuKeT"]],[223,1,485.149,60.206,-41,[1,"69+EA0iJJF9oh+2DetxDsJ"]]],[2,"1fMv5Ew5lKCoLjEmURAK/c",1,0],[1,-240,-90.206,0],[1,0.6000000000000001,0.6000000000000001,1]],[67,"ButtonMissions",33554432,4,[-52,-53,-54],[[6,-48,[1,"57rQceYR1MSZ4H5NBQH4qF"],[5,250,80]],[94,0,-49,[1,"716GUax/VBoInSnMOkFvUk"],31],[80,3,0.9,-50,[1,"e8wFxzA4hE24Qbm0OXmsUy"],[[160,"19cfeEkEAtPR4ufZJYYgPzW","clickButton","mission",1]],32],[145,1,162.015,-51,[1,"acy60ebTBEtYakljwcN4HK"]]],[2,"17lXVB4/FJbZe+Px5NRNzg",1,0],[1,-236.406,-193.21499999999997,0],[1,0.78,0.78,1]],[135,"TagGreenClaim",false,33554432,6,[-58],[[6,-55,[1,"15mIcsQshG2J0Cl0wIYXg+"],[5,118,46]],[18,-56,[1,"c59ttUFm5NfKmlL1047ARa"],23],[97,true,-57,[1,"d59vA2xBhGUbsAOye6YONG"],[24],25]],[2,"ecy3M18PJPTq+oWSOYnIgV",1,0],[1,98.627,39.45,0],[1,0.8,0.8,1]],[49,"button_settings",33554432,2,[-62,-63,-64],[[6,-59,[1,"f9LVsGr9NIo4UxpIGLxYrD"],[5,296,296]],[133,"Kiwifruit","move_to_setting",-60,[1,"87eJ8O2j9NYa1f5Y5SRGrZ"]],[161,20,-20.67700000000002,-184.011,-61,[1,"6cLRTqSB9Je79Ur+61PD4C"]]],[2,"3bsiSdJq5Kn5j4r67KJtTv",1,0],[1,-184.011,-256.677,0]],[67,"button_senseiSwags",33554432,2,[-68,-69,-70],[[6,-65,[1,"81AcxhSvlNu6vIGMrvvO+u"],[5,296,296]],[133,"Mango","move_to_senseiswag",-66,[1,"7aNIpNVRdLNYzsCpAgNXNA"]],[161,20,23.722999999999985,184.011,-67,[1,"b5YXXUBDZPH5GVBLl2OWV3"]]],[2,"28eOPDAFtLKrzlqnm/9CEh",1,0],[1,184.011,-256.677,0],[1,0.7,0.7,0.7]],[67,"button_Classic",33554432,2,[-74,-75,-76],[[6,-71,[1,"72TFHhb/dLWq+uhyOxGbRH"],[5,200,200]],[320,20,177.138,-72,[1,"deCvL3++FNbbJrn38+IJWr"]],[133,"Watermelon","pilih_state_classic",-73,[1,"39r6DqglFFNbFNKPQvB24e"]]],[2,"2eeAM6iKlL96gzyahZh1Ed",1,0],[1,0,-36.861999999999995,0],[1,1.7,1.7,1.7]],[67,"button_Zen",33554432,2,[-80,-81,-82],[[6,-77,[1,"a6ehXsnmBEBJBEhLMWlT9x"],[5,200,200]],[161,20,177.138,-372.934,-78,[1,"8bYuIXTYZNhIK5kOKYjRyY"]],[133,"AppleRed","pilih_state_zen",-79,[1,"67gIZ+9QxGM4zQXvGkBfat"]]],[2,"35Qz9b6F1Ko6j83CbMeh8X",1,0],[1,-372.934,-36.861999999999995,0],[1,1.7,1.7,1.7]],[67,"button_Arcade",33554432,2,[-86,-87,-88],[[6,-83,[1,"7ah9N2+aBOrLbpPD2pzkfQ"],[5,200,200]],[161,20,177.138,372.934,-84,[1,"70fylmQFBHVpFilstxNq+N"]],[133,"Banana","pilih_state_arcade",-85,[1,"70hrUPBo1EeZ2L//YX554E"]]],[2,"26ZWj+v+1MzLNZsrsEuQpA",1,0],[1,372.934,-36.861999999999995,0],[1,1.7,1.7,1.7]],[67,"title",33554432,3,[-91,-92,-93],[[34,-89,[1,"85lNynx8dGfIesf4WxcBIj"]],[321,9,-221.033,95.269,-223.533,-90,[1,"b5L0tHTe9GIaoN1drbpCpY"]]],[2,"04/aK6TthM14tAHsLe0T8Y",1,0],[1,-223.53300000000002,-142.769,0],[1,0.95,0.95,1]],[135,"ButtonLeaderboards",false,33554432,3,[-98],[[6,-94,[1,"4eOgdkk1hOWp8GeonrC4oB"],[5,250,80]],[94,0,-95,[1,"b6o+qRDXNMI75bA0LiEhwr"],7],[80,3,0.9,-96,[1,"92j1yH1wdKgJrAZVrbdZXz"],[[160,"19cfeEkEAtPR4ufZJYYgPzW","clickButton","leaderboard",1]],8],[145,1,248.731,-97,[1,"d1ttsytLZJcaNBcWFjkG/5"]]],[2,"535xuJTehNnrEL9ksSwXU7",1,0],[1,-300.282,-279.931,0],[1,0.78,0.78,1]],[135,"NotifNewMission",false,33554432,6,[-102],[[6,-99,[1,"91AoUasOdDu7/JGAZdA5Z4"],[5,66,70]],[18,-100,[1,"25qCeZ2IBC3Lb5/rxgiX/U"],28],[97,true,-101,[1,"f84FiFSfpDtJ88s5wA4X4X"],[29],30]],[2,"dbbFVSJRBI65xQMS988pp6",1,0],[1,119.747,27.964,0],[1,0.7,0.7,1]],[135,"button_soloPlay",false,33554432,2,[-105,-106,-107],[[6,-103,[1,"d6bz/uCeJGpZYs/LPbHIpJ"],[5,296,296]],[133,"Watermelon","solo_mode_slash",-104,[1,"bb/mZqP8tJRYB1O9lWEzu+"]]],[2,"8fZa3iQ4FG4qRh9p3dJdr+",1,0],[1,-12.367,-108.041,0],[1,1.4,1.4,1]],[193,"text_gameplay",false,33554432,1,[[6,-108,[1,"ccMBynCR1FVIMPb54l46mI"],[5,187.75,54.4]],[271,"NEW GAME",40,false,-109,[1,"6fMGIAyohLk6CKmSf1o3JE"],0],[278,-110,[1,"b12WRQfRtEvI7NFrgAX/z0"]],[338,null,null,-111,[1,"bbS82ypmJAurDVQrK4cXhs"]]],[2,"e94uzPHoVMWIdTLsRnouCE",1,0],[1,-506.854,222.10199999999992,0]],[30,"text_leaderboards",33554432,14,[[6,-112,[1,"b5d3XBi1pNrp/VjE/2yreH"],[5,170,55]],[74,"Weekly\nLeaderboards",23,30,35,2,false,false,-113,[1,"77pwNJdxNDyY0RL0fagKt/"],5,6],[140,0,-114,[1,"ccEV2vtvBDSLsKUfTGFrEq"],[4,4278192944],[0,0,-2]],[25,4,-115,[1,"cakzqZJ8xCrrrUtQj5EV6q"],[4,4282729797]]],[2,"7c0cxsy21MLJ7lv6BfeOFV",1,0],[1,0,4.432,0],[1,1.1111111111111112,1.1111111111111112,1]],[20,"text_LevelAngka",33554432,5,[[21,-116,[1,"1b0awrqu1NNanxZxYxTqVn"],[5,100,150],[0,1,0.5]],[99,"99",2,80,80,0,2,false,false,-117,[1,"0bWncdBlJDiILyfhNRXCKl"],15,16],[25,5,-118,[1,"aaxLJvzbNJeoJJsY7Ldaog"],[4,4285015669]]],[2,"9bHeDTastCtaIBO8tg9HW+",1,0],[1,-145,-25.543,0]],[259,"text_playerName",33554432,4,[[[6,-119,[1,"0cA6eDN/tHkZxZYbVPVVRR"],[5,360,60]],-120,[279,4,-121,[1,"0fuHopRvxIpaGXEXCri9T2"]],[281,5,-122,[1,"80MJz4YFdIBrCD27PMpfsP"],[0,0,0]]],4,1,4,4],[2,"eetryjQYVKM40ZGbr9+s3/",1,0],[1,-240,-49.085,0],[1,0.7000000000000001,0.7000000000000001,1]],[195,"btn_ListUp",false,33554432,2,[[6,-123,[1,"36lfrMCfNFcZdWiEM+jQFj"],[5,38,50]],[18,-124,[1,"c29Yg88WZIz7JFZujonZGo"],45],[80,3,0.9,-125,[1,"14fOmSlD9A07zT6AhvtpFF"],[[160,"19cfeEkEAtPR4ufZJYYgPzW","clickButton","list_up",1]],46],[224,16,340.433,-126,[1,"8cMD8VdSFPeon7eHgujf1b"]]],[2,"63SJFSrA5PjrA3M1BTe/c6",1,0],[1,340.433,326.739,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,1.5,1.5,1],[1,0,0,90]],[195,"btn_ListDown",false,33554432,2,[[6,-127,[1,"dbVH8illxKvojLE4kFnEcp"],[5,39,50]],[18,-128,[1,"a8Xd2n8AVHNKr4PlcZtXXb"],47],[80,3,0.9,-129,[1,"2cew/vTUhLo5p43XgjZwvE"],[[160,"19cfeEkEAtPR4ufZJYYgPzW","clickButton","list_down",1]],48],[224,16,340.433,-130,[1,"d90THHxIJP8rIj0EGKbayv"]]],[2,"aapm77hudHE7oT1H8MOvPy",1,0],[1,340.433,-250.823,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,1.5,1.5,1],[1,0,0,90]],[30,"titleArea",33554432,3,[[21,-131,[1,"01FMn8doJEjY8/MvLvYCvl"],[5,640,179],[0,0.5,1]],[59,0,-132,[1,"ebxJa7oQNLuKFQjyBOXqrw"],[4,1509949439],1],[322,41,-622,-622,-117.475,640,-133,[1,"98BU8eSUxDyqHp82Szbyys"],3]],[2,"42b8tqlCBJw6lwvZdlIBMR",1,0],[1,0,117.475,0],[1,2.1,2.2,1]],[30,"hbplus_w_straight",33554432,13,[[6,-134,[1,"6c/0OP3GpJtJVaCeebi7NK"],[5,400,67]],[18,-135,[1,"24oBs0ULJL8rvXP1YhOChT"],2],[323,9,226.03447368421055,-42.03026315789474,-136,[1,"e4rTAcGbRPa7sDAkmjKiQ5"]]],[2,"6d/Cjx9PxF7J8U4Jy3c6u/",1,0],[1,260.245,77.925,0],[1,0.42105263157894735,0.42105263157894735,1]],[196,"LogoFruitNew",33554432,13,[[6,-137,[1,"be2QkEUchHZ5hW6Ibqk9C9"],[5,512,245]],[18,-138,[1,"38gUk32XlN7JqgwW95PC0A"],3],[225,false,1,-7.12190637443803,-139,[1,"54HckPwM5HK6mjmxPm7Evp"],3]],[2,"71eqj2O+FKz6woRZPTxPkK",1,0],[1,-183.696,18.796,0],[3,0,0,0.003263759906869843,0.9999946739214516],[1,0.85,0.85,1],[1,0,0,0.374]],[196,"LogoNinjaNew",33554432,13,[[6,-140,[1,"55tIMNa1VJtYu08tx+UOjZ"],[5,492,205]],[18,-141,[1,"91dtnP2epMjo2VL6jXpH1q"],4],[225,false,1,57.59400000000005,-142,[1,"46thiPORZFdJpBEQ5CyiSK"],3]],[2,"8asFtUMLJPJIn9SlSCCw05",1,0],[1,205.918,-8.892,0],[3,0,0,0.003263759906869843,0.9999946739214516],[1,0.7,0.7,1],[1,0,0,0.374]],[20,"XPBarFill_transparant",33554432,5,[[21,-143,[1,"e1Nuk4URZKdafiMSBcmdGj"],[5,400,16],[0,0,0.5]],[218,1,0,1,-144,[1,"2ewaOcmw9DQLn5ll5BZZ9i"],[4,2113929215],13]],[2,"a6uihuEOVBgKPWx9WZbHhU",1,0],[1,-127.48,-50.19,0]],[20,"XPBarFill",33554432,5,[[21,-145,[1,"d4PQ4whtJAQ4/x2YW99yvn"],[5,400,16],[0,0,0.5]],[157,1,0,1,-146,[1,"62g3QnwcJCyKhbxnkT2imx"],14]],[2,"16fn56+2NNO4QoW3zc4z/4",1,0],[1,-127.48,-50.19,0]],[30,"text_lvl",33554432,5,[[21,-147,[1,"f8/98BSJxJo6pvxJ+SyaW2"],[5,150,50],[0,0,0.5]],[99,"Level",0,35,35,0,2,false,false,-148,[1,"01ztGZc29EOKlK5UcMoSK9"],17,18],[207,-149,[1,"3cxrYw5QVAvYDJpmgtS7zM"],[4,4282729797]]],[2,"68q7PwPRVBCobFV7UMzsUD",1,0],[1,-129.633,-16.835,0],[1,1.1111111111111107,1.1111111111111107,0.9999999999999998]],[30,"text_missions",33554432,6,[[6,-150,[1,"25oChgRu1DaYMEoE1fvMQG"],[5,170,50]],[74,"Missions",30,30,0,2,false,false,-151,[1,"e3/iPZiwxEo7NCpMKMf40d"],20,21],[25,4,-152,[1,"17i3eDaOxK4Zt5/+Z0AGqZ"],[4,4278210455]]],[2,"a5Kw5DsOhOnK68TwR9oWnF",1,0],[1,0,6.408,0],[1,1.1111111111111112,1.1111111111111112,1]],[20,"text_NewMission",33554432,15,[[6,-153,[1,"39EYIlxM5CVYBlaSlAJtNm"],[5,80,80]],[74,"!",48,48,0,2,false,false,-154,[1,"cfrkI+g9lAergDnvSBEuKq"],26,27],[25,4,-155,[1,"49f49SH2tB16DVYbhI6ONn"],[4,4278210455]]],[2,"32Ejq2sTRMjKlHI12ISiUx",1,0],[1,0.802,4.789,0]],[20,"scrollback",33554432,4,[[21,-156,[1,"6eQtAVj0dCRrBV++9cGQ1x"],[5,215,180],[0,0,0.5]],[78,1,0,-157,[1,"a439l4D2lGC54YcxkzDBMf"],9]],[2,"a8jawx07BLYIecBcZfhf9S",1,0],[1,-450.675,-153.214,0]],[30,"scrollback2",33554432,4,[[21,-158,[1,"56dWx0B5VGvp8W/LyMVAQU"],[5,215,180],[0,0,0.5]],[78,1,0,-159,[1,"f4IBiLsFJM049GTTfvh/94"],10]],[2,"45iFH4dGxFGZs6jbWqB2is",1,0],[1,-25.783,-153.214,0],[1,-1,1.0000000000000002,1]],[20,"LabelSpace",33554432,5,[[21,-160,[1,"c7mCm3wOhNsbAOG8ms9tqD"],[5,600,125],[0,0,1]],[78,1,0,-161,[1,"76MGYlXLRG5LjnRzli9Zt6"],11]],[2,"b8E70V4aNISaQqzkloc9M9",1,0],[1,-290,25.607,0]],[20,"XPBarBack",33554432,5,[[21,-162,[1,"3cZoFNsJZMUIZGBEzSQ56q"],[5,400,16],[0,0,0.5]],[59,0,-163,[1,"2cvoh5ouFMdLvwfPit+MYE"],[4,4278190080],12]],[2,"e5AW2b2m1Pybgvm/V2sN99",1,0],[1,-127.48,-50.19,0]],[30,"headerProfileWood",33554432,4,[[6,-164,[1,"6bYMj12MNJNYmE7rvYW0Te"],[5,610,91]],[78,1,0,-165,[1,"1fzKPdt0pM57HWL4BQw+lD"],19]],[2,"bedyavph5Hn7ovOYzgQqIJ",1,0],[1,-238.229,-60.049,0],[1,0.7000000000000002,0.7000000000000002,1]],[20,"text_claim",131072,7,[[6,-166,[1,"acqLwnbjhHSbwe3u3otYEK"],[5,90,56.4]],[117,"Claim!",25,25,0,2,false,false,-167,[1,"0eV+eogOZDcZmzt/NbcwCr"],[4,4278217525],22]],[2,"85zU64xH1BTIARrm4Tz5bn",1,0],[1,-5.257,2.797,0]],[30,"FruitRingShadow",33554432,16,[[6,-168,[1,"80mm7wKQFGWapmWf+Jl7m0"],[5,250,250]],[18,-169,[1,"d5dzxj6RZEMaKP/RSMOE5F"],33]],[2,"ca7DOMjuZGCZWtGlp5GIGZ",1,0],[1,2.521,-5.338,0],[1,1.25,1.25,1]],[28,"ring",33554432,16,[[6,-170,[1,"74I5b8Ys5G96f8isay1XW2"],[5,296,296]],[18,-171,[1,"45dDIkGPNMDK1njjvHxPku"],34]],[2,"46AteJ4dVAl68os/2PN0eM",1,0]],[30,"FruitRingShadow",33554432,8,[[6,-172,[1,"65hRCJegRCzpSh/24ZOhob"],[5,250,250]],[18,-173,[1,"b1uAzTYeFJg6S1DDfhFgAE"],35]],[2,"07nCpHbbxJdZMn40scrUqw",1,0],[1,6,-2.5,0],[1,0.85,0.85,1]],[28,"ring",33554432,8,[[6,-174,[1,"9dIFwcZ4dMfqP/t8eBoJ9k"],[5,203,203]],[18,-175,[1,"86aRv16MVHa5yZvg+5ad2w"],36]],[2,"0deiaQHYNNR5yX42SU2juy",1,0]],[30,"FruitRingShadow",33554432,9,[[6,-176,[1,"f0uMK5FZZEWISba2gGwGUy"],[5,250,250]],[18,-177,[1,"98x04g7zZEebApOpNGur7C"],37]],[2,"03szf84GBMY5hgDn9Gk36e",1,0],[1,6,-2.5,0],[1,1.2,1.2,1]],[28,"ring",33554432,9,[[6,-178,[1,"95pdVJE25It5F013rqVIOB"],[5,292,292]],[18,-179,[1,"f8gItLZ+pH3qx9UTg+kpkh"],38]],[2,"18qQ2ddVZF5oJKfY/ovjtK",1,0]],[30,"FruitRingShadow",33554432,10,[[6,-180,[1,"52RAyG/UhI0YKf4Bg67Tgl"],[5,250,250]],[18,-181,[1,"e4Ut8BWR1FlIoNVbj5k2kc"],39]],[2,"5dfp5uSINF8aIBBCprMYKC",1,0],[1,3.531,-2.5,0],[1,0.7,0.7,1]],[87,"ring",33554432,10,[[6,-182,[1,"264ZhYyHBE0Yxhzy4TiOop"],[5,290,289]],[18,-183,[1,"bd9ou89MxLOIkf8UwOwejl"],40]],[2,"134chu59JIBqF68l/qq62Z",1,0],[1,0.58,0.58,1]],[30,"FruitRingShadow",33554432,11,[[6,-184,[1,"83JAnQj8ZMvbFddMazTLQr"],[5,250,250]],[18,-185,[1,"f3v63ylitPlqe6HaIjjy8j"],41]],[2,"914wnV/HZFHr0BX8asPebx",1,0],[1,3.531,-2.5,0],[1,0.7,0.7,1]],[87,"ring",33554432,11,[[6,-186,[1,"4a8Des9CBIxZIwRCxr6Kg/"],[5,290,289]],[18,-187,[1,"86bOD7cgVLL7q8MhwPjc8j"],42]],[2,"32rKT6DSVKPLyNCTKz06hU",1,0],[1,0.58,0.58,1]],[30,"FruitRingShadow",33554432,12,[[6,-188,[1,"45UGqurtRAC57jSbdwCsS5"],[5,250,250]],[18,-189,[1,"2cQFU65EBEXYvf+tnSbRwn"],43]],[2,"4daAt1FItJMbTHPkhTRIcG",1,0],[1,3.531,-2.5,0],[1,0.7,0.7,1]],[87,"ring",33554432,12,[[6,-190,[1,"1e+Ud/kuhCdpuU5xVVNYzg"],[5,290,289]],[18,-191,[1,"10+l7kuZFEN5HIxwe9yhKw"],44]],[2,"476ay83qZK85n5gAkTjJDN",1,0],[1,0.58,0.58,1]],[272,"Player Info",40,0,2,false,false,20,[1,"b558AJ7v1KCLI3RGkLWbrX"]],[87,"buttonFruit",33554432,16,[[34,-192,[1,"11hj29qm1Ch5HVmP5HgsAD"]]],[2,"b8TOcYeaJEbKQO8lE2hn30",1,0],[1,1.25,1.25,1.25]],[87,"buttonFruit",33554432,8,[[34,-193,[1,"9f9wSZxuBABanp72pSFSBi"]]],[2,"43JOCim7BB5Yczwz9KXpWr",1,0],[1,0.8,0.8,0.8]],[87,"buttonFruit",33554432,9,[[34,-194,[1,"dcWz/bD7xLwZSDjvCpbULH"]]],[2,"9aGwv5l5xOGInABptT7Xn2",1,0],[1,0.9,0.9,0.9]],[87,"buttonFruit",33554432,10,[[34,-195,[1,"64OBREx4ZFhbWgsKZ7V9E7"]]],[2,"d6YwVzbMFH24vEJTDACzuL",1,0],[1,0,0,0]],[87,"buttonFruit",33554432,11,[[34,-196,[1,"5f0KckmNJC4LtTdOrqPc6u"]]],[2,"0aVDOF8e9HOLn7nhrjguE6",1,0],[1,0,0,0]],[87,"buttonFruit",33554432,12,[[34,-197,[1,"25yHUSqHlPw5gybNptIXLI"]]],[2,"03uoyhtgVM7pnGkFVDnsDU",1,0],[1,0,0,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,32,7,0,33,15,0,34,50,0,35,7,0,36,28,0,37,27,0,38,19,0,0,1,0,-1,17,0,-2,3,0,-3,2,0,0,2,0,0,2,0,-1,16,0,-2,8,0,-3,9,0,-4,10,0,-5,11,0,-6,12,0,-7,21,0,-8,22,0,0,3,0,0,3,0,-1,23,0,-2,13,0,-3,14,0,-4,4,0,0,4,0,0,4,0,-1,32,0,-2,33,0,-3,5,0,-4,36,0,-5,20,0,-6,6,0,0,5,0,0,5,0,-1,34,0,-2,35,0,-3,27,0,-4,28,0,-5,19,0,-6,29,0,0,6,0,0,6,0,0,6,0,0,6,0,-1,30,0,-2,7,0,-3,15,0,0,7,0,0,7,0,0,7,0,-1,37,0,0,8,0,0,8,0,0,8,0,-1,40,0,-2,41,0,-3,52,0,0,9,0,0,9,0,0,9,0,-1,42,0,-2,43,0,-3,53,0,0,10,0,0,10,0,0,10,0,-1,44,0,-2,54,0,-3,45,0,0,11,0,0,11,0,0,11,0,-1,46,0,-2,55,0,-3,47,0,0,12,0,0,12,0,0,12,0,-1,48,0,-2,56,0,-3,49,0,0,13,0,0,13,0,-1,24,0,-2,25,0,-3,26,0,0,14,0,0,14,0,0,14,0,0,14,0,-1,18,0,0,15,0,0,15,0,0,15,0,-1,31,0,0,16,0,0,16,0,-1,38,0,-2,39,0,-3,51,0,0,17,0,0,17,0,0,17,0,0,17,0,0,18,0,0,18,0,0,18,0,0,18,0,0,19,0,0,19,0,0,19,0,0,20,0,-2,50,0,0,20,0,0,20,0,0,21,0,0,21,0,0,21,0,0,21,0,0,22,0,0,22,0,0,22,0,0,22,0,0,23,0,0,23,0,0,23,0,0,24,0,0,24,0,0,24,0,0,25,0,0,25,0,0,25,0,0,26,0,0,26,0,0,26,0,0,27,0,0,27,0,0,28,0,0,28,0,0,29,0,0,29,0,0,29,0,0,30,0,0,30,0,0,30,0,0,31,0,0,31,0,0,31,0,0,32,0,0,32,0,0,33,0,0,33,0,0,34,0,0,34,0,0,35,0,0,35,0,0,36,0,0,36,0,0,37,0,0,37,0,0,38,0,0,38,0,0,39,0,0,39,0,0,40,0,0,40,0,0,41,0,0,41,0,0,42,0,0,42,0,0,43,0,0,43,0,0,44,0,0,44,0,0,45,0,0,45,0,0,46,0,0,46,0,0,47,0,0,47,0,0,48,0,0,48,0,0,49,0,0,49,0,0,51,0,0,52,0,0,53,0,0,54,0,0,55,0,0,56,0,6,1,197],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,50],[5,2,2,2,2,7,5,2,15,2,2,2,2,2,2,7,5,7,5,2,7,5,5,2,-1,14,7,5,2,-1,14,2,15,2,2,2,2,2,2,2,2,2,2,2,2,2,15,2,15,-1,-2,7,5],[0,258,118,259,260,8,0,43,43,28,28,45,2,46,46,42,0,8,0,77,119,0,0,261,120,120,119,0,262,121,121,122,122,29,263,29,264,29,265,29,266,29,267,29,268,123,123,124,124,269,270,271,0]],[[[19,"cont_Exp_Starfruit"],[68,"cont_Exp_Starfruit",131072,[-6,-7],[[6,-3,[1,"8dP3QQLG5NEpd3yTlXmYyb"],[5,1280,768]],[131,45,100,100,-4,[1,"4er7DmHEZDOrsywtDRrlKM"]],[100,-5,[1,"b6cGfKkOdCypJ4GnJKwB0o"],[18,19,20],21]],[138,"76iW9TfctBs7bf9cLh0LH2",-2,0,[-1]]],[166,"levelLabel",false,131072,1,[-10,-11,-12,-13,-14,-15,-16,-17,-18,-19],[[34,-8,[1,"6ckC6HLg5P7rDk76fjD9V/"]],[324,9,217.913,20.082,-200,100,-9,[1,"29bkN/xA5OA69gJaRwe9oM"]]],[2,"c5r2kEk6VKKKDsl/Rb+qNC",1,0],[1,-372.087,534,0]],[49,"StarfruitLabel",131072,1,[-22,-23,-24,-25],[[34,-20,[1,"73WNg3hdRGUrH3qAzJPT6U"]],[223,33,105,-200,-21,[1,"b5uUoyjl9Ir5QkSUWbkh1e"]]],[2,"fdtF1296xNEo+K21bvUUvQ",1,0],[1,485,534,0]],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[20,"text_LevelAngka",131072,2,[[21,-26,[1,"08Ha5D0w1E6bJQPzM+tFIB"],[5,70,60],[0,0,0.5]],[99,"1",2,60,60,0,2,false,false,-27,[1,"e3A072NIlBuKBpjcom8XZJ"],6,7],[25,3,-28,[1,"8a3HU/fvpDLK+dRbKX0CoG"],[4,4285015669]]],[2,"82TlZPsKhK0q+8UEZ+nE5e",1,0],[1,-209.23166666666668,-26.83166666666648,0]],[30,"text_lvl",131072,2,[[21,-29,[1,"862itVQONMM4SMgb27IAcY"],[5,150,50],[0,0,0.5]],[99,"Level",0,20,20,0,2,false,false,-30,[1,"39zZtIVXZEZaKhHU5iT7hk"],8,9],[207,-31,[1,"a0ie/VEk9OuaFNvAIFOiRP"],[4,4282729797]]],[2,"3dy2qSp5JDLImM+1NEn8I0",1,0],[1,-136.84999999999997,-15.804999999999836,0],[1,1.1111111111111107,1.1111111111111107,0.9999999999999998]],[49,"starfruitLabelIcon",131072,3,[-34],[[21,-32,[1,"calvlYzH9M5pbGs8JM1rmn"],[5,72,66],[0,0.5,1]],[18,-33,[1,"fdWF5QAwRLV6qDG3AVxHB3"],15]],[2,"d8Awfo5wpLd7pIqKu5tytN",1,0],[1,97.191,0,0]],[20,"text_starfruitTop",131072,3,[[21,-35,[1,"a6KfQYEwBAUbeL0KO9cHv8"],[5,137,50],[0,1,0.5]],[174,"0",2,40,0,2,false,false,-36,[1,"8eoDatIrlHfYpgo94FsJGV"],16,17],[25,3,-37,[1,"deTTV3blFKB4HvLa1KhjUM"],[4,4278210099]]],[2,"90KFvEmt9Pu774df0wSVEQ",1,0],[1,55.306,-20.779,0]],[28,"LabelSpace",131072,2,[[21,-38,[1,"6evGxNs7xEBYOQ7nUMzaOB"],[5,500,75],[0,0.5,1]],[78,1,0,-39,[1,"7ckv592EhBi7t/wKEA9FoA"],0]],[2,"631r9/f1dLxKf2LtUsiUzn",1,0]],[20,"starfruitLabelEdge",131072,2,[[21,-40,[1,"55llBtcbxI/4qSCeR+gVOA"],[5,9,50],[0,0.5,1]],[118,-41,[1,"37soJtz0tCv6gqjpjgQJF2"],[4,4282203453],1]],[2,"4aM5Dz4B5L05r3EtSlTSqP",1,0],[1,-236.536,0,0]],[30,"starfruitLabelEdge-001",131072,2,[[21,-42,[1,"06vofSQxRJRKJ++GQsAgUv"],[5,9,46.04],[0,0.5,1]],[59,0,-43,[1,"3dOgYNF39CKp6s+ZypsI8z"],[4,4282203453],2]],[2,"e54ExGVkFG/p1/ExrcSHDj",1,0],[1,236.46,-45.962,0],[1,-1,-1,1]],[20,"XPBarBack",131072,2,[[21,-44,[1,"aaNhnUsdpCCIpJ0i/iyMl1"],[5,360,16],[0,0,1]],[59,0,-45,[1,"20bGinBDBFRbHZ60Vrz2h9"],[4,4278190080],3]],[2,"d8cpGubO1DHqs+TwLh1hwX",1,0],[1,-134.175,-33.873,0]],[20,"XPBarFill_transparant",131072,2,[[21,-46,[1,"2dzOaGsz9Bfp9mEMiZlnAC"],[5,20,16],[0,0,1]],[218,1,0,1,-47,[1,"b4JNWWZ6tPHbTkX0gTrjv2"],[4,2113929215],4]],[2,"1aeTScqslK4KyRNHSXBMaf",1,0],[1,-134.175,-33.873,0]],[20,"XPBarFill",131072,2,[[21,-48,[1,"01E0Y1ECdBu6AlEqctZXJ2"],[5,20,16],[0,0,1]],[157,1,0,1,-49,[1,"0aF/DorPxCIbsxBnr2IJzL"],5]],[2,"16I6hfGSNLS4rsfmKhv9tu",1,0],[1,-134.175,-33.873,0]],[167,"IconXPShuriken",false,131072,2,[[6,-50,[1,"77JdPhO21B9LwAHCsDpA/E"],[5,40,40]],[18,-51,[1,"87MAQdprFG5KkQN3Yn7Vqe"],10]],[2,"cbxdSmKsBCILRbOmxCusz/",1,0],[1,-578.872,-28.088,0],[1,1.25,1.25,1.25]],[51,0,{},2,[53,"21VjHvuN9GNI9gCaRF+WeF",-52,[69,"eaMG9vPJhPaKVOdxjMmKW0",1,[[10,"particle_EXPUp",["_name"],4],[7,["_lpos"],4,[1,-183.426,-27.896,0]],[7,["_lrot"],4,[3,0,0,0,1]],[7,["_euler"],4,[1,0,0,0]],[10,131072,["_layer"],4],[17,131072,["_layer"],[4,["16aF0uI/9J75c4dR1yapFF"]]],[10,false,["_active"],4]]],11]],[28,"starfruitLabelSpace",131072,3,[[21,-53,[1,"6f0PEWmVhCHbx20/j2J20z"],[5,200,60],[0,0.5,1]],[78,1,0,-54,[1,"36IKPpJp1KUIMz1LyLlB+m"],12]],[2,"43w6Nj74FJAZ4Jj2K+Eq4f",1,0]],[20,"starfruitLabelEdge",131072,3,[[21,-55,[1,"84bdrkVc5PTZXfg5BniZl+"],[5,9,50],[0,0.5,1]],[118,-56,[1,"b1YMzYnh5JVLxwvAznuEcw"],[4,4289045925],13]],[2,"5efYQmUkRAE6aLyqNnB3Z3",1,0],[1,-88.0870000000001,0,0]],[30,"CurrencyStarfruitIcon",131072,7,[[6,-57,[1,"aecHeep/NPjpa14ZD3kFVv"],[5,81,81]],[18,-58,[1,"17cv8NQBZJX6+jA3MCs5qo"],14]],[2,"bftOhh+I1Dz6LvmW2m9DDJ",1,0],[1,-1.421,-25.82,0],[1,0.5,0.5,1]]],0,[0,-1,16,0,3,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,-1,9,0,-2,10,0,-3,11,0,-4,12,0,-5,13,0,-6,14,0,-7,5,0,-8,6,0,-9,15,0,-10,16,0,0,3,0,0,3,0,-1,17,0,-2,18,0,-3,7,0,-4,8,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,-1,19,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,0,14,0,0,14,0,0,15,0,0,15,0,3,16,0,0,17,0,0,17,0,0,18,0,0,18,0,0,19,0,0,19,0,6,1,58],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,2,2,2,2,7,5,7,5,2,12,2,2,2,2,7,5,-1,-2,-3,14],[45,47,47,2,46,46,42,0,8,0,88,272,45,47,78,125,33,0,126,273,274,126]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["66af86/ipBiYjuIhGoh1J4"]}],[1],0,[],[],[]],[[{"name":"Ring_BlueStripes_soloPlayRE","rect":{"x":0,"y":0,"width":296,"height":296},"offset":{"x":0,"y":0},"originalSize":{"width":296,"height":296},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[275]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["66eMUgB5lJ56nndLRxzBRQ"]}],[1],0,[],[],[]],[[{"name":"kiwi","rect":{"x":0,"y":0,"width":97,"height":75},"offset":{"x":-0.5,"y":0},"originalSize":{"width":98,"height":75},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[276]],[[[19,"Bomb_purple"],[108,"Bomb_purple",[-5,-6,-7],[[203,16,false,-2,[1,"67KdewkNtMbaaU5Q0bawu8"]],[230,0.35,"reduce_timer",-3,[1,"83cKYRn0hB7IbTxYNbggVJ"]],[55,-4,[1,"7d6wLrH9FM5pMwhJZodihr"]]],[172,"9bkp9kc6JLy7ZtZG5vMZbI",[],-1,0]],[254,"particle_smoke_bombPurple",1,[-9],[-8],[2,"0bFLqRMkhM6a4Gy7XjJfcY",1,0],[1,0,0.814,-0.026]],[92,"bombOutline",1,[[15,-10,[1,"71JOgou9lBjbP1GF7C7Hw4"],[0],[16],1]],[2,"8dwwfrKwZD+r8TDcN19c/0",1,0]],[92,"bomb",1,[[15,-11,[1,"d6LwIAYmtADr3ANPQiE9/M"],[2],[16],3]],[2,"f0jQfJvyRCdZS7vbZNdNQ6",1,0]],[72,"particle_spark_bomb",2,[-12],[2,"69wNg07MpCYZeE7t5lbhQD",1,0]],[209,true,0.05,0,5,[1,"bfIeMcPktOsIa2FsvldCU4"],[[4,null],6,0],[8],[3,1],[3,1.4],[3,1],[11,3,4,6],[0],[0],[0],[0],[11,3,0.3,0.35],[0],[3,23],[0],[54,true,[33,1,[36,[[93],[12,0.5446428571428571,[4,4293935343]],[12,1,[4,4293935343]]],[[14,255,0.002232142857142857],[14,255,0.9933035714285714]]]]],[214,true,3,2,0.1,0.94,[0]],[29,true,[58,1,2,[5,[0.010256410256410256,1],[[48,2,1,-0.3695090439276486,1,-0.3695090439276486,1],[154,2,-1.4882154882154874,1,-1.4882154882154874,1]]]],[0],[0],[0]],[141,[0],[0],[0],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[90,true,[0],[0],[71,3,-0.3490658503988659]],[24,[0],[0]],[27,[0],[0],[8],[8],-13],[183,1,0,0.5,1,5]],[151,0,2,[1,"8aR3I5CMpAuIDvj/RD8WIa"],[[6,null],6,0],[8],[3,1.5],[0],[0],[0],[0],[0],[0],[0],[3,0.5],[0],[3,26],[0],[54,true,[33,1,[36,[[93],[61,0.45],[12,1,[4,4289658878]]],[[76,100],[14,0,1]]]]],[215,true,3,0.0001,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[45,0.4962962962962963,-0.5037037037037038,1,-0.5037037037037038,1]]]],[0],[0],[0]],[39,true,0,[50,2,4,[5,[0,1],[[13,2,0.11111111111111133,1,1],[13,2,0.34074074074074073,1,1]]],[5,[0,1],[[48,2,-0.1037037037037037,0.1750841750841751,1,0.1750841750841751,1],[13,2,-0.4074074074074074,1,1]]]],[50,2,7,[5,[0,1],[[9,2,0.007407407407407408],[9,2,0.007407407407407408]]],[5,[0,1],[[13,2,0.14814814814814814,1,1],[48,2,0.9481481481481483,2,1,2,1]]]],[50,2,4,[5,[0,1],[[13,2,0.07407407407407407,1,1],[13,2,0.4222222222222223,1,1]]],[5,[0,1],[[9,2,-0.11851851851851852],[9,2,-0.5111111111111111]]]],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-14],[31,1,7]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,-3,2,0,-1,7,0,-1,5,0,0,3,0,0,4,0,-1,6,0,9,6,0,9,7,0,6,1,14],[0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,10,-1,10],[277,127,278,279,79,25,280,100]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["6aASarM8FIN6tFVLn4tBKZ"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["6agH/vQZNCSqfOUlhxztYa"]}],[1],0,[],[],[]],[[{"name":"mango","rect":{"x":0,"y":0,"width":90,"height":81},"offset":{"x":-0.5,"y":0},"originalSize":{"width":91,"height":81},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[281]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4290115002],"secondColor",8,[4,4290115002],"thirdColor",8,[4,4285778563],"fourthColor",8,[4,4285778563]]],11]]],0,0,[0],[8],[3]],[[[19,"particle_juicePeach"],[73,"particle_juicePeach",[-3],[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[72,"particle_juiceSmall",1,[-4],[2,"1eGkpbHVRA7YQtVRbaS87n",1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"17+MscORlKD6npLDx1rPQ0"],[[0,null],6,0],[8],[3,0.42],[0],[0],[3,8.4],[0],[0],[0],[0],[3,0.495],[3,0.3],[0],[0],[[60,0.01,[3,44]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[70,true,1,2,0.0001,2.738,0.20671679660620837,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[0],[0],[0]],[39,true,0,[11,3,-11.7,11.7],[11,3,-3.45,3.45],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[2,null],6,0],[8],[3,1.14],[0],[0],[11,3,3.6,6.4],[0],[0],[0],[0],[3,0.77],[58,1,2.4,[5,[0,1],[[37,1,1,1,1],[45,1,1,1,1,1]]]],[0],[0],[[60,0.01,[3,15]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[83,true,1,2,0.0001,2.738,1.2217304763960306,0.20671679660620837,[0],[1,0,0,55]],[29,true,[32,1,[5,[0,0.14102564102564102,1],[[13,2,1,0.04860266743843023,1],[47,2,0.9629629629629629,-0.6339319845464617,-0.6339319845464617],[37,-1.1210613598673298,1,-1.1210613598673298,1]]]],[0],[0],[0]],[39,true,0,[11,3,-10.2,10.2],[43,3],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[48,35,48,35]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["6dACoEYK5Ij47drGoTBOzw"]}],[1],0,[],[],[]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4294964458],"secondColor",8,[4,4294958011],"thirdColor",8,[4,4294953111],"fourthColor",8,[4,4294953111]]],11]]],0,0,[0],[8],[3]],[[[19,"Starfruit_half_top_gray"],[91,"Starfruit_half_top_gray",[-4,-5],[[35,2,-2,[1,"67KdewkNtMbaaU5Q0bawu8"]],[204,-3,[1,"63u3dLfCpE34yC+k2EZI11"]]],[2,"f4jG+nL5xCW4+ZdmwYaJQO",-1,0],[1,-2.637,0,0]],[92,"StarfruitHalfTop_Outline_Locked",1,[[15,-6,[1,"88pZz21rdFtL89uR6vMR6d"],[0,1],[16],2]],[2,"9f/OXpzH9PRoW8lpAkTriQ",1,0]],[92,"StarfruitHalfTop_Locked",1,[[15,-7,[1,"3c73HzirVHKZPjLEox+FJk"],[3,4],[16],5]],[2,"f1TwncwsFPNoeDreRYRnBc",1,0]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,3,0,6,1,7],[0,0,0,0,0,0],[-1,-2,4,-1,-2,4],[128,128,282,129,129,283]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["6dxa2eyDpK2b1aJvulvwFG"]}],[1],0,[],[],[]],[[{"name":"cherry","rect":{"x":1,"y":0,"width":92,"height":82},"offset":{"x":-0.5,"y":0.5},"originalSize":{"width":95,"height":83},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[284]],[[{"base":"2,2,0,0,2,0","rgbe":false,"mipmaps":[{"front":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480_b47c0_e9a6d","back":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480_b47c0_40c10","left":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480_b47c0_8fd34","right":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480_b47c0_74afd","top":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480_b47c0_bb97f","bottom":"6f01cf7f-81bf-4a7e-bd5d-0afc19696480_b47c0_7d38f"}]}],[32],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[24,5]],[[[19,"Bomb"],[108,"Bomb",[-6,-7,-8],[[203,16,false,-3,[1,"67KdewkNtMbaaU5Q0bawu8"]],[230,0.35,"gameover",-4,[1,"83cKYRn0hB7IbTxYNbggVJ"]],[55,-5,[1,"7d6wLrH9FM5pMwhJZodihr"]]],[205,"9bkp9kc6JLy7ZtZG5vMZbI",[],-2,0,[-1]]],[51,0,{},1,[265,"21VjHvuN9GNI9gCaRF+WeF",-15,[69,"48dYYf9xxC9Jpo36WgteeH",1,[[10,"particle_smoke_bomb",["_name"],-11],[7,["_lpos"],-12,[1,0,0.814,-0.026]],[7,["_lrot"],-13,[3,0,0,0,1]],[7,["_euler"],-14,[1,0,0,0]]]],[[101,["_trailModule","_particleSystem"],-10,[4,["d95GbZc2FJspockrI2TGig"]],-9,[4,["d95GbZc2FJspockrI2TGig"]]]],4]],[4,["d95GbZc2FJspockrI2TGig"]],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[51,0,{},2,[53,"21VjHvuN9GNI9gCaRF+WeF",-16,[69,"f94cLhIU9OXYkWgNHlfxY0",2,[[17,"particle_spark_bomb",["_name"],[4,["21VjHvuN9GNI9gCaRF+WeF"]]],[38,["_lpos"],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[1,0,0,0]],[38,["_lrot"],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[3,0,0,0,1]],[38,["_euler"],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[1,0,0,0]],[10,2,["_sizeOvertimeModule","size","multiplier"],3],[10,4,["startSpeed","constantMin"],3],[10,6,["startSpeed","constantMax"],3],[10,1,["startSizeX","constant"],3],[10,1.4,["startSizeY","constant"],3]]],5]],[92,"bombOutline",1,[[15,-17,[1,"71JOgou9lBjbP1GF7C7Hw4"],[0],[16],1]],[2,"8dwwfrKwZD+r8TDcN19c/0",1,0]],[92,"bomb",1,[[15,-18,[1,"d6LwIAYmtADr3ANPQiE9/M"],[2],[16],3]],[2,"f0jQfJvyRCdZS7vbZNdNQ6",1,0]]],0,[0,-1,2,0,3,1,0,0,1,0,0,1,0,0,1,0,-1,6,0,-2,7,0,-3,2,0,16,5,0,17,5,0,1,4,0,1,4,0,1,4,0,1,4,0,3,2,0,3,5,0,0,6,0,0,7,0,6,1,18],[0,0,0,0,0,0],[-1,4,-1,4,12,12],[285,127,286,287,288,130]],[[[19,"particle_juiceKiwi"],[73,"particle_juiceKiwi",[-3],[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[72,"particle_juiceSmall",1,[-4],[2,"1eGkpbHVRA7YQtVRbaS87n",1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"17+MscORlKD6npLDx1rPQ0"],[[0,null],6,0],[8],[3,0.42],[0],[0],[3,8.4],[0],[0],[0],[0],[3,0.495],[3,0.3],[0],[0],[[60,0.01,[3,45]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[70,true,1,2,0.0001,2.738,0.20671679660620837,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[0],[0],[0]],[39,true,0,[11,3,-11.7,11.7],[11,3,-3.45,3.45],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[2,null],6,0],[8],[3,1.14],[0],[0],[11,3,3.6,6.4],[0],[0],[0],[0],[3,0.79],[58,1,2.5,[5,[0,1],[[37,1,1,1,1],[45,1,1,1,1,1]]]],[0],[0],[[60,0.01,[3,15]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[83,true,1,2,0.0001,2.738,1.2217304763960306,0.20671679660620837,[0],[1,0,0,55]],[29,true,[32,1,[5,[0,0.14102564102564102,1],[[13,2,1,0.04860266743843023,1],[47,2,0.9629629629629629,-0.6339319845464617,-0.6339319845464617],[37,-1.1210613598673298,1,-1.1210613598673298,1]]]],[0],[0],[0]],[39,true,0,[11,3,-10.2,10.2],[43,3],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[131,80,131,80]],[[[19,"Peach"],[91,"Peach",[-6,-7,-8,-9],[[84,-2,[1,"f7r2m+pX9I3JFpdQcoUgXU"]],[35,2,-3,[1,"8bKtviIbdAELX8WVNIcV8y"]],[77,0.5,-4,[1,"e0yWw4VrZLWouM30SXbfim"]],[55,-5,[1,"a9a6s5fHZDlZcgNDUd5Pd4"]]],[2,"6cIaY0NzRM4aFSFIjb16p6",-1,0],[1,-2.53,0,0]],[52,"PeachHalf2",false,1,[[15,-10,[1,"fbZT3FRcRHoqsVC19ba6Bk"],[0],[16],1],[35,8,-11,[1,"1ed8yFVl1IIbVWlRZ+Ocv8"]]],[2,"dexLBvXm1BULdhzNL6u8Hl",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[52,"PeachHalf1",false,1,[[15,-12,[1,"a1FOMzrZlGqr6lOZV8F4HY"],[6],[16],7],[35,8,-13,[1,"d0oQo53olGeZ5MIxdB0GEX"]]],[2,"b8hTBjd8lE7K0d9hCUqgI4",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[81,"PeachWhole",1,[[15,-14,[1,"10eSwib7FBzo+UgDRqDJeJ"],[2],[16],3]],[2,"3a6E1fcntJMbxcWbN3WfyJ",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[52,"PeachOutline",false,1,[[15,-15,[1,"b5YCUbcOxJgaY8M3ypnkA2"],[4],[16],5]],[2,"7eIJbx5rBBXrTjrPuZ9QHy",1,0],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,-90.00000000000003,0,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,4,0,-3,5,0,-4,3,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,5,0,6,1,15],[0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,4],[1,132,1,133,289,134,1,135]],[[[22,".bin",3791798863,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":20160,"length":3168,"count":1584,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":20160,"count":315,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4000220000743866,-0.400022029876709,-0.4096761643886566],"maxPosition",8,[1,0.4000220000743866,0.400022029876709,0.4096761643886566]]],-1],0,0,[],[],[]],[[[22,".bin",3475960855,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":18624,"length":3168,"count":1584,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":18624,"count":291,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4440220296382904,-0.4440220594406128,-0.45367616415023804],"maxPosition",8,[1,0.4440220296382904,0.4440220594406128,0.45367616415023804]]],-1],0,0,[],[],[]],[[[22,".bin",3630522691,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22080,"length":3168,"count":1584,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":22080,"count":345,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4000220000743866,-0.40002208948135376,-0.4096761643886566],"maxPosition",8,[1,0.4000220000743866,0.400022029876709,8.583068478174027e-8]]],-1],0,0,[],[],[]],[[[22,".bin",7251399,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":23552,"length":3168,"count":1584,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":23552,"count":368,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4000220000743866,-0.400022029876709,-4.241267603788401e-8],"maxPosition",8,[1,0.4000220000743866,0.400022029876709,0.4096761643886566]]],-1],0,0,[],[],[]],[[[102,"outinesMort",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_VERTEX_COLOR":true}],[[[{"metallic":0.400000005960464,"roughness":0.806901276111603},"albedoScale",8,[1,1,1,1],"emissiveScale",8,[2,1,1,1,1]]],11]]],0,0,[0],[8],[13]],[[[19,"Watermelon"],[108,"Watermelon",[-6,-7,-8,-9],[[84,-2,[1,"408iVGmnBDKrCs6Eix3z97"]],[35,2,-3,[1,"1dEe3pcvZNeJK0/wxoWE+G"]],[77,0.55,-4,[1,"d9riBELutFn6wvqNZ8QDib"]],[55,-5,[1,"bcsoQlIedKSpKGKpGxynmx"]]],[172,"4cOCTFRLJG5LVHVQ8ZYOzl",[],-1,0]],[52,"WatermelonHalf2",false,1,[[15,-10,[1,"1fpit9RMxHVIQr0aQFIKiW"],[0],[16],1],[35,8,-11,[1,"749Wz/gvRMRbKMZbyvOW7v"]]],[2,"1f/7C57JtBVIbQwnKIQrEG",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[52,"WatermelonHalf1",false,1,[[15,-12,[1,"15I1COKv9E1I15ejEhemsb"],[2],[16],3],[35,8,-13,[1,"d8FQdwA8xIgI9FdL/X3FKg"]]],[2,"672FHghsZPgJpkLK/s9Yk0",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[81,"WatermelonWhole",1,[[15,-14,[1,"b1NuhqPLJPVK3i3fmk+UhM"],[4],[16],5]],[2,"f1KsBbxPBP07bmgCpUToJV",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[52,"WatermelonOutline",false,1,[[15,-15,[1,"adgIRZwWpMwb08yTHmSdNW"],[6],[16],7]],[2,"17BAF6NENGTLkNMVSR0neO",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,5,0,6,1,15],[0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,4],[1,290,1,291,1,292,293,294]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["76DGf4d5FEC5D/OPrzWH8P"]}],[1],0,[],[],[]],[[{"name":"ButtonPause","rect":{"x":0,"y":2,"width":128,"height":124},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[295]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[296,7]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["79G2UweYhJ8YCWy31b2DFy"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["7dWo1fHbpBDqAqZNo3cNlF"]}],[1],0,[],[],[]],[[{"name":"IconTimerHand","rect":{"x":1,"y":2,"width":6,"height":20},"offset":{"x":0,"y":0},"originalSize":{"width":8,"height":24},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[297]],[[[19,"Peachy"],[91,"Peachy",[-11,-12,-13,-14,-15],[[84,-7,[1,"f7r2m+pX9I3JFpdQcoUgXU"]],[35,2,-8,[1,"8bKtviIbdAELX8WVNIcV8y"]],[77,0.5,-9,[1,"e0yWw4VrZLWouM30SXbfim"]],[55,-10,[1,"a9a6s5fHZDlZcgNDUd5Pd4"]]],[148,"6cIaY0NzRM4aFSFIjb16p6",-6,0,[[101,["_trailModule","_particleSystem"],-3,[4,["f3MnPFRTFCHaWCe/FxP92F"]],-2,[4,["f3MnPFRTFCHaWCe/FxP92F"]]],[101,["_trailModule","_particleSystem"],-5,[4,["eaKL/V/klKHrwpm0Dj1LyA"]],-4,[4,["eaKL/V/klKHrwpm0Dj1LyA"]]]],[-1]],[1,-2.53,0,0]],[51,0,{},1,[53,"3dw3L9LExMhYl5K7SezCro",-23,[69,"f5ec7tt1BNS76/8zQxRSBh",1,[[17,"particle_peachyTrail",["_name"],[4,["3dw3L9LExMhYl5K7SezCro"]]],[38,["_lpos"],[4,["3dw3L9LExMhYl5K7SezCro"]],[1,0,0,0]],[38,["_lrot"],[4,["3dw3L9LExMhYl5K7SezCro"]],[3,0,0,0,1]],[7,["_euler"],-16,[1,0,0,0]],[10,false,["_active"],-17],[10,1073741824,["_layer"],-18],[10,65536,["_layer"],-19],[10,1073741824,["_layer"],-20],[10,true,["_active"],-21],[17,true,["_enabled"],[4,["eaKL/V/klKHrwpm0Dj1LyA"]]],[10,true,["_active"],-22]]],8]],[52,"PeachyHalf2",false,1,[[15,-24,[1,"fbZT3FRcRHoqsVC19ba6Bk"],[0],[16],1],[35,8,-25,[1,"1ed8yFVl1IIbVWlRZ+Ocv8"]]],[2,"dexLBvXm1BULdhzNL6u8Hl",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[52,"PeachyHalf1",false,1,[[15,-26,[1,"a1FOMzrZlGqr6lOZV8F4HY"],[6],[16],7],[35,8,-27,[1,"d0oQo53olGeZ5MIxdB0GEX"]]],[2,"b8hTBjd8lE7K0d9hCUqgI4",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[4,["3dw3L9LExMhYl5K7SezCro"]],[81,"PeachyWhole",1,[[15,-28,[1,"10eSwib7FBzo+UgDRqDJeJ"],[2],[16],3]],[2,"3a6E1fcntJMbxcWbN3WfyJ",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[81,"PeachyOutline",1,[[15,-29,[1,"b5YCUbcOxJgaY8M3ypnkA2"],[4],[16],5]],[2,"7eIJbx5rBBXrTjrPuZ9QHy",1,0],[3,-0.7071067811865477,0,0,0.7071067811865474],[1,-90.00000000000003,0,0]],[4,["ebNXhQe2tFDrdcITKnoGwn"]],[4,["9d1v3uEi1FCopqhwu/hUNZ"]]],0,[0,-1,2,0,16,2,0,17,2,0,16,2,0,17,2,0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,6,0,-3,7,0,-4,4,0,-5,2,0,1,5,0,1,8,0,1,5,0,1,8,0,1,9,0,1,5,0,1,9,0,3,2,0,0,3,0,0,3,0,0,4,0,0,4,0,0,6,0,0,7,0,6,1,29],[0,0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,4,12],[1,132,1,133,12,134,1,135,136]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[21,5]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4280444671],"secondColor",8,[4,4278207709],"thirdColor",8,[4,4278258822],"fourthColor",8,[4,4278193563]]],11]]],0,0,[0],[8],[3]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["84jPwBRHxM0J0GwABH98qS"]}],[1],0,[],[],[]],[[{"name":"ButtonExit","rect":{"x":0,"y":0,"width":128,"height":128},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[298]],[[[22,".bin",718850041,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":23552,"length":3336,"count":1668,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":23552,"count":368,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.38216632604599,-0.39685651659965515,-0.3973426818847656],"maxPosition",8,[1,0.3224540650844574,0.39685648679733276,-0.00048614112893119454]]],-1],0,0,[],[],[]],[[[22,".bin",1163525362,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":26368,"length":3744,"count":1872,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":26368,"count":412,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.38786831498146057,-0.39685651659965515,-0.05536432936787605],"maxPosition",8,[1,0.5252382755279541,0.39685648679733276,0.3963702321052551]]],-1],0,0,[],[],[]],[[[22,".bin",4063737559,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":31104,"length":5448,"count":2724,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":31104,"count":486,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4195376932621002,-0.44084906578063965,-0.44133520126342773],"maxPosition",8,[1,0.5642512440681458,0.44084906578063965,0.4403627812862396]]],-1],0,0,[],[],[]],[[[22,".bin",2231749780,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":31104,"length":5448,"count":2724,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":31104,"count":486,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.38571828603744507,-0.39685651659965515,-0.3973426818847656],"maxPosition",8,[1,0.5252382755279541,0.39685648679733276,0.3963702321052551]]],-1],0,0,[],[],[]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[299,7]],[[[19,"Lemon"],[91,"Lemon",[-6,-7,-8,-9],[[84,-2,[1,"32LUmzBaNE1paZeonPSlcu"]],[264,-3,[1,"85ZE7+Gs5PiLtP5Ikn6IQu"]],[77,0.5,-4,[1,"cePws90yBDyJj1VOE/jX6W"]],[55,-5,[1,"3fkLcTPXtOo5QWNxR9Bynr"]]],[2,"2fw7scVBZOIZWnVeXlJgCi",-1,0],[1,-1.663,0,0]],[52,"LemonHalf2",false,1,[[15,-10,[1,"35lYyFtPlNYpWIAPiB6Ds/"],[0],[16],1],[35,8,-11,[1,"4e+WZ/aOBFLKeHSJBMELeM"]]],[2,"824lbfnQxEMJd3Reo//1NX",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[52,"LemonHalf1",false,1,[[15,-12,[1,"088rnkshxBwIZH56/FxU+a"],[2],[16],3],[35,8,-13,[1,"a7lW8o66VLP4b6mIqpowXr"]]],[2,"38E7VkR05AYLMu/zSYc/vF",1,0],[3,-0.7071068407911908,0,0,0.7071067215818992],[1,-90.00000965934633,0,0]],[81,"LemonWhole",1,[[15,-14,[1,"75EHaNr61IUaoDrui2iQg7"],[4],[16],5]],[2,"d9VTtscT1CrqTGQKS993/5",1,0],[3,-0.7071068407911903,1.0536709463188159e-8,3.1610139047705694e-8,0.7071067215818988],[1,-90.00000965934638,0.000003415094728941864,0.0000017075474364386503]],[52,"LemonOutline",false,1,[[15,-15,[1,"a2MIi7X8BNp7W5JvBQqJl5"],[6],[16],7]],[2,"5f1dW9ZXtL0IUgMJRBJzGv",1,0],[3,-0.7071068407911903,1.0536709463188159e-8,3.1610139047705694e-8,0.7071067215818988],[1,-90.00000965934638,0.000003415094728941864,0.0000017075474364386503]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,5,0,6,1,15],[0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,4],[1,300,1,301,1,302,303,304]],[[[19,"BlitzText01"],[68,"BlitzText01",8192,[-5,-6],[[34,-2,[1,"9cbm062a5HtZN5n2jXpeS6"]],[100,-3,[1,"f6P1zsBsFMGYA1FQXPuYaJ"],[6],7],[128,0,-4,[1,"adaPSGixJN+4qQNR9Sdw+Q"]]],[2,"b330N1rGJAurGuJwVync3O",-1,0]],[49,"top_textOutline",8192,1,[-12],[[6,-7,[1,"7fJv6dPXdLyLyPPVq/wbOW"],[5,238.45,64.7]],[103,"Combo blitz!",45,45,45,false,false,-8,[1,"94mZp3jCxGdoZJ1mOApQcQ"],[4,4278514165],2],[25,4,-9,[1,"b2sJ6vP7hJp6sau3Q722MH"],[4,4278514165]],[62,false,1,-10,[1,"26e3l3kitGk5fUbQ9UbNkQ"],[0,3,-3]],[63,false,1,-11,[1,"dbzNeqaCRLobsI1RoDd6Q3"],[0,3,-3]]],[2,"f2K3UCVQ9MELtKuWnOAsy2",1,0],[1,0,30,0]],[49,"bot_textOutline",8192,1,[-18],[[6,-13,[1,"56//FF4hhOoaZvcuazO+5X"],[5,58.27,64.7]],[103,"+5",45,45,45,false,false,-14,[1,"60wm115o9LK7onvmiroJHt"],[4,4278514165],5],[25,4,-15,[1,"4fD63oY79LnbIJ1BlhyiZk"],[4,4278514165]],[62,false,1,-16,[1,"92A0UhiDBCQ7tcvRjhCZ3l"],[0,3,-3]],[63,false,1,-17,[1,"78aHrJ/GZGi6Bn5U3Nv30J"],[0,3,-3]]],[2,"9dpGuTdgBEP6LJprGLhrZ0",1,0],[1,0,-30,0]],[28,"top_text",8192,2,[[6,-19,[1,"b1mzevMARF7Kcm8noV/wDk"],[5,230.45,56.7]],[64,"Combo blitz!",45,45,45,false,false,-20,[1,"94mZp3jCxGdoZJ1mOApQcQ"],0,1]],[2,"72014aGa5JKosXpIynNW0h",1,0]],[28,"bot_text",8192,3,[[6,-21,[1,"8fpKgxHFBGoZqMSUOs/4GN"],[5,50.27,56.7]],[64,"+5",45,45,45,false,false,-22,[1,"94mZp3jCxGdoZJ1mOApQcQ"],3,4]],[2,"fbNj6UVS1EDJ5567pa4wl8",1,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,4,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,-1,5,0,0,4,0,0,4,0,0,5,0,0,5,0,6,1,22],[0,0,0,0,0,0,0,0],[7,5,5,7,5,5,-1,14],[137,0,0,137,0,0,11,11]],[[[19,"AppleGreen"],[91,"AppleGreen",[-6,-7,-8,-9],[[84,-2,[1,"b0Pdkk5E9Ks7XcZXgM/i12"]],[35,2,-3,[1,"67KdewkNtMbaaU5Q0bawu8"]],[77,0.5,-4,[1,"63u3dLfCpE34yC+k2EZI11"]],[55,-5,[1,"1cV53yHVxG2IhsOENnvsjF"]]],[172,"e7YMEnrr5OBqZ/Vy7EFEXP",[],-1,0],[1,-1.396,0,0]],[123,"AppleGreenHalf1",false,1,[[15,-10,[1,"4epS88CsBMrZdKK76cQwoR"],[2],[16],3],[35,8,-11,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"d8YJ0/atVAc7lbTyu8XbpO",1,0],[1,0.0011468292213976383,0.000318600534228608,3.851859802678694e-36],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[123,"AppleGreenHalf2",false,1,[[15,-12,[1,"4flUu94o9O5p6TCdljiLkQ"],[4],[16],5],[35,8,-13,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"f7BV9XLC9HqZ12L+T2wFfb",1,0],[1,0.0011468292213976383,0.000318600534228608,3.851859802678694e-36],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[124,"AppleGreenWhole",1,[[15,-14,[1,"3aePEGYx9CDYpfHk6FaHu7"],[0],[16],1]],[2,"25y1UAqDxFYacUcXYjf3/o",1,0],[1,0.0011468292213976383,0.000318600534228608,3.851859802678694e-36],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[123,"AppleGreenOutline",false,1,[[15,-15,[1,"84nO9YwKVPWLJZAqwPKKfs"],[6],[16],7]],[2,"58NAa2UGZDdbRQTOMGAfMV",1,0],[1,0.0011468292213976383,0.000318600534228608,3.851859802678694e-36],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,4,0,-2,2,0,-3,3,0,-4,5,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,5,0,6,1,15],[0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,4],[1,305,1,306,1,307,138,308]],[[[187,"preload"],[231,"preload",[-1],[188,[232,0.5208,[2,0.242613,0.362617,0.798746,0.520833125],[2,0.241814,0.361945,0.798799,0],[2,0.519964,0.630786,0.905039,0.5208],[2,0.519544,0.630484,0.905069,0]],[341,[4,4283190348],[0,1024,1024]],[234,0,1],[189],[190]]],[168,"Canvas","86tbbCZLZI65Hu41waQs2q",1,[[343,-2]]]],0,[0,-1,2,0,0,2,0,22,1,2],[0,0],[23,24],[139,140]],[[[19,"PomegranateSliceText"],[68,"PomegranateSliceText",8192,[-3,-4,-5],[[6,-2,[1,"28tzbsDoJMzawf/ySDO1di"],[5,265.61,104.2]]],[2,"72vpMTftdGtIdF8zZEiPVw",-1,0]],[28,"text_3",8192,1,[[6,-6,[1,"1a6ZFEb6NLA5UXGe9j9bV9"],[5,265.61,104.2]],[64,"SLICE!",90,90,70,false,false,-7,[1,"4749euOclPg72vCWsRQEPc"],0,1],[25,8,-8,[1,"80Z7G3OrtDj518P8y+woVt"],[4,4289331255]],[62,false,1,-9,[1,"f5GQ93UmFLGLI97041NJ/z"],[0,3,-3]],[63,false,1,-10,[1,"66IZaOhVtAXpdGi71bZkm1"],[0,3,-3]],[129,-11,[1,"e9cznJCrJMGZ3hCKzyh2aw"]]],[2,"08srvf6dND8a/4eiG4L63z",1,0]],[28,"text_2",8192,1,[[6,-12,[1,"11hVIxAZZDJbpmQXU4czN/"],[5,265.61,104.2]],[64,"SLICE!",90,90,70,false,false,-13,[1,"edX2Awn6NBTpn24wc7DNUO"],2,3],[25,8,-14,[1,"82QNypoK5GXabZJz6blmUs"],[4,4278264490]],[62,false,1,-15,[1,"6c2XmAA9xA8It3obJ37eNk"],[0,3,-3]],[63,false,1,-16,[1,"66FA6BlKVEQYzqcTsYk1sL"],[0,3,-3]],[129,-17,[1,"9cTzkPAKBHjbcdrW7/e7bW"]]],[2,"f8DAzyCmNFmJb+GFfdIdN8",1,0]],[28,"text_1",8192,1,[[6,-18,[1,"5aBTRPeJFBxJsIQaOvna7X"],[5,265.61,104.2]],[64,"SLICE!",90,90,70,false,false,-19,[1,"2dnsYwMeZOX6Wb4wOVwNFc"],4,5],[25,8,-20,[1,"73YJZN6/xK07xtuHEubgNT"],[4,4278220969]],[62,false,1,-21,[1,"2dM7zwHBlPErydBLuczNjo"],[0,3,-3]],[63,false,1,-22,[1,"64MXcX9yxEl4a14eunf0eS"],[0,3,-3]],[129,-23,[1,"dfW1BH5iNFVLIcG9tv2C1F"]]],[2,"a7kXNnwDRKwZHdHBmh6Trb",1,0]]],0,[0,3,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,0,4,0,0,4,0,0,4,0,0,4,0,6,1,23],[0,0,0,0,0,0],[7,5,7,5,7,5],[92,0,93,0,94,0]],[[[19,"bananaSP_topLabel"],[68,"bananaSP_topLabel",33554432,[-5,-6,-7],[[21,-2,[1,"2eCoOHeIdMbqMIC5WcbhwN"],[5,216,62],[0,0.5,1]],[325,384,-3,[1,"974XMPONxGTIWJajUaBjt7"]],[98,-4,[1,"14gp3uJERAoqsH9asqhYZi"],[14,15]]],[2,"85n5HzFsZI3ag9R/QvLBAb",-1,0]],[169,"BananaDoublePointsTabBacking",false,33554432,1,[-10,-11,-12],[[21,-8,[1,"e2hvnSSRFPTLB4MaGicf1r"],[5,234,63],[0,0.5,1]],[18,-9,[1,"cbpoRjVnpOc5AYCqTLuh2X"],13]],[2,"44hLgVGAZIWYt7y2jCUH32",1,0],[1,0.95,0.95,0.95]],[169,"BananaFrenzyTabBacking",false,33554432,1,[-15,-16],[[21,-13,[1,"47lelc1QpIl5b4Bnym8Cl3"],[5,234,62],[0,0.5,1]],[18,-14,[1,"823bP4xyBKwLEfxph1+jy6"],3]],[2,"10J/E6kNdAbrz6qFf+D3oa",1,0],[1,0.95,0.95,0.95]],[169,"BananaFreezeTabBacking",false,33554432,1,[-19,-20],[[21,-17,[1,"adLRRmsA5A/6ZseTVrl8KR"],[5,232,62],[0,0.5,1]],[18,-18,[1,"4cNRtvRRFIyJTBgkt1O9tp"],7]],[2,"68DMqYKANJuKCZRATYIt1i",1,0],[1,0.95,0.95,0.95]],[20,"text_outline",33554432,3,[[6,-21,[1,"834V36ZzpBpazFoQroOk/x"],[5,150,50]],[117,"FRENZY",37,37,37,2,false,false,-22,[1,"0bsc6tD/hCaZoHpSOyz/KL"],[4,4281781759],0],[25,3,-23,[1,"8c+SnHXHBOB4apbfqZi6Su"],[4,4281781759]]],[2,"4cvgwDVIBMj7x7InzOSpBQ",1,0],[1,0,-24.366,0]],[20,"text_outline",33554432,4,[[6,-24,[1,"8d/ytMEJ1NUqlwJ6Cr2HVM"],[5,150,50]],[117,"FREEZE",37,37,37,2,false,false,-25,[1,"c2SHF1/U1GQL2iYiVrZjco"],[4,4294965956],4],[25,3,-26,[1,"97SY6uh5JF5bqnbxxU5Y9V"],[4,4294965956]]],[2,"a6Td7X0KFMBr+5QftZXtL4",1,0],[1,0,-25.64842105263142,0]],[20,"text_outline",33554432,2,[[6,-27,[1,"504wQNKEdMzpvJ/PpRS+EK"],[5,150,60.239999999999995]],[117,"DOUBLE\nPOINTS",30,30,24,3,false,false,-28,[1,"19PHD60CVB/LCBLUUBOPhl"],[4,4286199296],8],[25,3,-29,[1,"78eqPe2pFMKIQrcvubYm6d"],[4,4286199296]]],[2,"0aPD+Hz4JPRI+6Gdw4HjAN",1,0],[1,0,-26.998337950138193,0]],[20,"text",33554432,3,[[6,-30,[1,"b64Q631R1KaLYZ9mJ90Bg3"],[5,150,50]],[74,"FRENZY",37,37,37,2,false,false,-31,[1,"0crTgyptBGj7bmNSAzFZBY"],1,2]],[2,"e4LhMmpq9BsICNV/xmbkoX",1,0],[1,0,-24.366,0]],[20,"text",33554432,4,[[6,-32,[1,"d4HPStUbxC1q2SbOBiCXam"],[5,150,50]],[74,"FREEZE",37,37,37,2,false,false,-33,[1,"2djEUYPxZKNouUNLNhcn/Y"],5,6]],[2,"4fqdK8ny1B/7zgC/zbnsqg",1,0],[1,0,-25.64842105263142,0]],[20,"text",33554432,2,[[6,-34,[1,"ceA8xobWBFfqLi1Bh7OF2+"],[5,150,54.239999999999995]],[74,"DOUBLE\n",30,30,24,3,false,false,-35,[1,"5cwtX1pNVEXayJypeZHAgC"],9,10]],[2,"879x01JnxF+6GuSFJcctsL",1,0],[1,0,-26.998337950138193,0]],[20,"text-001",33554432,2,[[6,-36,[1,"87eA1yZchOXLl1QbQi0ftM"],[5,150,30.240000000000002]],[74,"POINTS",30,30,24,3,false,false,-37,[1,"69dwdfKz9AiottqsAZMW/V"],11,12]],[2,"4coT3TGqpMKKidHe76F45A",1,0],[1,0,-39.202,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,-3,2,0,0,2,0,0,2,0,-1,7,0,-2,10,0,-3,11,0,0,3,0,0,3,0,-1,5,0,-2,8,0,0,4,0,0,4,0,-1,6,0,-2,9,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,7,0,0,8,0,0,8,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,6,1,37],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[5,7,5,2,5,7,5,2,5,7,5,7,5,2,-1,-2],[0,309,0,310,0,311,0,312,0,141,0,141,0,313,314,315]],[[[187,"loading"],[197,"Canvas",33554432,"82C73sHaVHQrms3H9ul5Aw",[-7,-8,-9,-10,-11,-12],[[66,-1,[5,1280,768]],[119,-3,-2],[326,45,-5.684341886080802e-14,-5.684341886080802e-14,-4],[344,-5],[345,-6]],[1,640,383.99999999999994,0]],[240,"label_debug",false,33554432,1,[-16,-17,-18],[[116,-13,[5,42.26,50.4],[0,0,0]],[226,12,0,-14],[306,2,0,-15]],[1,-640,-384,0]],[198,"LoadingBar",33554432,1,[-24],[[66,-19,[5,604,36]],[308,1,0,-20,[4,4278651433],1],[346,600,0,-22,-21],[327,20,684,48,36,-23]],[1,0,-318,0]],[136,"text_loading",33554432,1,[[66,-25,[5,250,90]],[273,"Loading...",45,45,0,2,false,false,-26,3,4],[208,4,-27,[4,4282729797]],[150,-28]],[1,0,-265,0]],[199,"Background",33554432,1,[[66,-29,[5,2554,945]],[309,2,-30,0],[328,-637,-0.49765625,-88.5,-88.5,false,2554,945,0,-31]],[1,0.81,0.81,1]],[137,"Bar",33554432,3,[[[116,-32,[5,0,32],[0,0,0.5]],-33],4,1],[1,-300,0,0]],[241,"hbplus_w_straight",33554432,1,[[66,-34,[5,400,67]],[219,-35,2]],[1,-220.215,49.549,0],[1,0.75,0.75,1]],[136,"context_type",33554432,2,[[116,-36,[5,0,50.4],[0,0,0]],[177,"",0,2,30,30,-37]],[1,10,0,0]],[136,"context_id",33554432,2,[[116,-38,[5,0,50.4],[0,0,0]],[177,"",0,2,30,30,-39]],[1,10,50.4,0]],[136,"tournament",33554432,2,[[116,-40,[5,0,50.4],[0,0,0]],[177,"",0,2,30,30,-41]],[1,10,100.8,0]],[231,"loading",[1],[188,[232,0.5208,[2,0.242613,0.362617,0.798746,0.520833125],[2,0.241814,0.361945,0.798799,0],[2,0.519964,0.630786,0.905039,0.5208],[2,0.519544,0.630484,0.905069,0]],[233,[4,4283190348]],[234,5,6],[189],[190]]],[201,"Camera",1,[-42],[1,0,0,1000]],[347,0,1073741824,384,2000,41943040,12,[4,4278190080]],[310,1,0,6]],0,[0,0,1,0,21,13,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,12,0,-2,5,0,-3,3,0,-4,7,0,-5,4,0,-6,2,0,0,2,0,0,2,0,0,2,0,-1,8,0,-2,9,0,-3,10,0,0,3,0,0,3,0,39,14,0,0,3,0,0,3,0,-1,6,0,0,4,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,5,0,0,6,0,-2,14,0,0,7,0,0,7,0,0,8,0,0,8,0,0,9,0,0,9,0,0,10,0,0,10,0,-1,13,0,22,11,1,19,11,42],[0,0,0,0,0,0,0,14],[2,2,2,7,5,23,24,2],[316,142,118,8,0,139,140,142]],[[[19,"FruitComboText"],[68,"FruitComboText",8192,[-5,-6,-7],[[34,-2,[1,"9cbm062a5HtZN5n2jXpeS6"]],[348,-3,[1,"90J2xiPYJDFb5QyDOz6WgW"],[6,7,8],[9,10,11],[12,13,14]],[97,true,-4,[1,"f8p1uLb5JPSrIiVdAGWKE2"],[15],16]],[2,"b330N1rGJAurGuJwVync3O",-1,0]],[30,"top_text",8192,1,[[6,-8,[1,"bdTt6bcDFK6bOK01olEM0W"],[5,314.48,104.2]],[64,"1 FRUIT",90,90,70,false,false,-9,[1,"7dzxZEBjVNkocUIIXjqaaw"],0,1],[25,8,-10,[1,"2bRW0VautAP75COMRRNhVz"],[4,4278224808]],[62,false,1,-11,[1,"6151qDjWhMqKYVadNpOsBP"],[0,3,-3]],[63,false,1,-12,[1,"2dJx4tIIFFcZQ+qoARN4M5"],[0,3,-3]]],[2,"f5Pvvg3gpPNIUQdctRN6ND",1,0],[1,0,65.92,0],[1,0.65,0.65,0.65]],[87,"middle_text",8192,1,[[6,-13,[1,"7fJv6dPXdLyLyPPVq/wbOW"],[5,291.27,104.2]],[64,"COMBO",90,90,70,false,false,-14,[1,"94mZp3jCxGdoZJ1mOApQcQ"],2,3],[25,8,-15,[1,"b2sJ6vP7hJp6sau3Q722MH"],[4,4278224808]],[62,false,1,-16,[1,"26e3l3kitGk5fUbQ9UbNkQ"],[0,3,-3]],[63,false,1,-17,[1,"dbzNeqaCRLobsI1RoDd6Q3"],[0,3,-3]]],[2,"f2K3UCVQ9MELtKuWnOAsy2",1,0],[1,0.65,0.65,0.65]],[30,"bottom_text",8192,1,[[6,-18,[1,"cajBPzUcRJnKfVPqUBQ//1"],[5,329.95,255.4]],[74,"+1",190,190,190,2,false,false,-19,[1,"6198NQpaRBzpmhXjpSjXmL"],4,5],[25,8,-20,[1,"69iI8q5HhDPYtqkvkGDba4"],[4,4278224808]],[62,false,1,-21,[1,"bemj1bfalIhIpXIUcz57Rd"],[0,3,-3]],[63,false,1,-22,[1,"4a+mmIH6RL8J8TV6qHmmkR"],[0,3,-3]]],[2,"38zoxPvZBKx7lVyf8w8kAD",1,0],[1,0,-81.521,0],[1,0.65,0.65,0.65]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,0,4,0,0,4,0,0,4,0,6,1,22],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[7,5,7,5,7,5,-1,-2,-3,-1,-2,-3,-1,-2,-3,-1,14],[143,0,144,0,145,0,143,317,318,144,319,320,145,321,322,14,14]],[[[22,".bin",148446727,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19008,"length":2856,"count":1428,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":19008,"count":297,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.43747755885124207,-0.3882145583629608,-0.38821491599082947],"maxPosition",8,[1,0.4814564883708954,0.388214647769928,0.001967811491340399]]],-1],0,0,[],[],[]],[[[22,".bin",1205636400,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27776,"length":4872,"count":2436,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":27776,"count":434,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4369663894176483,-0.38795608282089233,-0.38821491599082947],"maxPosition",8,[1,0.4770497679710388,0.38795608282089233,0.38821491599082947]]],-1],0,0,[],[],[]],[[[22,".bin",1099778038,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27776,"length":4824,"count":2412,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":27776,"count":434,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4809664189815521,-0.4317207932472229,-0.4319797158241272],"maxPosition",8,[1,0.5151382088661194,0.4317207932472229,0.4319797158241272]]],-1],0,0,[],[],[]],[[[22,".bin",119282829,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19008,"length":2856,"count":1428,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":19008,"count":297,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.43747755885124207,-0.3882145881652832,0.001574182417243719],"maxPosition",8,[1,0.5342104434967041,0.3882145881652832,0.3921504616737366]]],-1],0,0,[],[],[]],[[[19,"particle_juicePineapple"],[73,"particle_juicePineapple",[-3],[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[72,"particle_juiceSmall",1,[-4],[2,"1eGkpbHVRA7YQtVRbaS87n",1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"17+MscORlKD6npLDx1rPQ0"],[[0,null],6,0],[8],[3,0.42],[0],[0],[3,8.4],[0],[0],[0],[0],[3,0.495],[3,0.3],[0],[0],[[60,0.01,[3,44]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[70,true,1,2,0.0001,2.738,0.20671679660620837,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[0],[0],[0]],[39,true,0,[11,3,-11.7,11.7],[11,3,-3.45,3.45],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[2,null],6,0],[8],[3,1.14],[0],[0],[11,3,3.6,6.4],[0],[0],[0],[0],[3,0.77],[58,1,2.4,[5,[0,1],[[37,1,1,1,1],[45,1,1,1,1,1]]]],[0],[0],[[60,0.01,[3,15]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[83,true,1,2,0.0001,2.738,1.2217304763960306,0.20671679660620837,[0],[1,0,0,55]],[29,true,[32,1,[5,[0,0.14102564102564102,1],[[13,2,1,0.04860266743843023,1],[47,2,0.9629629629629629,-0.6339319845464617,-0.6339319845464617],[37,-1.1210613598673298,1,-1.1210613598673298,1]]]],[0],[0],[0]],[39,true,0,[11,3,-10.2,10.2],[43,3],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[34,24,34,24]],[[[19,"particle_deflect"],[73,"particle_deflect",[-3],[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[72,"particle_spark",1,[-4],[2,"1eGkpbHVRA7YQtVRbaS87n",1,0]],[285,1,false,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"17+MscORlKD6npLDx1rPQ0"],[[0,null],6,0],[8],[11,3,1.5,3],[0],[0],[11,3,8,15],[0],[0],[0],[0],[3,0.6],[0],[0],[0],[[60,0.01,[3,15]]],[54,true,[33,1,[36,[[12,0.004464285714285714,[4,4294947693]],[12,1,[4,4290865691]]],[[14,255,0.002232142857142857],[14,255,0.9933035714285714]]]]],[293,true,1,2,0.0001,0.7,2.738,1.3962634015954636,0.20671679660620837,[0],[1,0,0,48]],[29,true,[32,1,[5,[0,1],[[13,2,1,1,1],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[0],[0],[0],[40,2,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]],[5,[0,1],[[45,1,-1,1,-1,1],[45,0.17037037037037037,-0.8296296296296296,1,-0.8296296296296296,1]]]]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[183,1,0,0.6,1,1]],[286,true,1,false,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[2,null],6,0],[8],[3,5],[0],[0],[3,1.2],[0],[0],[0],[0],[3,0.8],[86,2.4],[0],[0],[[60,0.01,[3,1]]],[54,true,[33,1,[36,[[61,0.004464285714285714],[12,1,[4,4294919990]]],[[14,255,0.059000000000000004],[14,0,0.9933035714285714]]]]],[294,true,0,1,0.0001,2.738,0.15707963267948966,0.20671679660620837,[0],[1,0,0,0]],[29,true,[58,1,2,[5,[0,1],[[37,1,1,1,1],[45,1,1,1,1,1]]]],[0],[0],[0]],[39,true,0,[0],[3,7],[0],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[323,25,324,103]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4279467263],"secondColor",8,[4,4282505983],"thirdColor",8,[4,4281434081],"fourthColor",8,[4,4281434081]]],11]]],0,0,[0],[8],[3]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["96PVYuWDVL/Ihyol6RB2fm"]}],[1],0,[],[],[]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[146,5]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4293307500],"secondColor",8,[4,4293307500],"thirdColor",8,[4,4291335223]]],11]]],0,0,[0],[8],[3]],[[[19,"BlitzText02"],[68,"BlitzText02",8192,[-5,-6],[[34,-2,[1,"9cbm062a5HtZN5n2jXpeS6"]],[128,0,-3,[1,"32jtBZLAdDCYhaOnDY6JMb"]],[100,-4,[1,"578SrJZy5Pb4xlTfMLCrLo"],[6],7]],[2,"b330N1rGJAurGuJwVync3O",-1,0]],[49,"top_textOutline",8192,1,[-12],[[6,-7,[1,"7fJv6dPXdLyLyPPVq/wbOW"],[5,235.81,64.7]],[103,"Great blitz!",45,45,45,false,false,-8,[1,"94mZp3jCxGdoZJ1mOApQcQ"],[4,4278245287],2],[25,4,-9,[1,"b2sJ6vP7hJp6sau3Q722MH"],[4,4278245287]],[62,false,1,-10,[1,"26e3l3kitGk5fUbQ9UbNkQ"],[0,3,-3]],[63,false,1,-11,[1,"dbzNeqaCRLobsI1RoDd6Q3"],[0,3,-3]]],[2,"f2K3UCVQ9MELtKuWnOAsy2",1,0],[1,0,30,0]],[49,"bot_textOutline",8192,1,[-18],[[6,-13,[1,"56//FF4hhOoaZvcuazO+5X"],[5,82.36,64.7]],[103,"+10",45,45,45,false,false,-14,[1,"60wm115o9LK7onvmiroJHt"],[4,4278245287],5],[25,4,-15,[1,"4fD63oY79LnbIJ1BlhyiZk"],[4,4278245287]],[62,false,1,-16,[1,"92A0UhiDBCQ7tcvRjhCZ3l"],[0,3,-3]],[63,false,1,-17,[1,"78aHrJ/GZGi6Bn5U3Nv30J"],[0,3,-3]]],[2,"9dpGuTdgBEP6LJprGLhrZ0",1,0],[1,0,-30,0]],[28,"top_text",8192,2,[[6,-19,[1,"b1mzevMARF7Kcm8noV/wDk"],[5,227.81,56.7]],[64,"Great blitz!",45,45,45,false,false,-20,[1,"94mZp3jCxGdoZJ1mOApQcQ"],0,1]],[2,"72014aGa5JKosXpIynNW0h",1,0]],[28,"bot_text",8192,3,[[6,-21,[1,"8fpKgxHFBGoZqMSUOs/4GN"],[5,74.36,56.7]],[64,"+10",45,45,45,false,false,-22,[1,"94mZp3jCxGdoZJ1mOApQcQ"],3,4]],[2,"fbNj6UVS1EDJ5567pa4wl8",1,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,4,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,-1,5,0,0,4,0,0,4,0,0,5,0,0,5,0,6,1,22],[0,0,0,0,0,0,0,0],[7,5,5,7,5,5,-1,14],[147,0,0,147,0,0,11,11]],[[[19,"particle_spark_bomb"],[105,"particle_spark_bomb",[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[209,true,0.05,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[0,null],6,0],[8],[3,0.6],[3,1],[3,1],[11,3,2,3],[0],[0],[0],[0],[11,3,0.3,0.35],[0],[3,23],[0],[54,true,[33,1,[36,[[93],[12,0.53125,[4,4280677631]]],[[14,255,0.002232142857142857],[14,255,0.9933035714285714]]]]],[214,true,3,2,0.1,0.94,[0]],[29,true,[32,1,[5,[0.010256410256410256,1],[[48,2,1,-0.3695090439276486,1,-0.3695090439276486,1],[154,2,-1.4882154882154874,1,-1.4882154882154874,1]]]],[0],[0],[0]],[141,[0],[0],[0],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[90,true,[0],[0],[71,3,-0.3490658503988659]],[24,[0],[0]],[27,[0],[0],[8],[8],-3],[183,1,0,0.5,1,1]]],0,[0,3,1,0,-1,2,0,9,2,0,6,1,3],[0,0],[-1,10],[79,25]],[[[19,"particle_juiceDouble"],[73,"particle_juiceDouble",[-3],[-2],[2,"26m5iuFiBH0IDxLTSmfkwE",-1,0]],[72,"particle_juiceSmall",1,[-4],[2,"84soY8lCdDP51aCv15FOUm",1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"7cCo6ncQhAk6p/xX35g7Zz"],[[0,null],6,0],[8],[3,0.2],[0],[0],[3,2.1],[0],[0],[71,3,6.283185307179586],[0],[3,1.2],[3,0.4],[0],[0],[[60,0.01,[3,16]]],[54,true,[82,3,[57,[[42,[4,4294953885]],[12,1,[4,4294953885]]]],[57,[[42,[4,4294957700]],[12,1,[4,4294957700]]]]]],[70,true,1,2,0.0001,2.738,0.20671679660620837,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[0],[0],[0]],[39,true,0,[11,3,-8,8],[11,3,-3.15,3.15],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[11,3,0.7853981633974483,1.5707963267948966]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"2ciXM6+NlLOIY3M3GEvlxG"],[[2,null],6,0],[290,2,[4,4294942785],[4,4294927144]],[3,1.3],[0],[0],[11,3,4.2,8],[0],[0],[0],[0],[3,0.75],[58,1,2.4,[5,[0,1],[[37,1,1,1,1],[45,1,1,1,1,1]]]],[0],[0],[[60,0.01,[3,14]]],[65,[82,3,[57,[[42,[4,16789503]],[12,0.16294642857142855,[4,16789503]],[12,1,[4,22533119]]]],[57,[[42,[4,17426175]],[12,1,[4,22533119]]]]]],[83,true,1,2,0.0001,2.738,1.2217304763960306,0.20671679660620837,[0],[1,0,0,43.3]],[29,true,[32,1,[5,[0,0.14102564102564102,1],[[13,2,1,0.04860266743843023,1],[47,2,0.9629629629629629,-0.6339319845464617,-0.6339319845464617],[37,-1.1210613598673298,1,-1.1210613598673298,1]]]],[0],[0],[0]],[39,true,0,[11,3,-5,5],[11,3,-2,-1.5],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[11,3,0.7853981633974483,1.5707963267948966]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[9,10,9,10]],[[[19,"BlitzText05"],[68,"BlitzText05",8192,[-5,-6],[[34,-2,[1,"9cbm062a5HtZN5n2jXpeS6"]],[100,-3,[1,"e5t1ebCHVDLZZc5kD2AF1o"],[6],7],[128,0,-4,[1,"36OapMwA5PNrvYdJIlEWTX"]]],[2,"b330N1rGJAurGuJwVync3O",-1,0]],[49,"top_textOutline",8192,1,[-12],[[6,-7,[1,"7fJv6dPXdLyLyPPVq/wbOW"],[5,231.24,64.7]],[103,"Hyper blitz!",45,45,45,false,false,-8,[1,"94mZp3jCxGdoZJ1mOApQcQ"],[4,4286776640],2],[25,4,-9,[1,"b2sJ6vP7hJp6sau3Q722MH"],[4,4286776640]],[62,false,1,-10,[1,"26e3l3kitGk5fUbQ9UbNkQ"],[0,3,-3]],[63,false,1,-11,[1,"dbzNeqaCRLobsI1RoDd6Q3"],[0,3,-3]]],[2,"f2K3UCVQ9MELtKuWnOAsy2",1,0],[1,0,30,0]],[49,"bot_textOutline",8192,1,[-18],[[6,-13,[1,"56//FF4hhOoaZvcuazO+5X"],[5,82.36,64.7]],[103,"+25",45,45,45,false,false,-14,[1,"60wm115o9LK7onvmiroJHt"],[4,4286776640],5],[25,4,-15,[1,"4fD63oY79LnbIJ1BlhyiZk"],[4,4286776640]],[62,false,1,-16,[1,"92A0UhiDBCQ7tcvRjhCZ3l"],[0,3,-3]],[63,false,1,-17,[1,"78aHrJ/GZGi6Bn5U3Nv30J"],[0,3,-3]]],[2,"9dpGuTdgBEP6LJprGLhrZ0",1,0],[1,0,-30,0]],[28,"top_text",8192,2,[[6,-19,[1,"b1mzevMARF7Kcm8noV/wDk"],[5,223.24,56.7]],[64,"Hyper blitz!",45,45,45,false,false,-20,[1,"94mZp3jCxGdoZJ1mOApQcQ"],0,1]],[2,"72014aGa5JKosXpIynNW0h",1,0]],[28,"bot_text",8192,3,[[6,-21,[1,"8fpKgxHFBGoZqMSUOs/4GN"],[5,74.36,56.7]],[64,"+25",45,45,45,false,false,-22,[1,"94mZp3jCxGdoZJ1mOApQcQ"],3,4]],[2,"fbNj6UVS1EDJ5567pa4wl8",1,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,4,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,-1,5,0,0,4,0,0,4,0,0,5,0,0,5,0,6,1,22],[0,0,0,0,0,0,0,0],[7,5,5,7,5,5,-1,14],[148,0,0,148,0,0,11,11]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["9fd8g5JOZN4a13OW8NzYrB"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["a0UedAkYhFMZxuxRX/4CW0"]}],[1],0,[],[],[]],[[{"name":"Ring_Green_SS","rect":{"x":0,"y":0,"width":292,"height":292},"offset":{"x":0,"y":0},"originalSize":{"width":292,"height":292},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[325]],[[[19,"particle_smoke_bomb"],[255,"particle_smoke_bomb",[-6],[-5],[148,"21VjHvuN9GNI9gCaRF+WeF",-4,0,[[101,["_trailModule","_particleSystem"],-3,[4,["d95GbZc2FJspockrI2TGig"]],-2,[4,["d95GbZc2FJspockrI2TGig"]]]],[-1]],[1,0,0.732,-0.026]],[51,0,{},1,[53,"21VjHvuN9GNI9gCaRF+WeF",-12,[69,"f94cLhIU9OXYkWgNHlfxY0",1,[[17,"particle_spark_bomb",["_name"],[4,["21VjHvuN9GNI9gCaRF+WeF"]]],[38,["_lpos"],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[1,0,0,0]],[38,["_lrot"],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[3,0,0,0,1]],[38,["_euler"],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[1,0,0,0]],[10,2,["_sizeOvertimeModule","size","multiplier"],-7],[10,4,["startSpeed","constantMin"],-8],[10,6,["startSpeed","constantMax"],-9],[10,1,["startSizeX","constant"],-10],[10,1.4,["startSizeY","constant"],-11]]],0]],[4,["d95GbZc2FJspockrI2TGig"]],[151,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[1,null],6,0],[8],[3,1.5],[0],[0],[0],[0],[0],[0],[0],[3,0.5],[0],[3,26],[0],[54,true,[33,1,[36,[[93],[61,0.45],[12,1,[4,4289658878]]],[[76,100],[14,0,1]]]]],[215,true,3,0.0001,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[45,0.4962962962962963,-0.5037037037037038,1,-0.5037037037037038,1]]]],[0],[0],[0]],[39,true,0,[50,2,4,[5,[0,1],[[13,2,0.11111111111111133,1,1],[13,2,0.34074074074074073,1,1]]],[5,[0,1],[[48,2,-0.1037037037037037,0.1750841750841751,1,0.1750841750841751,1],[13,2,-0.4074074074074074,1,1]]]],[50,2,7,[5,[0,1],[[9,2,0.007407407407407408],[9,2,0.007407407407407408]]],[5,[0,1],[[13,2,0.14814814814814814,1,1],[48,2,0.9481481481481483,2,1,2,1]]]],[50,2,4,[5,[0,1],[[13,2,0.07407407407407407,1,1],[13,2,0.4222222222222223,1,1]]],[5,[0,1],[[9,2,-0.11851851851851852],[9,2,-0.5111111111111111]]]],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-13],[31,1,2]]],0,[0,-1,2,0,16,2,0,17,2,0,3,1,0,-1,4,0,-1,2,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,3,2,0,9,4,0,6,1,13],[0,0,0],[12,-1,10],[130,326,85]],[[[22,".bin",3443808827,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":88320,"length":11160,"count":5580,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":88320,"count":1380,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4710245132446289,-0.4776507019996643,-0.49031996726989746],"maxPosition",8,[1,0.462649405002594,0.45246621966362,1.18430495262146]]],-1],0,0,[],[],[]],[[[22,".bin",396073853,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":43264,"length":3624,"count":1812,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":43264,"count":676,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4162489175796509,-0.4162489175796509,-0.49031996726989746],"maxPosition",8,[1,0.41624876856803894,0.4162489175796509,0.007481575012207031]]],-1],0,0,[],[],[]],[[[22,".bin",1678586208,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":215808,"length":10704,"count":5352,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":215808,"count":4496,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5083736181259155,-0.5160518288612366,-0.5343199968338013],"maxPosition",8,[1,0.500001072883606,0.4884800314903259,1.2240397930145264]]],-1],0,0,[],[],[]],[[[22,".bin",2080795116,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":69888,"length":6312,"count":3156,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":69888,"count":1092,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4746862053871155,-0.48144933581352234,3.42961605781511e-8],"maxPosition",8,[1,0.46634969115257263,0.4560054540634155,1.189285397529602]]],-1],0,0,[],[],[]],[[[22,".bin",157828194,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21120,"length":3144,"count":1572,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":21120,"count":330,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5885239243507385,-0.2596062421798706,-0.6486078500747681],"maxPosition",8,[1,0.3850335478782654,0.2605516314506531,0.9504294395446777]]],-1],0,0,[],[],[]],[[[22,".bin",4009426177,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21120,"length":3144,"count":1572,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":21120,"count":330,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5445291996002197,-0.21560634672641754,-0.6046675443649292],"maxPosition",8,[1,0.34103572368621826,0.21655181050300598,0.9100562334060669]]],-1],0,0,[],[],[]],[[[22,".bin",3685579628,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13056,"length":2004,"count":1002,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":13056,"count":204,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.233241006731987,-0.2596062421798706,-0.04044898971915245],"maxPosition",8,[1,0.3850335478782654,0.2605516314506531,0.9504294395446777]]],-1],0,0,[],[],[]],[[[22,".bin",849888253,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14144,"length":1800,"count":900,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":14144,"count":221,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.1945917308330536,-0.21524415910243988,-0.02484912797808647],"maxPosition",8,[1,0.34103572368621826,0.21524745225906372,0.9100562334060669]]],-1],0,0,[],[],[]],[[[22,".bin",1718253031,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9920,"length":1644,"count":822,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":9920,"count":155,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5885239243507385,-0.2596062421798706,-0.6486078500747681],"maxPosition",8,[1,0.3105425238609314,0.2605516314506531,0.04451114684343338]]],-1],0,0,[],[],[]],[[[22,".bin",967775086,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10432,"length":1536,"count":768,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":10432,"count":163,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5445291996002197,-0.21524415910243988,-0.6046675443649292],"maxPosition",8,[1,0.26817819476127625,0.21524745225906372,0.023938331753015518]]],-1],0,0,[],[],[]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[64,7]],[[[22,".bin",1712207891,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27776,"length":4608,"count":2304,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":27776,"count":434,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4248075783252716,-0.42480745911598206,0],"maxPosition",8,[1,0.4248073399066925,0.42480745911598206,0.5138775110244751]]],-1],0,0,[],[],[]],[[[22,".bin",265791733,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":46976,"length":8640,"count":4320,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":46976,"count":734,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.42480742931365967,-0.42480748891830444,-0.5138775706291199],"maxPosition",8,[1,0.42480748891830444,0.42480742931365967,0.5138775110244751]]],-1],0,0,[],[],[]],[[[22,".bin",399807094,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":46208,"length":8640,"count":4320,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":46208,"count":722,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4688074290752411,-0.46880751848220825,-0.5578776001930237],"maxPosition",8,[1,0.46880751848220825,0.4688074290752411,0.5578775405883789]]],-1],0,0,[],[],[]],[[[22,".bin",1816886886,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":33792,"length":4608,"count":2304,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":33792,"count":528,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.42480728030204773,-0.42480748891830444,-0.5138775706291199],"maxPosition",8,[1,0.424807608127594,0.4248073995113373,6.9236874011835425e-9]]],-1],0,0,[],[],[]],[[[102,"outinesMort",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_VERTEX_COLOR":true}],[[[{"metallic":0.400000005960464,"roughness":0.806901276111603},"albedoScale",8,[1,1,1,1],"emissiveScale",8,[2,1,1,1,1]]],11]]],0,0,[0],[8],[13]],[[[19,"particle_bananaFreezeTrail"],[73,"particle_bananaFreezeTrail",[-3,-4,-5],[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[127,"star",65536,1,[-6],[2,"28y/hOIQtAWqdYiGv3VKwE",1,0]],[89,1,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"b1mG6y90NGhoETMAEjGS7S"],[[0,null],6,0],[8],[3,0.7],[0],[0],[0],[0],[0],[71,3,6.283185307179586],[0],[3,1.1],[86,2.4],[3,14],[0],[54,true,[82,3,[57,[[93],[12,1,[4,4294890949]]]],[57,[[93],[12,1,[4,4294959534]]]]]],[130,true,3,0.001,2.738,0.20671679660620837,[0]],[29,true,[58,1,1.5,[5,[0.04358974358974359,1],[[13,2,1,1,1],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[40,2,[5,[0.002564102564102564,1],[[9,2,-0.16296296296296298],[9,2,-1]]],[5,[0,1],[[9,2,0.08148148148148149],[9,2,1]]]],[50,2,1.4,[5,[0,1],[[9,2,-0.9333333333333333],[9,2,-0.8888888888888888]]],[5,[0,1],[[9,2,0.8296296296296296],[9,2,0.8666666666666667]]]],[40,2,[5,[0,1],[[9,2,-0.1037037037037037],[9,2,-0.31851851851851853]]],[5,[0,1],[[9,2,0.07407407407407407],[9,2,0.3037037037037037]]]],[3,1]],[26,[32,1,[5,[0,1],[[9,2,1],[9,2,1]]]],[58,1,16,[5,[0,0.9897435897435898],[[47,2,-0.014814814814814815,-2.605664488017429,-2.605664488017429],[9,2,-1]]]],[32,1,[5,[0,1],[[9,2,1],[9,2,1]]]]],[23,[0],[0],[0],[0]],[90,true,[0],[0],[11,3,-3.490658503988659,3.490658503988659]],[24,[0],[0]],[27,[0],[0],[8],[8],-7],[31,1,1]],[72,"clouds",1,[-8],[2,"93+zCrpkFKAZ8rS0EllITJ",1,0]],[89,1,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,4,[1,"cfLpj1lT5JgLA1JkgWdWN7"],[[2,null],6,0],[33,1,[57,[[93],[12,0.796875,[4,4294763461]],[12,1,[4,4294496933]]]]],[3,2.6],[0],[0],[0],[0],[0],[71,3,6.283185307179586],[0],[3,1],[86,2.4],[3,11],[0],[54,true,[33,1,[210,[[14,47,0.08830357142857143],[14,140,1]]]]],[130,true,3,0.05,2.738,0.20671679660620837,[0]],[29,true,[58,1,1.25,[5,[0.04358974358974359,1],[[13,2,1,1,1],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[40,2,[5,[0.002564102564102564,1],[[9,2,-0.16296296296296298],[9,2,-1]]],[5,[0,1],[[9,2,0.08148148148148149],[9,2,1]]]],[40,2,[5,[0.005128205128205128,1],[[9,2,-0.15555555555555556],[9,2,-0.8888888888888888]]],[5,[0,1],[[9,2,0.10370370370370371],[9,2,0.8666666666666667]]]],[40,2,[5,[0,1],[[9,2,-0.1037037037037037],[9,2,-0.31851851851851853]]],[5,[0,1],[[9,2,0.07407407407407407],[9,2,0.3037037037037037]]]],[3,1]],[26,[32,1,[5,[0,1],[[9,2,1],[9,2,1]]]],[58,1,16,[5,[0,0.9897435897435898],[[47,2,-0.014814814814814815,-2.605664488017429,-2.605664488017429],[9,2,-1]]]],[32,1,[5,[0,1],[[9,2,1],[9,2,1]]]]],[23,[0],[0],[0],[0]],[90,true,[0],[0],[11,3,-3.490658503988659,3.490658503988659]],[24,[0],[0]],[27,[0],[0],[8],[8],-9],[31,1,3]],[72,"snow",1,[-10],[2,"2dqn/TS0JG87yBjyVGMLFd",1,0]],[89,1,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,6,[1,"87kR+GzeROdI5U9ZweW7Wx"],[[4,null],6,0],[104,[4,4294308824]],[3,0.4],[0],[0],[0],[0],[0],[71,3,6.283185307179586],[0],[3,1.8],[180,0.22,2.4],[3,13],[0],[54,true,[33,1,[210,[[14,47,0.05133928571428571],[14,255,0.09],[14,255,1]]]]],[130,true,1,0.1,2.738,0.20671679660620837,[0]],[29,true,[58,1,1.25,[5,[0.04358974358974359,1],[[13,2,1,1,1],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[40,2,[5,[0.002564102564102564,1],[[9,2,-0.16296296296296298],[9,2,-1]]],[5,[0,1],[[9,2,0.08148148148148149],[9,2,1]]]],[40,2,[5,[0,1],[[9,2,-0.037037037037037035],[9,2,-0.05185185185185185]]],[5,[0,1],[[9,2,0.10370370370370371],[9,2,0.8666666666666667]]]],[40,2,[5,[0,1],[[9,2,-0.1037037037037037],[9,2,-0.31851851851851853]]],[5,[0,1],[[9,2,0.07407407407407407],[9,2,0.3037037037037037]]]],[3,1]],[26,[32,1,[5,[0,1],[[9,2,1],[9,2,1]]]],[58,1,16,[5,[0,0.9897435897435898],[[47,2,-0.014814814814814815,-2.605664488017429,-2.605664488017429],[9,2,-1]]]],[32,1,[5,[0,1],[[9,2,1],[9,2,1]]]]],[23,[0],[0],[0],[0]],[90,true,[0],[0],[11,3,-3.490658503988659,3.490658503988659]],[24,[0],[0]],[27,[0],[0],[8],[8],-11],[31,1,5]],[89,0.1,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[6,null],6,0],[8],[11,3,1.8,2.2],[0],[0],[3,0.6],[0],[0],[0],[0],[3,0.6],[86,2.4],[3,13],[0],[54,true,[33,1,[57,[[42,[4,4294953942]],[61,1]]]]],[70,true,1,2,0.4,2.738,0.20671679660620837,[0]],[29,true,[40,2,[5,[0,0.8974358974358975],[[13,2,0.8888888888888888,1,1],[44,2,1,1]]],[5,[0,1],[[13,2,0.9629629629629629,1,1],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[40,2,[5,[0,1],[[9,2,-1],[106,2]]],[5,[0,1],[[13,2,1,1,1],[44,2,1,1]]]],[40,2,[5,[0,1],[[13,2,-1,1,1],[13,2,-0.9407407407407408,1,1]]],[5,[0,1],[[13,2,1,1,1],[13,2,0.8888888888888888,1,1]]]],[40,2,[5,[0,1],[[13,2,-0.05925925925925926,1,1],[13,2,-0.362962962962963,1,1]]],[5,[0,1],[[13,2,0.05185185185185185,1,1],[13,2,0.37777777777777777,1,1]]]],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-12],[31,1,7]]],0,[0,3,1,0,-1,8,0,-1,2,0,-2,4,0,-3,6,0,-1,3,0,9,3,0,-1,5,0,9,5,0,-1,7,0,9,7,0,9,8,0,6,1,12],[0,0,0,0,0,0,0,0],[-1,10,-1,10,-1,10,-1,10],[9,10,327,146,96,63,67,68]],[[[19,"BombPurpleText"],[68,"BombPurpleText",262144,[-4],[[34,-2,[1,"9cbm062a5HtZN5n2jXpeS6"]],[97,true,-3,[1,"f8p1uLb5JPSrIiVdAGWKE2"],[2],3]],[2,"b330N1rGJAurGuJwVync3O",-1,0]],[28,"middle_text",262144,1,[[6,-5,[1,"7fJv6dPXdLyLyPPVq/wbOW"],[5,151,104.2]],[64,"-10",90,90,70,false,false,-6,[1,"94mZp3jCxGdoZJ1mOApQcQ"],0,1],[25,8,-7,[1,"b2sJ6vP7hJp6sau3Q722MH"],[4,4285530211]],[62,false,1,-8,[1,"26e3l3kitGk5fUbQ9UbNkQ"],[0,3,-3]],[63,false,1,-9,[1,"dbzNeqaCRLobsI1RoDd6Q3"],[0,3,-3]]],[2,"f2K3UCVQ9MELtKuWnOAsy2",1,0]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,6,1,9],[0,0,0,0],[7,5,-1,14],[328,0,14,14]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4284022015],"secondColor",8,[4,4278441983],"thirdColor",8,[4,4278222516],"fourthColor",8,[4,4281247450]]],11]]],0,0,[0],[8],[3]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["a8r4jvyuxGB6t0qpmWBdet"]}],[1],0,[],[],[]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[329,7]],[[[19,"Starfruit"],[91,"Starfruit",[-4,-5,-6,-7,-8,-9],[[35,2,-2,[1,"67KdewkNtMbaaU5Q0bawu8"]],[77,0.4,-3,[1,"63u3dLfCpE34yC+k2EZI11"]]],[2,"f4jG+nL5xCW4+ZdmwYaJQO",-1,0],[1,-2.637,0,0]],[92,"StarfruitWhole",1,[[15,-10,[1,"cez7KXKtVAS7ZxuuFxYkgC"],[0,1],[16],2]],[2,"c4JIdhWmVFn6P4VDzoKIx7",1,0]],[92,"StarfruitWhole_Outline",1,[[15,-11,[1,"68YYaoukhL85WMWNKAaura"],[3,4],[16],5]],[2,"dbI+kVzzFKoYrVL9K8NwVn",1,0]],[122,"StarfruitHalfTop_Outline",false,1,[[15,-12,[1,"424DircFJGl4mm2IpBgv+1"],[6,7],[16],8]],[2,"53p1ysv0tLLopbL0PMWB3Q",1,0],[1,0,0.215,0]],[122,"StarfruitHalfBottom_Outline",false,1,[[15,-13,[1,"e5RFYdZ+xL5Zg95/6mpm6V"],[9,10],[16],11]],[2,"43sF834B1NwZUYWvTNGyGm",1,0],[1,0,-0.267,0]],[122,"StarfruitHalfBottom",false,1,[[15,-14,[1,"7ePgJWBw1ANYbWBGQYmAvx"],[12,13],[16],14]],[2,"86Lzoo8b1GG5TMV7ruEYYt",1,0],[1,0,-0.267,0]],[122,"StarfruitHalfTop",false,1,[[15,-15,[1,"88JB2cqvxNYrM95TwbX+8e"],[15,16],[16],17]],[2,"c2KDbgLpFADIMCnZwJoCRw",1,0],[1,0,0.215,0]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,7,0,0,2,0,0,3,0,0,4,0,0,5,0,0,6,0,0,7,0,6,1,15],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,4,-1,-2,4,-1,-2,4,-1,-2,4,-1,-2,4,-1,-2,4],[4,4,112,4,4,113,4,4,114,4,4,115,4,4,116,4,4,117]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["aaUzfLTkdFMpV2HYXB/uFG"]}],[1],0,[],[],[]],[[{"name":"ButtonPlay","rect":{"x":0,"y":0,"width":128,"height":128},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[330]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[331,7]],[[[19,"BerryBlast"],[194,"BerryBlast",[-7,-8,-9,-10,-11],[[84,-3,[1,"b5QxMnVglGRJUy5+o+LuFw"]],[35,2,-4,[1,"a8tq9GKDRMkbq2rmBXBtxC"]],[77,0.5,-5,[1,"7cnhTYP3ZE378LuawJ9t2w"]],[55,-6,[1,"166ak6c2ZFbY/eJPgeQdkC"]]],[138,"423AhABIFLhYgpqOt7vrJ4",-2,0,[-1]],[1,1.15,1.15,1.15]],[4,["21VjHvuN9GNI9gCaRF+WeF"]],[124,"BerryBlastHalf1",1,[[15,-12,[1,"4d2nw/B1lPTI7Qf1nk+0yA"],[2],[16],3],[35,8,-13,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"78LC6lhRFG2I7D57R4pRAk",1,0],[1,-2.6469779010051207e-25,-0.0019681002013385296,-5.1625419217327106e-11],[3,-0.7071067811865449,-6.181724038536757e-8,-6.181724038536757e-8,0.7071067811865449],[1,-90.00000000000003,-0.00001001791262497545,0]],[124,"BerryBlastHalf2",1,[[15,-14,[1,"c1pc5P29lP7pMyozZ/5FnU"],[4],[16],5],[35,8,-15,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"b7inaItt9EgLSlSnklzw9l",1,0],[1,-2.6469779010051207e-25,-0.0019681002013385296,-5.1625419217327106e-11],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[51,0,{},1,[53,"21VjHvuN9GNI9gCaRF+WeF",-16,[69,"0bO/O0B1dGvKp4mNa97/gg",1,[[10,"particle_berryBlastTrail",["_name"],2],[7,["_lpos"],2,[1,0,0,0]],[7,["_lrot"],2,[3,0,0,0,1]],[7,["_euler"],2,[1,0,0,0]],[10,true,["_active"],2]]],8]],[124,"BerryBlastWhole",1,[[15,-17,[1,"b9HKn596lNcLtQ4bSevxzh"],[0],[16],1]],[2,"85mHemzUBBu62zeb3rC+si",1,0],[1,1.613191047779114e-23,-0.0019681002013385296,-5.1625419217327106e-11],[3,-0.7044232557796388,-0.002683603464329846,-0.002663387245001436,0.7097700904924374],[1,-89.56675004318478,-0.4332625969753439,9.587150945952168e-9]],[124,"BerryBlastOutline",1,[[15,-18,[1,"03DfKSsbBENId6g2cdQpKd"],[6],[16],7]],[2,"d8d8Toi3lKf4tgm/IXSbBy",1,0],[1,1.613191047779114e-23,-0.0019681002013385296,-5.1625419217327106e-11],[3,-0.7044232557796388,-0.002683603464329846,-0.002663387245001437,0.7097700904924373],[1,-89.56675004318478,-0.4332625969753439,9.587150945952168e-9]]],0,[0,-1,5,0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,6,0,-2,3,0,-3,4,0,-4,7,0,-5,5,0,0,3,0,0,3,0,0,4,0,0,4,0,3,5,0,0,6,0,0,7,0,6,1,18],[0,0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,4,12],[1,332,1,333,1,334,12,335,336]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4282022398],"secondColor",8,[4,4286163455],"thirdColor",8,[4,4278201043],"fourthColor",8,[4,4278201043]]],11]]],0,0,[0],[8],[3]],[[[19,"fruitSlice_diamond_critical"],[68,"fruitSlice_diamond_critical",262144,[-5,-6],[[6,-2,[1,"28fa8m2Y5JdZmX4p9Ggzf8"],[5,26,114]],[143,-3,[1,"d1xbxPCx1LoYrkjbgcfVRj"]],[97,true,-4,[1,"d1e/nZJ8BIFrXDRyk1+pv2"],[2],3]],[2,"9b5WJX0+ZNk5O7j+HMT6IF",-1,0]],[200,"assets",262144,1,[[6,-7,[1,"85+fTbudJDDbucYC5a+AfF"],[5,26,114]],[18,-8,[1,"20lgtZYItGB5AdGnPBKlel"],0]],[2,"19oeghMsBFa7IiWiok/0c+",1,0],[3,0,0,0.25881904510252074,0.9659258262890683],[1,0,0,30]],[200,"assets-001",262144,1,[[6,-9,[1,"6dlFMAuLdD1bDBJF2gskp3"],[5,26,114]],[18,-10,[1,"3ay/2eg59DM6W8P7fWTmO8"],1]],[2,"a6mYSpJKNACoryeZ9CkHwZ",1,0],[3,0,0,-0.25881904510252074,0.9659258262890683],[1,0,0,-30]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,3,0,0,3,0,6,1,10],[0,0,0,0],[2,2,-1,14],[149,149,150,150]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4292728004],"secondColor",8,[4,4292728004],"thirdColor",8,[4,4288320131],"fourthColor",8,[4,4288320131]]],11]]],0,0,[0],[8],[3]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["b0fejYe2tB35VwcdohHziM"]}],[1],0,[],[],[]],[[[19,"Coconut"],[91,"Coconut",[-6,-7,-8,-9],[[84,-2,[1,"98mOynTsBIdKFdfRozpdIL"]],[35,2,-3,[1,"0aB/3DaJVBN7J5bhw9hxOG"]],[77,0.5,-4,[1,"e5t1SQbIZLRL3S7Uiu+RWp"]],[55,-5,[1,"c5rYfIdO1Ig59jRDwP5KU9"]]],[2,"bdadZboY1Dtq1mIxWlBF4p",-1,0],[1,1.185,0,0]],[52,"CoconutHalf2",false,1,[[15,-10,[1,"baWmh9ZaRIa6mFifJE1MIm"],[0],[16],1],[35,8,-11,[1,"ebzRpjW/1DdKTW3cmGV7ba"]]],[2,"bfQUK6B3VHCb73DgiQ5gge",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[52,"CoconutHalf1",false,1,[[15,-12,[1,"c5zdl7F1tHfIK5JxYVsPTS"],[2],[16],3],[35,8,-13,[1,"26es3kZllBmL3dsFOfipFa"]]],[2,"70K0jUaaJF2adYVhVI+X80",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[81,"CoconutWhole",1,[[15,-14,[1,"deDDnm0SFMM7+AX3lEOOKh"],[4],[16],5]],[2,"31DfdT5vVOJ4PaKlElC48m",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[52,"CoconutOutline",false,1,[[15,-15,[1,"b31/lnqi1CorunMG+C2x0g"],[6],[16],7]],[2,"e4aLKhcJpMNKRSh5UUQLA7",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,5,0,6,1,15],[0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,4],[1,337,1,338,1,339,340,341]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["b25iRuchtArYzedG69fCf3"]}],[1],0,[],[],[]],[[{"name":"Ring_Purple_settings","rect":{"x":0,"y":0,"width":203,"height":203},"offset":{"x":0,"y":0},"originalSize":{"width":203,"height":203},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[342]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["b3bCo+2mVH1aSZNHInxRDN"]}],[1],0,[],[],[]],[[{"name":"blackAreaforTitle","rect":{"x":0,"y":0,"width":640,"height":179},"offset":{"x":0,"y":0},"originalSize":{"width":640,"height":179},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[343]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["b5snqx50BDmLQHhI/CssiX"]}],[1],0,[],[],[]],[[[22,".bin",2634050921,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":23168,"length":4320,"count":2160,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":23168,"count":362,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.39758315682411194,-0.3440476953983307,-0.45631763339042664],"maxPosition",8,[1,0.35125136375427246,0.3440477252006531,0.4259340465068817]]],-1],0,0,[],[],[]],[[[22,".bin",2413973975,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15488,"length":2592,"count":1296,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":15488,"count":242,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.39758315682411194,-0.3440476953983307,-0.45631763339042664],"maxPosition",8,[1,0.35125136375427246,0.3440477252006531,0.002660991856828332]]],-1],0,0,[],[],[]],[[[102,"outinesMort",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_VERTEX_COLOR":true}],[[[{"metallic":0.400000005960464,"roughness":0.806901276111603},"albedoScale",8,[1,1,1,1],"emissiveScale",8,[2,1,1,1,1]]],11]]],0,0,[0],[8],[13]],[[[22,".bin",2577027011,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15488,"length":2592,"count":1296,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":15488,"count":242,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.39758315682411194,-0.340795636177063,-0.003192062256857753],"maxPosition",8,[1,0.34207290410995483,0.34079569578170776,0.4259340465068817]]],-1],0,0,[],[],[]],[[[22,".bin",808158448,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":23168,"length":4320,"count":2160,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":23168,"count":362,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.44143491983413696,-0.3880431354045868,-0.4995173513889313],"maxPosition",8,[1,0.39521324634552,0.3880431652069092,0.4699327051639557]]],-1],0,0,[],[],[]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4294942437],"secondColor",8,[4,4294132420],"thirdColor",8,[4,4284679491],"fourthColor",8,[4,4288090473]]],11]]],0,0,[0],[8],[3]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["b7ujEspLpLAa/PxybxJV9W"]}],[1],0,[],[],[]],[[{"name":"banana","rect":{"x":0,"y":0,"width":73,"height":107},"offset":{"x":0,"y":0},"originalSize":{"width":73,"height":107},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[344]],[[[19,"particle_berryBlastTrail"],[105,"particle_berryBlastTrail",[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[89,0.1,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[0,null],6,0],[104,[4,3808428031]],[11,3,0.9,1.1],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[86,2.4],[11,3,30,40],[0],[54,true,[82,3,[36,[[42,[4,4292202233]],[12,0.56,[4,4289833727]],[12,1,[4,4282864381]]],[[76,255],[14,255,1]]],[36,[[42,[4,4292202233]],[12,0.47,[4,4286804991]],[12,1,[4,4286457855]]],[[76,255],[14,255,1]]]]],[70,true,1,2,0.9,2.738,0.20671679660620837,[0]],[29,true,[40,2,[5,[0,0.8974358974358975],[[13,2,0.8888888888888888,1,1],[44,2,1,1]]],[5,[0,1],[[13,2,0.9629629629629629,1,1],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[40,2,[5,[0,1],[[9,2,-1],[106,2]]],[5,[0,1],[[13,2,1,1,1],[44,2,1,1]]]],[40,2,[5,[0,1],[[13,2,-1,1,1],[44,2,1,1]]],[5,[0,1],[[13,2,1,1,1],[44,2,1,1]]]],[40,2,[5,[0,1],[[13,2,-0.05925925925925926,1,1],[13,2,-0.362962962962963,1,1]]],[5,[0,1],[[13,2,0.05185185185185185,1,1],[13,2,0.37777777777777777,1,1]]]],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-3],[31,1,1]]],0,[0,3,1,0,-1,2,0,9,2,0,6,1,3],[0,0],[-1,10],[99,69]],[[[19,"container_missionsPopup"],[68,"container_missionsPopup",131072,[-10,-11],[[6,-6,[1,"a4xS89VvdM7agUmd9Vjp2U"],[5,1280,768]],[131,45,1280,768,-7,[1,"32AOd+lxtNIa/Heg7uKCic"]],[98,-8,[1,"6b8znE325MCKsNlpcCsaDC"],[33,34]],[349,-9,[1,"c2JmLxsidLoqf9De2JYpxg"]]],[138,"ddJyCrY05H0K1oeapDh2tu",-5,0,[-1,-2,-3,-4]]],[68,"cont_mission",131072,[-13,-14,-15,-16,-17,-18,-19],[[6,-12,[1,"d2RFyU3JpHLZeH+d9mQcDL"],[5,700,600]]],[2,"04cZw/Pc5E/IlZ+P24MFEV",1,0]],[49,"border",131072,2,[-21,-22,-23,-24,-25,-26],[[34,-20,[1,"54q681RatO0IGxBKHqEpUf"]]],[2,"cctlDVniJL5r+bYxeEnd+5",1,0],[1,0,-294.412,0]],[67,"headerWood",131072,2,[-29,-30,-31,-32,-33],[[6,-27,[1,"bcGVyplbdCq6pPgRilN9Ub"],[5,903.02,150]],[78,1,0,-28,[1,"04kjOuqNhDB6QMo9heO0yk"],22]],[2,"93slIMX/dItqndVUyNiZE7",1,0],[1,0.669,227.203,0],[1,0.8,0.8,1]],[125,"cont_Popup",131072,1,[-36,-37],[[34,-34,[1,"d2+JKpGABMdYQBZQdyE2LI"]],[144,45,590,590,334,334,100,100,-35,[1,"03jccYHi1NzromP5z544Jh"],1]],[2,"c70Q6lyPFKnaG5iZAm//TX",1,0]],[4,["49z2ZOgn9C0qKbebWZpPjD"]],[4,["49z2ZOgn9C0qKbebWZpPjD"]],[4,["49z2ZOgn9C0qKbebWZpPjD"]],[28,"BG",131072,5,[[6,-38,[1,"c6HiCszn9OWr0Poh88OUn2"],[5,1320,800]],[59,0,-39,[1,"b0A4SFwN9Lw6n9KpEPJBTd"],[4,0],0],[144,45,-610,-610,-350,-350,1320,800,-40,[1,"1eVTBC2JpP5rkQu0QIexVB"],5],[159,-41,[1,"950wDsmKpC15Y5RSPYd404"],1]],[2,"5eQMYfMyVB/bzdHFt1oWvk",1,0]],[67,"IconTimer",131072,4,[-45],[[6,-42,[1,"a11tCmOMVPHr3ZJWwmBtz0"],[5,62,72]],[18,-43,[1,"4cBOaVo0NFvrWZEn3aNQNT"],19],[97,true,-44,[1,"a7NN+Y/UBBYJyDYdymzuUX"],[20],21]],[2,"fdCuAZWmBNv61hrdHG5Gow",1,0],[1,-415.048,6.415,0],[1,0.5,0.5,1]],[49,"popup",131072,5,[2],[[6,-46,[1,"d8OYX+EI5IyYFiMIwbcpW0"],[5,620,620]],[185,20,-1429.780029,-88.789,-1120.4,-47,[1,"a9GK6m+ZxOSKzUb5A7rj+5"]]],[2,"75BZ/nQnFJUZjoFIEWbjdl",1,0],[1,0,-860.4000000000001,0]],[20,"text_headerWood",131072,4,[[6,-48,[1,"216Qp6hfVJRp17RiB+FxME"],[5,500,100]],[74,"Missions",70,70,0,2,false,false,-49,[1,"f56ZIC+IRMNKimskPh6wEi"],10,11],[25,5,-50,[1,"8ca4Y0q+dPoLUXIHRFXuef"],[4,4278528353]]],[2,"abPwCnfCdAg6KuHCEWZEnu",1,0],[1,3.9710000000000036,23.752999999999815,0]],[30,"TabCrossFolded",131072,4,[[21,-51,[1,"e9pRfanV9AmINMucQE0JA7"],[5,65,51],[0,0.5,1]],[18,-52,[1,"82vTHqQ+FPpYAi18atIqhF"],12],[80,3,0.9,-53,[1,"4984qeq1lCqo1N2I4xDbrF"],[[95,"625d6JQb5RMcpritewxLviL","btnCloseClicked",1]],13]],[2,"c6mmUve41BArkVfi1pCfT/",1,0],[1,364.152,80.112,0],[1,1.8,1.8,1]],[20,"text_Time",131072,4,[[21,-54,[1,"7d7h4p2LFIEIKm4VRln7F6"],[5,220,50],[0,0,0.5]],[99,"New missions in",0,32,32,32,2,false,false,-55,[1,"65qfn1D8hKBLfw7NJ6bTdg"],14,15],[25,3,-56,[1,"e9CXA2vTZPNqN6X3GaMoD/"],[4,4278528353]]],[2,"c2JtCbBzpKmKN2xIIb9gVJ",1,0],[1,-429.951,43.075,0]],[20,"text_Timer",131072,4,[[21,-57,[1,"4fC85DDbpMD7n53+zd4+IP"],[5,220,50],[0,0,0.5]],[99,"23H 59M",0,32,32,32,2,false,false,-58,[1,"78c/W1FwtNo4waQH0uqWL1"],16,17],[25,3,-59,[1,"4azq47C1pB6LQdJ7k+GKlM"],[4,4278528353]]],[2,"c5m1/OFiVACYBUZZ+sbr6w",1,0],[1,-395.61,7.785,0]],[49,"cont_missionEntry1",131072,2,[-61,-62],[[6,-60,[1,"8a8urRQg1BcpoHVIBc1DU+"],[5,640,128]]],[2,"9cssP0voNNea58kOjErKZx",1,0],[1,0,99.661,0]],[79,"cont_backingComplete",false,131072,16,[-64,-65],[[34,-63,[1,"0fqjSR5JtFAZ2o1HIHWN9A"]]],[2,"71XeH8WtNE8r1E21aP+r8g",1,0]],[49,"cont_missionEntry2",131072,2,[-67,-68],[[6,-66,[1,"4e4KdeZuVKYJUwtwBB/qEF"],[5,640,128]]],[2,"adyzBzUEJE2IvdnUKxzz+y",1,0],[1,0,-39.62,0]],[79,"cont_backingComplete",false,131072,18,[-70,-71],[[34,-69,[1,"f0Ehpval5Foanyiic66AHJ"]]],[2,"12JfUnQ1JNBaM+pzK0CQRa",1,0]],[49,"cont_missionEntry3",131072,2,[-73,-74],[[6,-72,[1,"3cl6+vOFJPGrZrMrknSu9n"],[5,640,128]]],[2,"65bY9lRH5O1bDJzIr0tYuW",1,0],[1,0,-180.595,0]],[79,"cont_backingComplete",false,131072,20,[-76,-77],[[34,-75,[1,"5bSn3OuUNNLLwa90IqL0X7"]]],[2,"b5NRhIuuhHYb+17x7hlLnA",1,0]],[20,"scrollback",131072,2,[[21,-78,[1,"44E1D9pFJItIx7mn3nSqNl"],[5,400,520],[0,0,0.5]],[94,0,-79,[1,"d4ppauJtFKq5ljdeNfzVc8"],2]],[2,"3c86/M4u9NUYzSz9Z4e2Tk",1,0],[1,-361.841,-33.991,0]],[30,"scrollback2",131072,2,[[21,-80,[1,"42O7rG1vdAW7p4qYWvB0Mf"],[5,400,520],[0,0,0.5]],[94,0,-81,[1,"6eGZHzrOFI4oGT9ZQoP84D"],3]],[2,"a2eiAFKIxOM7vnrRSlu41P",1,0],[1,361.841,-33.991,0],[1,-1,1.0000000000000002,1]],[20,"border1",131072,3,[[6,-82,[1,"4f8QkxyWZBlYDiiwk6i0uZ"],[5,650,10]],[59,0,-83,[1,"38B0IFguBPILOJHhGRNlVQ"],[4,4285183722],4]],[2,"4aCYQe4ixOorLM39GVFYMB",1,0],[1,0,43.173,0]],[109,"border2",131072,3,[[21,-84,[1,"41wnoQkAFNhK3+ho/PyCCB"],[5,431.5,10],[0,0,0.5]],[59,0,-85,[1,"f69LIl7wlD/bBb36np3wem"],[4,4285183722],5]],[2,"6eEZDjiZZNAZ0ve18StuKe",1,0],[1,-324.474,38.001,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[109,"border3",131072,3,[[21,-86,[1,"d6q0hRO4NP6bQi3weAgavB"],[5,431.5,10],[0,0,0.5]],[59,0,-87,[1,"c2tkqn+4pIPrX2pe3+adEc"],[4,4285183722],6]],[2,"74mAait4JO3JyDMB4UTwDg",1,0],[1,324.474,38.001,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[20,"border4",131072,3,[[6,-88,[1,"e3ZMt0MVBJJow3dZUK6qMF"],[5,650,10]],[59,0,-89,[1,"cftwYhm21E15U7R3zC8Lll"],[4,4285183722],7]],[2,"d2vLv0tkVCLJ1KL0xeY23O",1,0],[1,0,463.925,0]],[20,"border5",131072,3,[[6,-90,[1,"6dCTfn9eRCv6zwndgnoUyx"],[5,650,10]],[59,0,-91,[1,"75Z/j0orBGia3vSqUvy43q"],[4,4285183722],8]],[2,"0bj5UXGQtNmq4DAifGQQvl",1,0],[1,0,324.271,0]],[20,"border6",131072,3,[[6,-92,[1,"e3FbhiLuND/b6iGteavPHz"],[5,650,10]],[59,0,-93,[1,"60xFtU+BFD9pcyMAmOxeS5"],[4,4285183722],9]],[2,"4bVbhEW45DP5poaOVdlcir",1,0],[1,0,184.199,0]],[20,"IconTimerHand",131072,10,[[21,-94,[1,"ddbVokmxNLDbu1YHek7qul"],[5,6,20],[0,0.5,0.12]],[18,-95,[1,"99DzMrGeZKQ7cZfrldiQQD"],18]],[2,"f7v+5uWxlJx6e6nhJ2+t+h",1,0],[1,0.001,-5.174,0]],[28,"backingCompletedWhite",131072,17,[[6,-96,[1,"40RlzsWL9Ao6zlY3EdcFOz"],[5,640,128]],[59,0,-97,[1,"63zY8TNDpFvKnSybMz+NGG"],[4,4292932351],23]],[2,"34zrHMfKpD6JQnIqjDZ89l",1,0]],[28,"backingCompleted",131072,17,[[6,-98,[1,"8a8urRQg1BcpoHVIBc1DU+"],[5,630,118]],[59,0,-99,[1,"a9+WVN9xlMv4u4TbYAzhaz"],[4,3875536895],24]],[2,"59k6mBfP9KOKJnjvaYO3m5",1,0]],[51,0,{},16,[53,"49z2ZOgn9C0qKbebWZpPjD",-108,[69,"3aB5SbUIdKI4HCE3C5Y4AQ",1,[[10,"missionEntry",["_name"],6],[7,["_lpos"],6,[1,0,0.5190000000000055,0]],[7,["_lrot"],6,[3,0,0,0,1]],[7,["_euler"],6,[1,0,0,0]],[7,["_lscale"],6,[1,1.5,1.5,1]],[10,false,["_active"],-100],[7,["_lpos"],-101,[1,58.678,0,0]],[38,["_contentSize"],[4,["a43hI9zOpKIbPzW2Du4611"]],[5,100,43.2]],[10,false,["_active"],-102],[7,["_lpos"],-103,[1,8.678,-21.6,0]],[7,["_lpos"],-104,[1,8.678,-21.6,0]],[10,131072,["_layer"],6],[17,131072,["_layer"],[4,["e6KZLM/PpAtbw6sgBAKrYu"]]],[17,131072,["_layer"],[4,["48Ez/2bDhLrbIwXX3binNi"]]],[17,131072,["_layer"],[4,["1aC+wDbYhBiYoenfgNR0YD"]]],[17,131072,["_layer"],[4,["a7A3yspItFCYmCiOJyHryu"]]],[17,131072,["_layer"],[4,["a9c18zzfxH87UNGwgfJ7tP"]]],[17,131072,["_layer"],[4,["25YXsB869CVqIY2QSmSCBI"]]],[10,131072,["_layer"],-105],[10,131072,["_layer"],-106],[10,131072,["_layer"],-107],[17,131072,["_layer"],[4,["53r/vig3JO+b1Ob4cPq73E"]]],[17,131072,["_layer"],[4,["d9qaAXPCVGIqa90y1A4H87"]]],[17,131072,["_layer"],[4,["14/TP0FHxLjJ3KCsQJoarS"]]],[17,131072,["_layer"],[4,["dbCT4zUzVLfIJ00eXLra8E"]]]]],25]],[4,["1eksYdOApCxqVmzZAELiSp"]],[4,["f48NQgJQhCKp6b1aK65clb"]],[28,"backingCompletedWhite",131072,19,[[6,-109,[1,"0bakvaY4ZJaq1MNZIfDX6Z"],[5,640,128]],[59,0,-110,[1,"beG4lK+BNGcrqSkGyLCid2"],[4,4292932351],26]],[2,"0dTo9VvotDhLDYZEUd8BGR",1,0]],[28,"backingCompleted",131072,19,[[6,-111,[1,"9daZO0lGpDmIoMIIB1BOFN"],[5,630,118]],[59,0,-112,[1,"d6D62vE+lHhpatTeXLcTTf"],[4,3875536895],27]],[2,"66U6Sfym1MlLcTQQbqxDvx",1,0]],[51,0,{},18,[53,"49z2ZOgn9C0qKbebWZpPjD",-123,[69,"52SiLeQI9EZKO6aqqv988W",1,[[10,"missionEntry",["_name"],7],[7,["_lpos"],7,[1,0,0.5190000000000055,0]],[7,["_lrot"],7,[3,0,0,0,1]],[7,["_euler"],7,[1,0,0,0]],[7,["_lscale"],7,[1,1.5,1.5,1]],[10,false,["_active"],-113],[7,["_lpos"],-114,[1,58.678,0,0]],[38,["_contentSize"],[4,["a43hI9zOpKIbPzW2Du4611"]],[5,100,43.2]],[10,false,["_active"],-115],[7,["_lpos"],-116,[1,8.678,-21.6,0]],[7,["_lpos"],-117,[1,8.678,-21.6,0]],[10,131072,["_layer"],7],[17,131072,["_layer"],[4,["e6KZLM/PpAtbw6sgBAKrYu"]]],[17,131072,["_layer"],[4,["48Ez/2bDhLrbIwXX3binNi"]]],[17,131072,["_layer"],[4,["1aC+wDbYhBiYoenfgNR0YD"]]],[17,131072,["_layer"],[4,["a7A3yspItFCYmCiOJyHryu"]]],[17,131072,["_layer"],[4,["a9c18zzfxH87UNGwgfJ7tP"]]],[17,131072,["_layer"],[4,["25YXsB869CVqIY2QSmSCBI"]]],[10,131072,["_layer"],-118],[10,131072,["_layer"],-119],[10,131072,["_layer"],-120],[17,131072,["_layer"],[4,["53r/vig3JO+b1Ob4cPq73E"]]],[17,131072,["_layer"],[4,["d9qaAXPCVGIqa90y1A4H87"]]],[17,131072,["_layer"],[4,["14/TP0FHxLjJ3KCsQJoarS"]]],[10,false,["_active"],-121],[10,131072,["_layer"],-122]]],28]],[4,["1eksYdOApCxqVmzZAELiSp"]],[4,["f48NQgJQhCKp6b1aK65clb"]],[28,"backingCompletedWhite",131072,21,[[6,-124,[1,"2fqH2jQzBHgrt1nrm/sVeQ"],[5,640,128]],[59,0,-125,[1,"da6j0I29dMwIvvds0IKgPd"],[4,4292932351],29]],[2,"71m0N63zpOGYwSihOUVgFv",1,0]],[28,"backingCompleted",131072,21,[[6,-126,[1,"c2+81H3RJHC7/JaeW+wUpU"],[5,630,118]],[59,0,-127,[1,"52meTEwN9GLp96aB0sZ16A"],[4,3875536895],30]],[2,"20ApCrsvFOL4mQJYp4Dc+Y",1,0]],[51,0,{},20,[53,"49z2ZOgn9C0qKbebWZpPjD",-136,[69,"5ctLGPndNPB6JtufA+mErH",1,[[10,"missionEntry",["_name"],8],[7,["_lpos"],8,[1,0,0.5190000000000055,0]],[7,["_lrot"],8,[3,0,0,0,1]],[7,["_euler"],8,[1,0,0,0]],[7,["_lscale"],8,[1,1.5,1.5,1]],[10,false,["_active"],-128],[7,["_lpos"],-129,[1,58.678,0,0]],[38,["_contentSize"],[4,["a43hI9zOpKIbPzW2Du4611"]],[5,100,43.2]],[10,false,["_active"],-130],[7,["_lpos"],-131,[1,8.678,-21.6,0]],[7,["_lpos"],-132,[1,8.678,-21.6,0]],[10,131072,["_layer"],8],[17,131072,["_layer"],[4,["e6KZLM/PpAtbw6sgBAKrYu"]]],[17,131072,["_layer"],[4,["48Ez/2bDhLrbIwXX3binNi"]]],[17,131072,["_layer"],[4,["1aC+wDbYhBiYoenfgNR0YD"]]],[17,131072,["_layer"],[4,["a7A3yspItFCYmCiOJyHryu"]]],[17,131072,["_layer"],[4,["a9c18zzfxH87UNGwgfJ7tP"]]],[17,131072,["_layer"],[4,["25YXsB869CVqIY2QSmSCBI"]]],[10,131072,["_layer"],-133],[10,131072,["_layer"],-134],[10,131072,["_layer"],-135],[17,131072,["_layer"],[4,["53r/vig3JO+b1Ob4cPq73E"]]],[17,131072,["_layer"],[4,["d9qaAXPCVGIqa90y1A4H87"]]],[17,131072,["_layer"],[4,["14/TP0FHxLjJ3KCsQJoarS"]]],[17,131072,["_layer"],[4,["dbCT4zUzVLfIJ00eXLra8E"]]]]],31]],[4,["1eksYdOApCxqVmzZAELiSp"]],[4,["f48NQgJQhCKp6b1aK65clb"]],[51,0,{},1,[53,"76iW9TfctBs7bf9cLh0LH2",-137,[69,"56DWec7ipDgJ315HT9y5bR",1,[[17,"cont_Exp_Starfruit",["_name"],[4,["76iW9TfctBs7bf9cLh0LH2"]]],[38,["_lpos"],[4,["76iW9TfctBs7bf9cLh0LH2"]],[1,0,0,0]],[38,["_lrot"],[4,["76iW9TfctBs7bf9cLh0LH2"]],[3,0,0,0,1]],[38,["_euler"],[4,["76iW9TfctBs7bf9cLh0LH2"]],[1,0,0,0]],[17,true,["_active"],[4,["c5r2kEk6VKKKDsl/Rb+qNC"]]],[38,["_lpos"],[4,["c5r2kEk6VKKKDsl/Rb+qNC"]],[1,-372.087,534,0]],[17,-200,["_top"],[4,["29bkN/xA5OA69gJaRwe9oM"]]],[38,["_anchorPoint"],[4,["08Ha5D0w1E6bJQPzM+tFIB"]],[0,0,0.5]],[38,["_lpos"],[4,["82TlZPsKhK0q+8UEZ+nE5e"]],[1,-209.231667,-26.83166666666648,0]],[38,["_contentSize"],[4,["08Ha5D0w1E6bJQPzM+tFIB"]],[5,70,60]]]],32]],[4,["e9NrY21E9Oqbwmm5fUqjMm"]],[4,["e9NrY21E9Oqbwmm5fUqjMm"]],[4,["dbCT4zUzVLfIJ00eXLra8E"]],[4,["e9NrY21E9Oqbwmm5fUqjMm"]]],0,[0,-1,33,0,-2,38,0,-3,43,0,-4,46,0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,5,0,-2,46,0,0,2,0,-1,22,0,-2,23,0,-3,3,0,-4,4,0,-5,16,0,-6,18,0,-7,20,0,0,3,0,-1,24,0,-2,25,0,-3,26,0,-4,27,0,-5,28,0,-6,29,0,0,4,0,0,4,0,-1,12,0,-2,13,0,-3,14,0,-4,15,0,-5,10,0,0,5,0,0,5,0,-1,9,0,-2,11,0,0,9,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,10,0,-1,30,0,0,11,0,0,11,0,0,12,0,0,12,0,0,12,0,0,13,0,0,13,0,0,13,0,0,14,0,0,14,0,0,14,0,0,15,0,0,15,0,0,15,0,0,16,0,-1,17,0,-2,33,0,0,17,0,-1,31,0,-2,32,0,0,18,0,-1,19,0,-2,38,0,0,19,0,-1,36,0,-2,37,0,0,20,0,-1,21,0,-2,43,0,0,21,0,-1,41,0,-2,42,0,0,22,0,0,22,0,0,23,0,0,23,0,0,24,0,0,24,0,0,25,0,0,25,0,0,26,0,0,26,0,0,27,0,0,27,0,0,28,0,0,28,0,0,29,0,0,29,0,0,30,0,0,30,0,0,31,0,0,31,0,0,32,0,0,32,0,1,34,0,1,47,0,1,35,0,1,34,0,1,35,0,1,47,0,1,34,0,1,35,0,3,33,0,0,36,0,0,36,0,0,37,0,0,37,0,1,39,0,1,48,0,1,40,0,1,39,0,1,40,0,1,48,0,1,39,0,1,40,0,1,49,0,1,49,0,3,38,0,0,41,0,0,41,0,0,42,0,0,42,0,1,44,0,1,50,0,1,45,0,1,44,0,1,45,0,1,50,0,1,44,0,1,45,0,3,43,0,3,46,0,6,1,2,19,11,137],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,15,2,2,2,2,2,2,2,2,7,5,2,15,7,5,7,5,2,2,-1,14,2,2,2,12,2,2,12,2,2,12,12,-1,-2],[2,2,28,28,2,2,2,2,2,2,30,0,49,49,30,0,30,0,151,152,50,50,77,2,31,32,2,31,32,2,31,32,345,346,347]],[[[19,"particle_peachyTrail"],[73,"particle_peachyTrail",[-3],[-2],[2,"3dw3L9LExMhYl5K7SezCro",-1,0]],[72,"star",1,[-4],[2,"9d1v3uEi1FCopqhwu/hUNZ",1,0]],[178,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,2,[1,"f3MnPFRTFCHaWCe/FxP92F"],[[0,null],6,0],[104,[4,3640655871]],[3,2.7],[0],[0],[0],[0],[0],[71,3,6.283185307179586],[0],[3,1.15],[86,2.4],[3,4],[0],[54,true,[33,1,[36,[[42,[4,4292278271]],[12,1,[4,4292278271]]],[[76,255],[14,255,0.5],[14,0,1]]]]],[130,true,1,0.001,2.738,0.20671679660620837,[0]],[29,true,[58,1,1.5,[5,[0,0.4512820512820513,1],[[13,2,0.5481481481481482,1,1],[9,2,0.9925925925925926],[44,2,1,1]]]],[0],[0],[0]],[113,0,[40,2,[5,[0.002564102564102564,1],[[9,2,-0.16296296296296298],[9,2,-1]]],[5,[0,1],[[9,2,0.08148148148148149],[9,2,1]]]],[50,2,1.4,[5,[0,1],[[9,2,-0.9333333333333333],[9,2,-0.8888888888888888]]],[5,[0,1],[[9,2,0.8296296296296296],[9,2,0.8666666666666667]]]],[40,2,[5,[0,1],[[9,2,-0.1037037037037037],[9,2,-0.31851851851851853]]],[5,[0,1],[[9,2,0.07407407407407407],[9,2,0.3037037037037037]]]],[3,1]],[26,[32,1,[5,[0,1],[[9,2,1],[9,2,1]]]],[58,1,16,[5,[0,0.9897435897435898],[[47,2,-0.014814814814814815,-2.605664488017429,-2.605664488017429],[9,2,-1]]]],[32,1,[5,[0,1],[[9,2,1],[9,2,1]]]]],[23,[0],[0],[0],[0]],[90,true,[0],[0],[11,3,-0.4363323129985824,0.4363323129985824]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[89,0.1,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"eaKL/V/klKHrwpm0Dj1LyA"],[[2,null],6,0],[8],[11,3,0.5,1],[0],[0],[0],[0],[0],[0],[0],[3,1.5],[58,1,0.07,[5,[0,1],[[9,2,-0.051851851851851864],[47,2,1.0000000000000002,2.3111111111111113,2.3111111111111113]]]],[11,3,7,10],[0],[54,true,[82,3,[57,[[42,[4,4290832638]],[12,0.4754464285714285,[4,4289508095]],[12,1,[4,4281614591]]]],[57,[[42,[4,4291423487]],[12,1,[4,4281752575]]]]]],[70,true,1,2,0.6,2.738,0.20671679660620837,[0]],[29,true,[40,2,[5,[0,1],[[13,2,0.937037037037037,1,1],[13,2,0.5037037037037037,1,1]]],[5,[0,1],[[13,2,0.9629629629629629,1,1],[44,2,1,1]]]],[0],[0],[0]],[39,true,0,[11,3,-0.4,0.4],[43,3],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[90,true,[0],[0],[11,3,-6.283185307179586,6.283185307179586]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[9,10,9,10]],[[[22,".bin",1752791566,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19584,"length":3168,"count":1584,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":19584,"count":306,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3639747202396393,-0.3639747202396393,-7.044102545705755e-8],"maxPosition",8,[1,0.3639747202396393,0.3639747202396393,0.5762946009635925]]],-1],0,0,[],[],[]],[[[22,".bin",2892269462,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":29312,"length":5472,"count":2736,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":29312,"count":458,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3639747202396393,-0.3639747202396393,-0.5762946009635925],"maxPosition",8,[1,0.3639747202396393,0.3639747202396393,0.5762946009635925]]],-1],0,0,[],[],[]],[[[22,".bin",1031357132,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19584,"length":3168,"count":1584,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":19584,"count":306,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3639747202396393,-0.3639747202396393,-0.5762946009635925],"maxPosition",8,[1,0.3639747202396393,0.3639747202396393,3.6053197760566036e-8]]],-1],0,0,[],[],[]],[[[102,"outinesMort",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_VERTEX_COLOR":true}],[[[{"metallic":0.400000005960464,"roughness":0.806901276111603},"albedoScale",8,[1,1,1,1],"emissiveScale",8,[2,1,1,1,1]]],11]]],0,0,[0],[8],[13]],[[[22,".bin",3391045113,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":29312,"length":5472,"count":2736,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":29312,"count":458,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4079747200012207,-0.4079747200012207,-0.6202946305274963],"maxPosition",8,[1,0.4079747200012207,0.4079747200012207,0.6202946305274963]]],-1],0,0,[],[],[]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4278254236],"secondColor",8,[4,4278249103],"thirdColor",8,[4,4278235928],"fourthColor",8,[4,4278235928]]],11]]],0,0,[0],[8],[3]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4279467263],"secondColor",8,[4,4282505983],"thirdColor",8,[4,4281434081],"fourthColor",8,[4,4281434081]]],11]]],0,0,[0],[8],[3]],[[[19,"Mango"],[91,"Mango",[-6,-7,-8,-9],[[84,-2,[1,"69XgLnCN1FDqQpuZajQwSv"]],[35,2,-3,[1,"e2di8/tsRItZqVfMsZ7yR0"]],[77,0.5,-4,[1,"bcdp/t3YVOnpdBHx7vH7Z6"]],[55,-5,[1,"d1T5M6i85OjLF7XbGII6hZ"]]],[2,"33DahIOK1JYY78Kejp1XdJ",-1,0],[1,-1.809,0,0]],[52,"MangoHalf1",false,1,[[15,-10,[1,"ddb5CSfMxEArhJsHzT0LEG"],[0],[16],1],[35,8,-11,[1,"07NTy+OH1BNrJZb7fQyAal"]]],[2,"67zql/e2NOv4QxWCxBACN8",1,0],[3,-0.7071068407911881,-6.181723327993986e-8,-6.181724749079482e-8,0.7071067215818966],[1,-90.00000965934633,-0.000010017912624975475,-3.070369067582117e-13]],[52,"MangoHalf2",false,1,[[15,-12,[1,"edz4Nk82pJK5WuSxfVEoMG"],[2],[16],3],[35,8,-13,[1,"ee/V7qqqhNILnhNYjHES6C"]]],[2,"d6XbEK+7RBGLumPoWnD0eM",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[81,"MangoWhole",1,[[15,-14,[1,"a7DUS8Et1EEYZ7w7nPmmFu"],[4],[16],5]],[2,"e6caI5yTxL1JbOGSPB6us+",1,0],[3,-0.7071068407911585,2.1354029310555118e-7,2.1354033573811607e-7,0.7071067215818668],[1,-90.0000096593463,0.00003460568926163386,5.374099021428238e-13]],[52,"MangoOutline",false,1,[[15,-15,[1,"c6LFX8x59Ci4Fvitbq0yY/"],[6],[16],7]],[2,"dcM0cMrp9F8b9DEpTyHMIx",1,0],[3,-0.7071068407911585,2.1354029310555118e-7,2.1354033573811607e-7,0.7071067215818668],[1,-90.0000096593463,0.00003460568926163386,5.374099021428238e-13]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,5,0,6,1,15],[0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,4],[1,348,1,349,1,350,351,352]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"alphaThreshold":11},"mainColor",8,[4,4294913930],"secondColor",8,[4,4294951644],"thirdColor",8,[4,4293865069],"fourthColor",8,[4,4293865069]]],11]]],0,0,[0],[8],[3]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["beFEDfothEbpHC1i1b2XCf"]}],[1],0,[],[],[]],[[{"name":"ButtonRed","rect":{"x":2,"y":2,"width":304,"height":108},"offset":{"x":-0.5,"y":-0.5},"originalSize":{"width":309,"height":111},"rotated":false,"capInsets":[60,0,242,0],"packable":true}],[3],0,[0],[11],[353]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["c3CX9d7H1BBoXVH7Kb2CMa"]}],[1],0,[],[],[]],[[{"name":"BananaFreezeTabBacking","rect":{"x":12,"y":1,"width":232,"height":62},"offset":{"x":0,"y":0},"originalSize":{"width":256,"height":64},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[354]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["c48e5FQ/9EIas9xFBf3E0g"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["c5RkX9jTREI6oj+8gx6u4U"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["c5c6gsn4BGm5yEgSxGwpIt"]}],[1],0,[],[],[]],[[[22,".bin",2768198485,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":26240,"length":4896,"count":2448,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":26240,"count":410,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.44731488823890686,-0.44731462001800537,-0.4841952323913574],"maxPosition",8,[1,0.447314590215683,0.44731467962265015,0.4841952323913574]]],-1],0,0,[],[],[]],[[[22,".bin",1149008733,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":26240,"length":4896,"count":2448,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":26240,"count":410,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.40331488847732544,-0.40331462025642395,-0.440195232629776],"maxPosition",8,[1,0.40331459045410156,0.40331465005874634,0.440195232629776]]],-1],0,0,[],[],[]],[[[22,".bin",3864645579,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12416,"length":2016,"count":1008,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":12416,"count":194,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.40331488847732544,-0.40331462025642395,-2.449058200681975e-8],"maxPosition",8,[1,0.40331462025642395,0.40331465005874634,0.440195232629776]]],-1],0,0,[],[],[]],[[[22,".bin",1743072565,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":12416,"length":2016,"count":1008,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":12416,"count":194,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.40331485867500305,-0.40331462025642395,-0.440195232629776],"maxPosition",8,[1,0.40331459045410156,0.40331465005874634,4.635168693312153e-8]]],-1],0,0,[],[],[]],[[[102,"outinesMort",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_VERTEX_COLOR":true}],[[[{"metallic":0.400000005960464,"roughness":0.806901276111603},"albedoScale",8,[1,1,1,1],"emissiveScale",8,[2,1,1,1,1]]],11]]],0,0,[0],[8],[13]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[355,7]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["c72KTFFZpOVpC/BCt0ohMj"]}],[1],0,[],[],[]],[[{"name":"splat12","rect":{"x":3,"y":0,"width":253,"height":256},"offset":{"x":1.5,"y":0},"originalSize":{"width":256,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[356]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4279467263],"secondColor",8,[4,4282505983],"thirdColor",8,[4,4281434081],"fourthColor",8,[4,4281434081]]],11]]],0,0,[0],[8],[3]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[40,5]],[[{"base":"2,2,0,0,2,0","rgbe":true,"mipmaps":[{"front":"d032ac98-05e1-4090-88bb-eb640dcb5fc1_b47c0_e9a6d","back":"d032ac98-05e1-4090-88bb-eb640dcb5fc1_b47c0_40c10","left":"d032ac98-05e1-4090-88bb-eb640dcb5fc1_b47c0_8fd34","right":"d032ac98-05e1-4090-88bb-eb640dcb5fc1_b47c0_74afd","top":"d032ac98-05e1-4090-88bb-eb640dcb5fc1_b47c0_bb97f","bottom":"d032ac98-05e1-4090-88bb-eb640dcb5fc1_b47c0_7d38f"}]}],[32],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[69,5]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["d1BmiHh/JNUY/ANfXFxSc3"]}],[1],0,[],[],[]],[[{"name":"TabCrossFolded","rect":{"x":0,"y":0,"width":65,"height":51},"offset":{"x":0,"y":0},"originalSize":{"width":65,"height":51},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[357]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{"alphaThreshold":0},"mainColor",8,[4,4279835135],"secondColor",8,[4,4279242965],"thirdColor",8,[4,4278716276],"fourthColor",8,[4,4279242405]]],11]]],0,0,[0],[8],[3]],[[[19,"particle_frenzySideRight"],[73,"particle_frenzySideRight",[-3],[-2],[2,"f5rA7NU3BFJ4WKvhFrlaVU",-1,0]],[72,"particle_frenzySideRight-001",1,[-4],[2,"0dfCJnKrpMOrA2OUff7Irb",1,0]],[89,0.1,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"ee3o7+7hdIBb/XCrTcUE+s"],[[0,null],6,0],[33,1,[57,[[42,[4,4280629716]],[12,0.5044642857142857,[4,4281758975]],[12,1,[4,4281631999]]]]],[11,3,1,3],[0],[0],[11,3,7,9],[0],[0],[71,3,3.141592653589793],[0],[11,3,0.4,0.8],[179,3,1,2,2.4],[3,9],[0],[54,true,[82,3,[57,[[42,[4,4278202367]],[12,0.16294642857142855,[4,4278202367]],[12,1,[4,4283945983]]]],[57,[[42,[4,4278839039]],[12,1,[4,4283945983]]]]]],[83,true,1,2,3,2.738,1.3962634015954636,0.20671679660620837,[0],[1,0,0,-180]],[29,true,[40,2,[5,[0,0.882051282051282],[[47,2,0.7962962962962963,-0.11479028697571746,-0.11479028697571746],[47,2,0.003703703703703704,-1.743295019157089,-1.743295019157089]]],[5,[0,1],[[9,2,1],[155,2,-3.0858585858585847,-3.0858585858585847]]]],[0],[0],[0]],[113,0,[11,3,-5,5],[11,3,-2,-1.5],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[11,3,0.7853981633974483,1.5707963267948966]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[89,0.1,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"c6vTO/3ylMM70NvztBpuET"],[[2,null],6,0],[33,1,[57,[[42,[4,4281298409]],[12,0.5044642857142857,[4,4281782271]],[12,1,[4,4287291903]]]]],[11,3,1,3],[0],[0],[11,3,6,8],[0],[0],[71,3,3.141592653589793],[0],[11,3,0.4,0.8],[180,0.5,2.4],[3,9],[0],[54,true,[82,3,[57,[[42,[4,4278202367]],[12,0.16294642857142855,[4,4278202367]],[12,1,[4,4283945983]]]],[57,[[42,[4,4278839039]],[12,1,[4,4283945983]]]]]],[83,true,1,2,3,2.738,1.3962634015954636,0.20671679660620837,[0],[1,0,0,100]],[29,true,[40,2,[5,[0,0.882051282051282],[[47,2,0.7962962962962963,-0.11479028697571746,-0.11479028697571746],[47,2,0.003703703703703704,-1.743295019157089,-1.743295019157089]]],[5,[0,1],[[9,2,1],[155,2,-3.0858585858585847,-3.0858585858585847]]]],[0],[0],[0]],[113,0,[11,3,-5,5],[11,3,-2,-1.5],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[11,3,0.7853981633974483,1.5707963267948966]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[9,10,9,10]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["d2d7yoQTVGN5icstajuDFm"]}],[1],0,[],[],[]],[[{"name":"BananaFrenzyTabBacking","rect":{"x":11,"y":1,"width":234,"height":62},"offset":{"x":0,"y":0},"originalSize":{"width":256,"height":64},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[358]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4282022398],"secondColor",8,[4,4286163455],"thirdColor",8,[4,4278201043],"fourthColor",8,[4,4278201043]]],11]]],0,0,[0],[8],[3]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["d2+P+xFhdFzqluT1+DbuAb"]}],[1],0,[],[],[]],[[{"name":"plum","rect":{"x":1,"y":0,"width":92,"height":93},"offset":{"x":0,"y":0.5},"originalSize":{"width":94,"height":94},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[359]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["d3KKDaX/1CTJLm7ZzB/eT2"]}],[1],0,[],[],[]],[[{"name":"pear","rect":{"x":2,"y":0,"width":80,"height":98},"offset":{"x":0.5,"y":0.5},"originalSize":{"width":83,"height":99},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[360]],[[[19,"BananaSP_double"],[108,"BananaSP_double",[-11,-12,-13,-14,-15],[[84,-7,[1,"01XpxQfytbzJPCnkIzSHCA"]],[35,2,-8,[1,"67KdewkNtMbaaU5Q0bawu8"]],[77,0.65,-9,[1,"7cnhTYP3ZE378LuawJ9t2w"]],[55,-10,[1,"166ak6c2ZFbY/eJPgeQdkC"]]],[148,"d5nv8PHZlY85D9IYNpJMmk",-6,0,[[101,["_trailModule","_particleSystem"],-3,[4,["eaKL/V/klKHrwpm0Dj1LyA"]],-2,[4,["eaKL/V/klKHrwpm0Dj1LyA"]]],[101,["_trailModule","_particleSystem"],-5,[4,["f3MnPFRTFCHaWCe/FxP92F"]],-4,[4,["f3MnPFRTFCHaWCe/FxP92F"]]]],[-1]]],[51,0,{},1,[53,"3dw3L9LExMhYl5K7SezCro",-21,[69,"91QMH8PiRIpZ0LcwgVSFhE",1,[[10,"particle_bananaDoubleTrail",["_name"],-16],[7,["_lpos"],-17,[1,0,0,0]],[7,["_lrot"],-18,[3,0,0,0,1]],[7,["_euler"],-19,[1,0,0,0]],[10,true,["_active"],-20]]],12]],[4,["3dw3L9LExMhYl5K7SezCro"]],[120,"BananaSP_doubleHalf1",false,1,[-24],[[15,-22,[1,"2aWW7hO5NNZI+n6p6XePbU"],[4],[16],5],[35,8,-23,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"61dZSVJh1D/pbKieN9iJiu",1,0],[3,-0.7071068407911907,0,0,0.7071067215818994],[1,-90.00000965934629,0,0]],[120,"BananaSP_doubleHalf2",false,1,[-27],[[15,-25,[1,"22JO86ex1FzYJzXGoNICOb"],[8],[16],9],[35,8,-26,[1,"24ubKwWcpBPp7H5j/LBdFL"]]],[2,"e2fv32CtRIf7ymyGwaMig0",1,0],[3,-0.7071068407911907,0,0,0.7071067215818994],[1,-90.00000965934629,0,0]],[81,"BananaSP_doubleWhole",1,[[15,-28,[1,"57jnQV925OU6Pv9uuvrsR0"],[0],[16],1]],[2,"8e6jzNaihNTYKgI6atSpdy",1,0],[3,-0.7071068407911826,1.0677016076363387e-7,1.0677017497448912e-7,0.7071067215818914],[1,-90.0000096593463,0.00001730284635804297,-3.070370720683372e-13]],[121,"BananaSP_doubleHalf1Outline",4,[[15,-29,[1,"51l2C/XU5A/YjVji4FVkuZ"],[2],[16],3]],[2,"92wtGSgexHcaDgkrgaxqPR",1,0],[1,1.7267523421623934e-19,-2.610004749683004e-12,0.000017302846358042774]],[121,"BananaSP_doubleHalf2Outline",5,[[15,-30,[1,"e2gAij5YRGZa7rGnWsqUbn"],[6],[16],7]],[2,"d26EG74WVKc4N6parw/OTg",1,0],[1,-2.544426174326281e-14,-2.610004738965784e-12,0.000017302846358042774]],[81,"BananaSP_doubleOutline",1,[[15,-31,[1,"deSjlwjjFFYZzhohUR2o4D"],[10],[16],11]],[2,"02w3WGultDzpCmQaVQshMq",1,0],[3,-0.7071068407911826,1.0677016076363385e-7,1.0677017497448914e-7,0.7071067215818913],[1,-90.0000096593463,0.00001730284635804297,-3.070370720683372e-13]]],0,[0,-1,2,0,16,2,0,17,2,0,16,2,0,17,2,0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,6,0,-2,4,0,-3,5,0,-4,9,0,-5,2,0,1,3,0,1,3,0,1,3,0,1,3,0,1,3,0,3,2,0,0,4,0,0,4,0,-1,7,0,0,5,0,0,5,0,-1,8,0,0,6,0,0,7,0,0,8,0,0,9,0,6,1,31],[0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,12],[81,53,12,54,81,55,12,56,81,57,12,58,361]],[[[19,"PeachyText"],[68,"PeachyText",8192,[-4,-5,-6],[[34,-2,[1,"9cbm062a5HtZN5n2jXpeS6"]],[100,-3,[1,"f8p1uLb5JPSrIiVdAGWKE2"],[6],7]],[2,"b330N1rGJAurGuJwVync3O",-1,0]],[30,"top_text",8192,1,[[6,-7,[1,"bdTt6bcDFK6bOK01olEM0W"],[5,270.4,100.2]],[64,"PEACHY!",70,70,70,false,false,-8,[1,"7dzxZEBjVNkocUIIXjqaaw"],0,1],[25,6,-9,[1,"2bRW0VautAP75COMRRNhVz"],[4,4280036734]],[62,false,1,-10,[1,"6151qDjWhMqKYVadNpOsBP"],[0,3,-3]],[63,false,1,-11,[1,"2dJx4tIIFFcZQ+qoARN4M5"],[0,3,-3]]],[2,"f5Pvvg3gpPNIUQdctRN6ND",1,0],[1,0,77.147,0],[1,0.65,0.65,0.65]],[30,"middle_text",8192,1,[[6,-12,[1,"7fJv6dPXdLyLyPPVq/wbOW"],[5,213.09,238.8]],[64,"+2",180,180,180,false,false,-13,[1,"94mZp3jCxGdoZJ1mOApQcQ"],2,3],[25,6,-14,[1,"b2sJ6vP7hJp6sau3Q722MH"],[4,4280036734]],[62,false,1,-15,[1,"26e3l3kitGk5fUbQ9UbNkQ"],[0,3,-3]],[63,false,1,-16,[1,"dbzNeqaCRLobsI1RoDd6Q3"],[0,3,-3]]],[2,"f2K3UCVQ9MELtKuWnOAsy2",1,0],[1,0,4.118,0],[1,0.65,0.65,0.65]],[30,"bottom_text",8192,1,[[6,-17,[1,"cajBPzUcRJnKfVPqUBQ//1"],[5,293.09,100.2]],[64,"SECONDS",70,70,70,false,false,-18,[1,"6198NQpaRBzpmhXjpSjXmL"],4,5],[25,6,-19,[1,"69iI8q5HhDPYtqkvkGDba4"],[4,4280036734]],[62,false,1,-20,[1,"bemj1bfalIhIpXIUcz57Rd"],[0,3,-3]],[63,false,1,-21,[1,"4a+mmIH6RL8J8TV6qHmmkR"],[0,3,-3]]],[2,"38zoxPvZBKx7lVyf8w8kAD",1,0],[1,0,-77.147,0],[1,0.65,0.65,0.65]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,0,2,0,0,2,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,0,3,0,0,3,0,0,4,0,0,4,0,0,4,0,0,4,0,0,4,0,6,1,21],[0,0,0,0,0,0,0,0],[7,5,7,5,7,5,-1,14],[82,0,82,0,82,0,14,14]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["d8erCr/DRH3KJa1CMm3aT5"]}],[1],0,[],[],[]],[[[19,"particle_juiceCriticalTrail"],[202,"particle_juiceCriticalTrail",[[-2,[221,0.3,-0.8,-1,-3,[1,"99LTjfbd5HxYa+mt/O415H"]]],1,4],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[151,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[0,null],6,0],[8],[3,1.8],[0],[0],[0],[0],[0],[0],[0],[3,0.8],[0],[3,40],[0],[54,true,[33,1,[36,[[42,[4,4294967282]],[42,[4,4294967282]],[12,0.85,[4,4294960233]]],[[14,255,0.002232142857142857],[14,255,0.9933035714285714]]]]],[295,true,3,2,true,0.3,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[0],[0],[0]],[182,true,[40,2,[5,[0,1],[[13,2,0.05185185185185185,1,1],[48,2,0.23703703703703705,-0.0628019323671489,1,-0.0628019323671489,1]]],[5,[0,1],[[48,2,-0.02962962962962963,0.0395738203957382,1,0.0395738203957382,1],[13,2,-0.3111111111111111,1,1]]]],[50,2,10,[5,[0,1],[[216,-0.00001903306699875658,1,1],[45,0.0001960221098164969,0.00021505517681525349,1,0.00021505517681525349,1]]],[5,[0,0.6871794871794872,1],[[48,2,0.2736939847396931,0.021851776699007442,1,0.021851776699007442,1],[48,2,0.5259259259259259,0.5349794238683128,0.21019454274343388,0.5349794238683128,2.0511313010981804],[45,1,1.5154826958105647,1,1.5154826958105647,1]]]],[40,2,[5,[0,1],[[9,2,0.05185185185185185],[9,2,0.28888888888888886]]],[5,[0,1],[[9,2,-0.02962962962962963],[9,2,-0.26666666666666666]]]],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-4],[31,1,1]]],0,[0,3,1,0,-1,2,0,0,1,0,9,2,0,6,1,4],[0,0],[-1,10],[61,40]],[[[22,".bin",2257668334,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25344,"length":3960,"count":1980,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":25344,"count":396,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.39462825655937195,-0.41459226608276367,-0.3946281969547272],"maxPosition",8,[1,0.39462825655937195,0.7459818720817566,0.39462825655937195]]],-1],0,0,[],[],[]],[[[22,".bin",4267852438,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24960,"length":4080,"count":2040,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":24960,"count":390,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4529409408569336,-0.46525412797927856,-0.45256155729293823],"maxPosition",8,[1,0.4524686634540558,0.7834059000015259,0.4525407552719116]]],-1],0,0,[],[],[]],[[[19,"particle_juiceFrenzy"],[73,"particle_juiceFrenzy",[-3],[-2],[2,"26m5iuFiBH0IDxLTSmfkwE",-1,0]],[72,"particle_juiceSmall",1,[-4],[2,"84soY8lCdDP51aCv15FOUm",1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"7cCo6ncQhAk6p/xX35g7Zz"],[[0,null],6,0],[8],[3,0.4],[0],[0],[3,2.1],[0],[0],[71,3,6.283185307179586],[0],[3,1.2],[3,0.4],[0],[0],[[60,0.01,[3,16]]],[54,true,[82,3,[57,[[42,[4,4289592575]],[12,1,[4,4291420927]]]],[57,[[42,[4,33549236]],[12,1,[4,33554431]]]]]],[70,true,1,2,0.0001,2.738,0.20671679660620837,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[0],[0],[0]],[39,true,0,[11,3,-8,8],[11,3,-3.15,3.15],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[11,3,0.7853981633974483,1.5707963267948966]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"2ciXM6+NlLOIY3M3GEvlxG"],[[2,null],6,0],[8],[3,1.8],[0],[0],[11,3,4.2,8],[0],[0],[0],[0],[3,0.75],[58,1,2.4,[5,[0,1],[[37,1,1,1,1],[45,1,1,1,1,1]]]],[0],[0],[[60,0.01,[3,14]]],[54,true,[82,3,[57,[[42,[4,4278202367]],[12,0.16294642857142855,[4,4278202367]],[12,1,[4,4283945983]]]],[57,[[42,[4,4278839039]],[12,1,[4,4283945983]]]]]],[83,true,1,2,0.0001,2.738,1.2217304763960306,0.20671679660620837,[0],[1,0,0,43.3]],[29,true,[32,1,[5,[0,0.14102564102564102,1],[[13,2,1,0.04860266743843023,1],[47,2,0.9629629629629629,-0.6339319845464617,-0.6339319845464617],[37,-1.1210613598673298,1,-1.1210613598673298,1]]]],[0],[0],[0]],[39,true,0,[11,3,-5,5],[11,3,-2,-1.5],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[11,3,0.7853981633974483,1.5707963267948966]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[9,10,9,10]],[[[22,".bin",1550610421,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":57384,"length":7680,"count":3840,"stride":2}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":83928,"length":2160,"count":1080,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":57384,"count":797,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":65064,"length":18864,"count":262,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5480701923370361,-0.2606166899204254,-0.5218855142593384],"maxPosition",8,[1,0.5453969240188599,0.39043375849723816,0.5218855142593384]]],-1],0,0,[],[],[]],[[[22,".bin",3780013751,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":57384,"length":7680,"count":3840,"stride":2}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":84288,"length":2160,"count":1080,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":57384,"count":797,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":65064,"length":19224,"count":267,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.6104131937026978,-0.2902618646621704,-0.5812499523162842],"maxPosition",8,[1,0.6074358224868774,0.43484556674957275,0.5812499523162842]]],-1],0,0,[],[],[]],[[[102,"m_starfruit",[{"rasterizerState":{},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthWrite":false}}],[{"USE_VERTEX_COLOR":true,"HAS_SECOND_UV":true}],[[[{"metallic":0.200000002980232,"roughness":0.800000011920929},"albedoScale",8,[1,1,1,1],"emissiveScale",8,[2,1,1,1,1]]],11]]],0,0,[0],[8],[13]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["dfJxi22vlOK56yR/C+I2ug"]}],[1],0,[],[],[]],[[{"name":"SliceDiamondCritical","rect":{"x":3,"y":8,"width":26,"height":114},"offset":{"x":0,"y":-1},"originalSize":{"width":32,"height":128},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[362]],[[[19,"particle_juiceOrange"],[73,"particle_juiceOrange",[-3],[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[72,"particle_juiceSmall",1,[-4],[2,"1eGkpbHVRA7YQtVRbaS87n",1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"17+MscORlKD6npLDx1rPQ0"],[[0,null],6,0],[8],[3,0.42],[0],[0],[3,8.4],[0],[0],[0],[0],[3,0.5],[3,0.3],[0],[0],[[60,0.01,[3,44]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[70,true,1,2,0.0001,2.738,0.20671679660620837,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[0],[0],[0]],[39,true,0,[11,3,-11.7,11.7],[11,3,-3.45,3.45],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[2,null],6,0],[8],[3,1.155],[0],[0],[11,3,3.6,6.4],[0],[0],[0],[0],[3,0.78],[58,1,2.4,[5,[0,1],[[37,1,1,1,1],[45,1,1,1,1,1]]]],[0],[0],[[60,0.01,[3,15]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[83,true,1,2,0.0001,2.738,1.2217304763960306,0.20671679660620837,[0],[1,0,0,55]],[29,true,[32,1,[5,[0,0.14102564102564102,1],[[13,2,1,0.04860266743843023,1],[47,2,0.9629629629629629,-0.6339319845464617,-0.6339319845464617],[37,-1.1210613598673298,1,-1.1210613598673298,1]]]],[0],[0],[0]],[39,true,0,[11,3,-10.2,10.2],[43,3],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[153,83,153,83]],[[[19,"fruitSplash_sprite"],[165,"fruitSplash_sprite",262144,[-5],[[6,-2,[1,"28fa8m2Y5JdZmX4p9Ggzf8"],[5,250,77]],[143,-3,[1,"d1xbxPCx1LoYrkjbgcfVRj"]],[97,true,-4,[1,"d1e/nZJ8BIFrXDRyk1+pv2"],[1],2]],[2,"9b5WJX0+ZNk5O7j+HMT6IF",-1,0],[1,0.7,0.7,1]],[28,"assets",262144,1,[[6,-6,[1,"85+fTbudJDDbucYC5a+AfF"],[5,250,77]],[18,-7,[1,"20lgtZYItGB5AdGnPBKlel"],0]],[2,"19oeghMsBFa7IiWiok/0c+",1,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,6,1,7],[0,0,0],[2,-1,14],[363,154,154]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[83,5]],[[[19,"container_pause"],[68,"container_pause",131072,[-9,-10,-11,-12,-13,-14,-15,-16],[[6,-5,[1,"34FlMpyCVBc4PTfJzCa6d3"],[5,1280,768]],[329,42,1280,0,-6,[1,"03Zrkk0dZFfK/1MW6Ttd6K"]],[262,true,-7,[1,"2dVRyW+2xCaJd0TdKs6Wlv"],[48,49]],[350,-8,[1,"99KreFjslPm6tOa1bxeV8B"]]],[138,"34Y34et0VLbafUs88I0RBN",-4,0,[-1,-2,-3]]],[68,"cont_mission",131072,[-18,-19,-20,-21,-22,-23,-24],[[6,-17,[1,"f3qhofxmVHAJKpuRx7WCi2"],[5,700,600]]],[2,"22fg4mfr9O95dPu8M6Uh/j",1,0]],[49,"border",131072,2,[-26,-27,-28,-29,-30,-31],[[34,-25,[1,"0aA2X/o0tG67iJRxUI/loa"]]],[2,"95eNVEbDVPtaLr8YkJQWZI",1,0],[1,0,-294.412,0]],[67,"headerWood",131072,2,[-34,-35,-36,-37,-38],[[6,-32,[1,"8fjVmGjE9NLIoYd8rKcMtq"],[5,903.02,150]],[78,1,0,-33,[1,"2acb1ENfpOvpedLWsP4yYv"],20]],[2,"8c7LkH/xdJW5dmGxiahf/X",1,0],[1,0.669,227.203,0],[1,0.8,0.8,1]],[67,"text_paused",131072,1,[-43],[[6,-39,[1,"21FAP0aulEjI8128V4fkfE"],[5,900,150]],[74,"PAUSED",110,110,0,2,false,false,-40,[1,"5flMoPBp1CDYLm0mNjEBGK"],30,31],[25,8,-41,[1,"25Ln73SNxOVosQczskzj95"],[4,4280315774]],[330,17,-800,-191,-42,[1,"9bLJZo4MtJB5ZQzCO9MRFK"]]],[2,"41XzDdH4pK6aNHpcLpLaXs",1,0],[1,0,1124,0],[1,0.8,0.8,0.8]],[4,["49z2ZOgn9C0qKbebWZpPjD"]],[4,["49z2ZOgn9C0qKbebWZpPjD"]],[4,["49z2ZOgn9C0qKbebWZpPjD"]],[67,"ButtonSFX",131072,1,[-48],[[6,-44,[1,"720ONlEfBO2YpDFPeeXMcA"],[5,102,102]],[158,0,false,-45,[1,"1fM5gsZ+VNK7ncsEhJuQUQ"],39],[80,3,0.9,-46,[1,"88MFqRJFFDWIc4XlTyr1Yb"],[[95,"76f71VENV5CL6CIxvHjGTZ+","btnToggleSFX",1]],40],[227,36,27.850000000000023,-305.456,-47,[1,"07ZfuGphlBMqKHCnDZ7HOj"]]],[2,"e5gnZotDRM36VEM4Mxba3q",1,0],[1,579,-656.306,0],[1,0.65,0.65,1]],[67,"ButtonMusic",131072,1,[-53],[[6,-49,[1,"5bntkFIrNMf4bmqUY5NJSb"],[5,102,102]],[158,0,false,-50,[1,"a09oN/QRFI8qdBH1GrZy+c"],42],[80,3,0.9,-51,[1,"2eyXAPE0NDj5KZhQ49uTIU"],[[95,"76f71VENV5CL6CIxvHjGTZ+","btnToggleMusic",1]],43],[227,36,117.91999999999996,-305.456,-52,[1,"47jZgG1ElGloANv6ksVV4H"]]],[2,"22SU0C0TBL06pcUbITqmYj",1,0],[1,488.93000000000006,-656.306,0],[1,0.65,0.65,1]],[30,"ButtonPause",131072,1,[[6,-54,[1,"adybFRc1tOpqXT26pYSBVk"],[5,128,124]],[18,-55,[1,"39UjXe7FpOeqfV+9RR8CUA"],44],[331,36,-150,-200,676.8620000000001,33.14499999999998,-56,[1,"bb3LYjzDNNNatzI4aOGAxV"]],[80,3,0.9,-57,[1,"12zH5tYQRJNJBDmFdFA0xe"],[[95,"76f71VENV5CL6CIxvHjGTZ+","btnPauseClicked",1]],45],[98,-58,[1,"a58yN1Ue1C3aTjgjHyY5+a"],[46,47]]],[2,"75hmMOw91K0pRhOUaocnxn",1,0],[1,804.8,-316.755,0],[1,0.55,0.55,1]],[67,"IconTimer",131072,4,[-62],[[6,-59,[1,"492HZ/ZplM8aei1CO1teAw"],[5,62,72]],[18,-60,[1,"86Mdk4SMRB9a2QQjgKahXQ"],17],[97,true,-61,[1,"83OjJmvgBJ9JDmXRYkAZrK"],[18],19]],[2,"5asnfLBxdCwaYkuJN5heJ+",1,0],[1,-415.048,6.415,0],[1,0.5,0.5,1]],[30,"ButtonExit",131072,1,[[6,-63,[1,"d4xiDsZhFJL7GMIXC4kcBc"],[5,128,128]],[18,-64,[1,"0aa0iWwDpCTaHTt1htMoir"],32],[228,20,29.29099999999994,676.8620000000001,-300,-180,-65,[1,"d9BMPUz/FPQ4eoPRqdYFp/"]],[80,3,0.9,-66,[1,"7b7JzFE+pA954joOuixGaz"],[[95,"76f71VENV5CL6CIxvHjGTZ+","btnExitClicked",1]],33]],[2,"31cLD8TNhA4JDuh7j35l9Y",1,0],[1,-180,-626.4,0],[1,0.9,0.9,1]],[30,"ButtonRestart",131072,1,[[6,-67,[1,"ecRJV001BAJ43224WFBdDu"],[5,128,128]],[18,-68,[1,"0aTw+Bq2hF0LESEuzfBZlI"],34],[185,20,29.29099999999994,676.8620000000001,-300,-69,[1,"47nG+IijRAELGAlFpRxwB3"]],[80,3,0.9,-70,[1,"bd4yTQD/pAx5wcLstGiP1P"],[[95,"76f71VENV5CL6CIxvHjGTZ+","btnRetryClicked",1]],35]],[2,"fbLm7hK+FDWrJpXrcryJW8",1,0],[1,0,-626.4,0],[1,0.9,0.9,1]],[30,"ButtonPlay",131072,1,[[6,-71,[1,"0eA/zfE4xJYoWL19nXNvrz"],[5,128,128]],[18,-72,[1,"e6diNWF9FEmqMqkkQNsXgQ"],36],[228,20,29.29099999999994,676.8620000000001,-300,180,-73,[1,"cfGvyUQKhH54g/XVNo2FlV"]],[80,3,0.9,-74,[1,"28MASiwm5MgJ4B+dVxDy9e"],[[95,"76f71VENV5CL6CIxvHjGTZ+","btnResumeClicked",1]],37]],[2,"95WH/8tDlG+YcTU7latOmC",1,0],[1,180,-626.4,0],[1,0.9,0.9,1]],[68,"popup",131072,[2],[[6,-75,[1,"fdQQ1c6PZGrIT9yRWmTN0x"],[5,620,620]],[185,18,-1429.780029,-88.789,-1120.4,-76,[1,"74o9t80s5FpYWf2HAJvR0R"]]],[2,"92/ygY3QRNlKrMwg4VnJXq",1,0]],[20,"text_headerWood",131072,4,[[6,-77,[1,"3dqlIRgJZALaVKuMky2Arc"],[5,500,100]],[74,"Missions",70,70,0,2,false,false,-78,[1,"29rxwt+RxPtryHi6nTlyVX"],8,9],[25,5,-79,[1,"e9ijjUTbhE6Lgp0mbRzQo1"],[4,4278528353]]],[2,"64z0kInCFIaaDoa2/spF0k",1,0],[1,3.9710000000000036,23.752999999999815,0]],[167,"TabCrossFolded",false,131072,4,[[21,-80,[1,"e9UyISE6pE+6RHPdqG/HAq"],[5,65,51],[0,0.5,1]],[18,-81,[1,"41Rx13bb9J16anJ1noSlI1"],10],[80,3,0.9,-82,[1,"16YBTfGF9NDKasoHSYmHeP"],[[312,"8dfb7xSH/ZGV4/J/8IUDrxQ","btnCloseClicked"]],11]],[2,"1eSlwIzhJLfoDx0t/HGYAG",1,0],[1,364.152,80.112,0],[1,1.8,1.8,1]],[20,"text_Time",131072,4,[[21,-83,[1,"877R/wf7pNmb/U/qI6Tn1U"],[5,220,50],[0,0,0.5]],[99,"New missions in",0,32,32,32,2,false,false,-84,[1,"e2x/ZDSXlIGII44Bj3JbBQ"],12,13],[25,3,-85,[1,"1e1j0ZCbVLhqsRTxZBpleH"],[4,4278528353]]],[2,"c8vBGPft1B9YUVGdkM4zxh",1,0],[1,-429.951,43.075,0]],[20,"text_Timer",131072,4,[[21,-86,[1,"22nGk9DaRCeogGZjjhc9au"],[5,220,50],[0,0,0.5]],[99,"23H 59M",0,32,32,32,2,false,false,-87,[1,"29GzOB5JtCK684FKzJBnn3"],14,15],[25,3,-88,[1,"63egXh35pBTIobGb2oJpoU"],[4,4278528353]]],[2,"abEl5TmjtPHbFtzOBQeUz3",1,0],[1,-395.61,7.785,0]],[49,"cont_missionEntry1",131072,2,[-90,-91],[[6,-89,[1,"99r3ZmR95AUpVRanbwEDVS"],[5,640,128]]],[2,"55fBwx6bFM8pT3ly6TSEjy",1,0],[1,0,99.661,0]],[79,"cont_backingComplete",false,131072,21,[-93,-94],[[34,-92,[1,"bde+5eGmdIyp3WQcMe9yVO"]]],[2,"c1VVfMm4pN2LBz4DGAcoPj",1,0]],[49,"cont_missionEntry2",131072,2,[-96,-97],[[6,-95,[1,"7aGRO7xuxHoqa4S84gEcAq"],[5,640,128]]],[2,"74b+9EsedP44jEyHbBJQ8S",1,0],[1,0,-39.62,0]],[79,"cont_backingComplete",false,131072,23,[-99,-100],[[34,-98,[1,"631/1d+fVOzLxWLS6+h/7S"]]],[2,"e4RI2VQ6tCgoNXlWSeFbmK",1,0]],[49,"cont_missionEntry3",131072,2,[-102,-103],[[6,-101,[1,"dfaHEjIbdIfpwfhQqfVRk5"],[5,640,128]]],[2,"9dIjk4uXlD1LZvf4taPlDx",1,0],[1,0,-180.595,0]],[79,"cont_backingComplete",false,131072,25,[-105,-106],[[34,-104,[1,"6alIJVW5hAQouIKp3Tg6m4"]]],[2,"10waL2A/lNQbAOa/IeTFzK",1,0]],[242,"Dojo_Basic",false,131072,1,[[6,-107,[1,"417upfk35Dvq2ju6Z65rrG"],[5,1024,1024]],[143,-108,[1,"c1h7KzpJpMXLigjLCHT/Im"]]],[2,"4d4sCFO/ZFyovhozyPA+gM",1,0],[1,1.25,1.25,1]],[49,"cont_Popup",131072,5,[16],[[6,-109,[1,"ae8sro0oxDaa0dcaimPLZB"],[5,280,518]]],[2,"1fn3yUNwlKRqvOWoy9aLXI",1,0],[1,0,-347.44000000000005,0]],[20,"scrollback",131072,2,[[21,-110,[1,"a8DrM88wRH+pb2KUkccRB9"],[5,400,520],[0,0,0.5]],[94,0,-111,[1,"9cOupYtKlDWZ9v8RtWLooQ"],0]],[2,"c5qcJRrdNJsq9uSer4b3sX",1,0],[1,-361.841,-33.991,0]],[30,"scrollback2",131072,2,[[21,-112,[1,"d8LOxqNsBG14/IpdN0uHXc"],[5,400,520],[0,0,0.5]],[94,0,-113,[1,"1c0653pWdPi6rdoJ8GOe14"],1]],[2,"1cqA0uD3RPJpwZXAeXleX0",1,0],[1,361.841,-33.991,0],[1,-1,1.0000000000000002,1]],[20,"border1",131072,3,[[6,-114,[1,"13SU2eb5pHIL+2IPw8FX+v"],[5,650,10]],[59,0,-115,[1,"40WP0asKFIqJyL8VkuD8Ut"],[4,4285183722],2]],[2,"29eZYSkLVMX5wQUOckW6Rh",1,0],[1,0,43.173,0]],[109,"border2",131072,3,[[21,-116,[1,"15k2CuddNO66gdPobmWx+J"],[5,431.5,10],[0,0,0.5]],[59,0,-117,[1,"d37gTQ8dxEP7y9D9dRghNR"],[4,4285183722],3]],[2,"c5dVbhHL5Lx5tAnI2rzy9j",1,0],[1,-324.474,38.001,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[109,"border3",131072,3,[[21,-118,[1,"9dqMJL2cFFpaG0zJL530P9"],[5,431.5,10],[0,0,0.5]],[59,0,-119,[1,"efH7UTxLBAcbHYAK9N3SW4"],[4,4285183722],4]],[2,"a02Q8zTQZH/IF39bllZaS2",1,0],[1,324.474,38.001,0],[3,0,0,0.7071067811865475,0.7071067811865476],[1,0,0,90]],[20,"border4",131072,3,[[6,-120,[1,"67jcPyvitLK5dEaUM8ohvT"],[5,650,10]],[59,0,-121,[1,"64aO4w04lFLpmBSLlTy4cR"],[4,4285183722],5]],[2,"0fsV7AdONNqI1bqJtyw6gF",1,0],[1,0,463.925,0]],[20,"border5",131072,3,[[6,-122,[1,"c95gJdYeFFiI9ZivDenq74"],[5,650,10]],[59,0,-123,[1,"22ZQ8ocdxHrJrZtfYoarD4"],[4,4285183722],6]],[2,"34O+xreT5B04zjAb4heM5n",1,0],[1,0,324.271,0]],[20,"border6",131072,3,[[6,-124,[1,"f3cu9FMVJMkKpEyOR3njk9"],[5,650,10]],[59,0,-125,[1,"b70Z63w4hBo4J89a5o6rnW"],[4,4285183722],7]],[2,"cayM5ZnqBPEIsLPx2l+r4l",1,0],[1,0,184.199,0]],[20,"IconTimerHand",131072,12,[[21,-126,[1,"b8YLwoIjFPCaTpTRrW2Ljq"],[5,6,20],[0,0.5,0.12]],[18,-127,[1,"e7iB352bFK4JDBGOfJDWFZ"],16]],[2,"94ZnjQyjdD0p59bQmXh480",1,0],[1,0.001,-5.174,0]],[28,"backingCompletedWhite",131072,22,[[6,-128,[1,"92mk1uhj1EYrC0BwutUdij"],[5,640,128]],[59,0,-129,[1,"cd1s6ru0BBn6SO2xCK9i5d"],[4,4292932351],21]],[2,"d7e2+mH1JA/L/Ds/nw1Not",1,0]],[28,"backingCompleted",131072,22,[[6,-130,[1,"428NJKwplD/YgtEtW+UNcW"],[5,630,118]],[59,0,-131,[1,"97eabUSEJPF6lW6SEv3y5y"],[4,3875536895],22]],[2,"cb9ipsJMxLXIakw81jUfl1",1,0]],[51,0,{},21,[53,"49z2ZOgn9C0qKbebWZpPjD",-140,[69,"463uZWAFFKFK8IZTHlMV9A",1,[[10,"missionEntry",["_name"],6],[7,["_lpos"],6,[1,0,0.5190000000000055,0]],[7,["_lrot"],6,[3,0,0,0,1]],[7,["_euler"],6,[1,0,0,0]],[7,["_lscale"],6,[1,1.5,1.5,1]],[10,false,["_active"],-132],[7,["_lpos"],-133,[1,58.678,0,0]],[38,["_contentSize"],[4,["a43hI9zOpKIbPzW2Du4611"]],[5,100,43.2]],[10,false,["_active"],-134],[7,["_lpos"],-135,[1,8.678,-21.6,0]],[7,["_lpos"],-136,[1,8.678,-21.6,0]],[10,131072,["_layer"],6],[17,131072,["_layer"],[4,["e6KZLM/PpAtbw6sgBAKrYu"]]],[17,131072,["_layer"],[4,["48Ez/2bDhLrbIwXX3binNi"]]],[17,131072,["_layer"],[4,["1aC+wDbYhBiYoenfgNR0YD"]]],[17,131072,["_layer"],[4,["dbCT4zUzVLfIJ00eXLra8E"]]],[17,131072,["_layer"],[4,["a7A3yspItFCYmCiOJyHryu"]]],[17,131072,["_layer"],[4,["a9c18zzfxH87UNGwgfJ7tP"]]],[17,131072,["_layer"],[4,["25YXsB869CVqIY2QSmSCBI"]]],[10,131072,["_layer"],-137],[10,131072,["_layer"],-138],[10,131072,["_layer"],-139],[17,131072,["_layer"],[4,["53r/vig3JO+b1Ob4cPq73E"]]],[17,131072,["_layer"],[4,["d9qaAXPCVGIqa90y1A4H87"]]],[17,131072,["_layer"],[4,["14/TP0FHxLjJ3KCsQJoarS"]]]]],23]],[4,["1eksYdOApCxqVmzZAELiSp"]],[4,["f48NQgJQhCKp6b1aK65clb"]],[28,"backingCompletedWhite",131072,24,[[6,-141,[1,"15s96x3dNIvpS2B9xzyBCc"],[5,640,128]],[59,0,-142,[1,"a06DBotx5KjqmPhbnXWXLG"],[4,4292932351],24]],[2,"18s0Wuh/lOsaSDIR9vu7a1",1,0]],[28,"backingCompleted",131072,24,[[6,-143,[1,"8dF1tXK1xHZ7YtMXzCSMQk"],[5,630,118]],[59,0,-144,[1,"d7aquEuAhO86ug9ye9293Q"],[4,3875536895],25]],[2,"a7pCXETUVP+JbV/95FTcVh",1,0]],[51,0,{},23,[53,"49z2ZOgn9C0qKbebWZpPjD",-153,[69,"42jYEX9WlC36KXsFkQ7Zar",1,[[10,"missionEntry",["_name"],7],[7,["_lpos"],7,[1,0,0.5190000000000055,0]],[7,["_lrot"],7,[3,0,0,0,1]],[7,["_euler"],7,[1,0,0,0]],[7,["_lscale"],7,[1,1.5,1.5,1]],[10,false,["_active"],-145],[7,["_lpos"],-146,[1,58.678,0,0]],[38,["_contentSize"],[4,["a43hI9zOpKIbPzW2Du4611"]],[5,100,43.2]],[10,false,["_active"],-147],[7,["_lpos"],-148,[1,8.678,-21.6,0]],[7,["_lpos"],-149,[1,8.678,-21.6,0]],[10,131072,["_layer"],7],[17,131072,["_layer"],[4,["e6KZLM/PpAtbw6sgBAKrYu"]]],[17,131072,["_layer"],[4,["48Ez/2bDhLrbIwXX3binNi"]]],[17,131072,["_layer"],[4,["1aC+wDbYhBiYoenfgNR0YD"]]],[17,131072,["_layer"],[4,["dbCT4zUzVLfIJ00eXLra8E"]]],[17,131072,["_layer"],[4,["a7A3yspItFCYmCiOJyHryu"]]],[17,131072,["_layer"],[4,["a9c18zzfxH87UNGwgfJ7tP"]]],[17,131072,["_layer"],[4,["25YXsB869CVqIY2QSmSCBI"]]],[10,131072,["_layer"],-150],[10,131072,["_layer"],-151],[10,131072,["_layer"],-152],[17,131072,["_layer"],[4,["53r/vig3JO+b1Ob4cPq73E"]]],[17,131072,["_layer"],[4,["d9qaAXPCVGIqa90y1A4H87"]]],[17,131072,["_layer"],[4,["14/TP0FHxLjJ3KCsQJoarS"]]]]],26]],[4,["1eksYdOApCxqVmzZAELiSp"]],[4,["f48NQgJQhCKp6b1aK65clb"]],[28,"backingCompletedWhite",131072,26,[[6,-154,[1,"3byKKHcCFL0INTwel5XEKs"],[5,640,128]],[59,0,-155,[1,"95trKvb1JHqojQC2ELxFDJ"],[4,4292932351],27]],[2,"dcHgtyi2ZCJIH6JogwOOKS",1,0]],[28,"backingCompleted",131072,26,[[6,-156,[1,"89krYm/DNHua4ptvE8Q42E"],[5,630,118]],[59,0,-157,[1,"a8crkicQNJRri9sCYOefwH"],[4,3875536895],28]],[2,"b1J3MwBK1B94L+t9TL9q1h",1,0]],[51,0,{},25,[53,"49z2ZOgn9C0qKbebWZpPjD",-166,[69,"9bxzhORCpPXKHXpOPSm5QH",1,[[10,"missionEntry",["_name"],8],[7,["_lpos"],8,[1,0,0.5190000000000055,0]],[7,["_lrot"],8,[3,0,0,0,1]],[7,["_euler"],8,[1,0,0,0]],[7,["_lscale"],8,[1,1.5,1.5,1]],[10,false,["_active"],-158],[7,["_lpos"],-159,[1,58.678,0,0]],[38,["_contentSize"],[4,["a43hI9zOpKIbPzW2Du4611"]],[5,100,43.2]],[10,false,["_active"],-160],[7,["_lpos"],-161,[1,8.678,-21.6,0]],[7,["_lpos"],-162,[1,8.678,-21.6,0]],[10,131072,["_layer"],8],[17,131072,["_layer"],[4,["e6KZLM/PpAtbw6sgBAKrYu"]]],[17,131072,["_layer"],[4,["48Ez/2bDhLrbIwXX3binNi"]]],[17,131072,["_layer"],[4,["1aC+wDbYhBiYoenfgNR0YD"]]],[17,131072,["_layer"],[4,["dbCT4zUzVLfIJ00eXLra8E"]]],[17,131072,["_layer"],[4,["a7A3yspItFCYmCiOJyHryu"]]],[17,131072,["_layer"],[4,["a9c18zzfxH87UNGwgfJ7tP"]]],[17,131072,["_layer"],[4,["25YXsB869CVqIY2QSmSCBI"]]],[10,131072,["_layer"],-163],[10,131072,["_layer"],-164],[10,131072,["_layer"],-165],[17,131072,["_layer"],[4,["53r/vig3JO+b1Ob4cPq73E"]]],[17,131072,["_layer"],[4,["d9qaAXPCVGIqa90y1A4H87"]]],[17,131072,["_layer"],[4,["14/TP0FHxLjJ3KCsQJoarS"]]]]],29]],[4,["1eksYdOApCxqVmzZAELiSp"]],[4,["f48NQgJQhCKp6b1aK65clb"]],[28,"ButtonSFXOn",131072,9,[[6,-167,[1,"02XuqEptdAb7LqmvsOm3FK"],[5,102,102]],[158,0,false,-168,[1,"34DTkvDbpI2IHvm2IvAYJy"],38]],[2,"27jK/irwpLEZcPI6UWiQOU",1,0]],[28,"ButtonMusicOn",131072,10,[[6,-169,[1,"0cRDJjDU1KvqzhidzdcqUm"],[5,102,102]],[158,0,false,-170,[1,"30qmETCTlBWaRpjC3wZUnN"],41]],[2,"c4N6IodCBHhrxZryPWvmhA",1,0]],[4,["e9NrY21E9Oqbwmm5fUqjMm"]],[4,["e9NrY21E9Oqbwmm5fUqjMm"]],[4,["e9NrY21E9Oqbwmm5fUqjMm"]]],0,[0,-1,40,0,-2,45,0,-3,50,0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,27,0,-2,5,0,-3,13,0,-4,14,0,-5,15,0,-6,9,0,-7,10,0,-8,11,0,0,2,0,-1,29,0,-2,30,0,-3,3,0,-4,4,0,-5,21,0,-6,23,0,-7,25,0,0,3,0,-1,31,0,-2,32,0,-3,33,0,-4,34,0,-5,35,0,-6,36,0,0,4,0,0,4,0,-1,17,0,-2,18,0,-3,19,0,-4,20,0,-5,12,0,0,5,0,0,5,0,0,5,0,0,5,0,-1,28,0,0,9,0,0,9,0,0,9,0,0,9,0,-1,53,0,0,10,0,0,10,0,0,10,0,0,10,0,-1,54,0,0,11,0,0,11,0,0,11,0,0,11,0,0,11,0,0,12,0,0,12,0,0,12,0,-1,37,0,0,13,0,0,13,0,0,13,0,0,13,0,0,14,0,0,14,0,0,14,0,0,14,0,0,15,0,0,15,0,0,15,0,0,15,0,0,16,0,0,16,0,0,17,0,0,17,0,0,17,0,0,18,0,0,18,0,0,18,0,0,19,0,0,19,0,0,19,0,0,20,0,0,20,0,0,20,0,0,21,0,-1,22,0,-2,40,0,0,22,0,-1,38,0,-2,39,0,0,23,0,-1,24,0,-2,45,0,0,24,0,-1,43,0,-2,44,0,0,25,0,-1,26,0,-2,50,0,0,26,0,-1,48,0,-2,49,0,0,27,0,0,27,0,0,28,0,0,29,0,0,29,0,0,30,0,0,30,0,0,31,0,0,31,0,0,32,0,0,32,0,0,33,0,0,33,0,0,34,0,0,34,0,0,35,0,0,35,0,0,36,0,0,36,0,0,37,0,0,37,0,0,38,0,0,38,0,0,39,0,0,39,0,1,41,0,1,55,0,1,42,0,1,41,0,1,42,0,1,55,0,1,41,0,1,42,0,3,40,0,0,43,0,0,43,0,0,44,0,0,44,0,1,46,0,1,56,0,1,47,0,1,46,0,1,47,0,1,56,0,1,46,0,1,47,0,3,45,0,0,48,0,0,48,0,0,49,0,0,49,0,1,51,0,1,57,0,1,52,0,1,51,0,1,52,0,1,57,0,1,51,0,1,52,0,3,50,0,0,53,0,0,53,0,0,54,0,0,54,0,6,1,2,19,16,16,19,28,170],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,2,2,2,2,2,2,7,5,2,15,7,5,7,5,2,2,-1,14,2,2,2,12,2,2,12,2,2,12,7,5,2,15,2,15,2,15,2,2,15,2,2,15,2,15,-1,-2,-1,-2],[28,28,2,2,2,2,2,2,30,0,49,49,30,0,30,0,151,152,50,50,77,2,31,32,2,31,32,2,31,32,364,0,155,155,156,156,157,157,365,158,158,366,159,159,160,160,367,368,369,370]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["e6MguL9s5JKYcPoO8HofuE"]}],[1],0,[],[],[]],[[[19,"Pineapple"],[91,"Pineapple",[-6,-7,-8,-9],[[84,-2,[1,"a2qpzkHsxDfLdJmRR6FC1k"]],[35,2,-3,[1,"85enG5MM9CApSdQfsKw/Hl"]],[77,0.55,-4,[1,"d3eEIvW6xM349qg9XIzZIs"]],[55,-5,[1,"87dFitb5tM5J7vzhGQCKRI"]]],[2,"ab+vtYXrVLgrEiAx1xH6a4",-1,0],[1,-1.847,0,0]],[52,"PineappleHalf1",false,1,[[15,-10,[1,"82mvnFlGBIfJ6zJrfkRCUz"],[2],[16],3],[35,8,-11,[1,"f2/qh40DZIVJKDR3O4puUF"]]],[2,"4ai3UL+AtCPYNzsUzIHLFE",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[52,"PineappleHalf2",false,1,[[15,-12,[1,"96RvTAsylANqfolqaQhlDs"],[4],[16],5],[35,8,-13,[1,"1dnoyrTZtJI4B0Bj0dm3T+"]]],[2,"88al6oG2VAGYpeRs3Ekahi",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]],[81,"PineappleWhole",1,[[15,-14,[1,"eaM2lw1RBDzojjFIBWMLOY"],[0],[16],1]],[2,"40hw4YEbpK9ILZGqnY6h5j",1,0],[3,-0.7071067811865476,-1.3170890159654386e-9,-1.3170890159654386e-9,0.7071067811865476],[1,-90.00000000000003,-2.1344341156289852e-7,0]],[52,"PineappleOutline",false,1,[[15,-15,[1,"431c59Q8xLNatyAVBvfwa8"],[6],[16],7]],[2,"caesFv4SVIPZoEBgp3aiT3",1,0],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,4,0,-2,2,0,-3,3,0,-4,5,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,5,0,6,1,15],[0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,4],[1,371,1,372,1,373,374,375]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4294922713],"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[64,7]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["e7YtUmzPFBy6KQNNm2F1ax"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["e8VgmAXGVHHpDT/p37yExp"]}],[1],0,[],[],[]],[[{"name":"apple","rect":{"x":1,"y":0,"width":100,"height":83},"offset":{"x":-0.5,"y":0},"originalSize":{"width":103,"height":83},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[376]],[[[187,"gameplay"],[197,"Canvas_for_overlay",131072,"adDIxOv59Jj7hRFRgCHblh",[-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17],[[66,-1,[5,1280,768]],[119,-3,-2],[132,45,-4]],[1,640,384,0]],[339,"gameplay",[-29,-30,-31,-32,-33,-34,-35,-36,-37,1,-38,-39,-40,-41,-42,-43],[266,"e86ebdcc-4f8d-4053-a57d-da841fc6711a",[],[-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28]],[188,[340,0.5208,[2,0.2,0.4980392156862745,0.8,0.520833125]],[233,[4,4283190348]],[342],[189],[190]]],[126,"Canvas",33554432,"d3zGrc7XFGha7g/YuHEPp3",2,[-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59],[[66,-44,[5,1280,768]],[119,-46,-45],[226,45,1,-47]],[1,640,384,0]],[260,"Main Camera","c9DMICJLFO5IeO07EPon7U",2,[-62,-63,-64,-65],[[-60,[162,-61]],1,4],[1,0,0,10]],[126,"BladeCanvas",33554432,"2aEQl45ilHm4ea6VRI2Wwg",2,[-70,-71],[[66,-66,[5,1280,768]],[119,-68,-67],[132,45,-69]],[1,640,384,0]],[126,"CanvasBG",16384,"b6XY/4zJZCY7vberD5Hc2F",2,[-76,-77],[[66,-72,[5,1280,768]],[119,-74,-73],[132,45,-75]],[1,640,384,0]],[126,"CanvasForTextBehind3D",4096,"6fa3Fc4Q1CmY3dVMv1Pirx",2,[-82],[[66,-78,[5,1280,768]],[119,-80,-79],[132,45,-81]],[1,640,384,0]],[126,"CanvasForText",8192,"42HboqrR9Ck6e3ZgxF0lVA",2,[-87],[[66,-83,[5,1280,768]],[119,-85,-84],[132,45,-86]],[1,640,384,0]],[170,"DojoBG",16384,6,[-92],[[66,-88,[5,1280,1128]],[220,0,-89],[229,45,-180,-180,1280,1280,-90],[150,-91]]],[170,"DojoBG",33554432,3,[-97],[[66,-93,[5,1280,1280]],[220,0,-94],[332,128,128,-128,-128,1024,1024,-95],[150,-96]]],[243,"bg_loading",false,131072,3,[-100,-101],[[66,-98,[5,1280,768]],[96,45,1280,768,-99]]],[170,"LoadingWatermelon",131072,11,[-105,-106],[[173,-102],[263,true,-103,[44],45],[150,-104]]],[4,["ddJyCrY05H0K1oeapDh2tu"]],[168,"Controller","05FfbBWhZA2InBHvCvrLds",2,[[351,-112,-111,-110,-109,-108,-107,[11,12,13,14,15,16],7,8,9,10],[352,null,null,null,-114,[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],5,7,8,6,3,1,4,11,-113,57,58,59,60,61],[353,-115],[354,-116,[62,63,64,65,66,67]]]],[4,["d7HbP1TqRIQJNYEV6Ue48C"]],[261,"FruitCount",false,33554432,3,[[[116,-117,[5,293,54.4],[0,0,0.5]],-118,[280,-119],[355,-120,[4,4278190335],[4,4278190335],[4,4294901811],[4,4294901811]]],4,1,4,4],[1,-614.854,341.079,0]],[88,"bg_loading",131072,11,[[66,-121,[5,1280,768]],[184,0,-122,[4,2516582400],39],[96,45,1320,800,-123],[311,-124,40]]],[88,"black_background",131072,1,[[66,-125,[5,1280,1536]],[184,0,-126,[4,0],52],[171,-127,[53,54]],[229,45,-384,-384,1280,768,-128]]],[88,"flash_pomegranate",131072,1,[[66,-129,[5,1280,768]],[184,0,-130,[4,16777215],55],[171,-131,[56]],[96,45,1280,768,-132]]],[4,["d5bIs3FeJDzaGibidtUdcW"]],[4,["f5rA7NU3BFJ4WKvhFrlaVU"]],[244,"BladeTipWithLineRenderer-DO NOT DELETE","0ch1j8KhBDcqZdXQTPNR/v",2,[-134],[[356,false,-133]],[1,-0.057,0,9],[1,5,5,1]],[245,0,null,[53,"4ep6ZVEVtIko9NAyukc5S0",-135,[115,"235O9jSMBGWrv11YuYpb8G",null,[[17,"NewBlade",["_name"],[4,["4ep6ZVEVtIko9NAyukc5S0"]]],[38,["_lpos"],[4,["4ep6ZVEVtIko9NAyukc5S0"]],[1,0,0,0]],[38,["_lrot"],[4,["4ep6ZVEVtIko9NAyukc5S0"]],[3,0,0,0,1]],[38,["_euler"],[4,["4ep6ZVEVtIko9NAyukc5S0"]],[1,0,0,0]]]],6]],[198,"movertrail",33554432,5,[23],[[116,-136,[5,472,117],[0,0,0]],[132,12,-137]],[1,-640,-384,-10]],[51,0,{},3,[53,"32dj/DIk9AG72d/xJI4jQG",-169,[115,"82v6eopTBJrKY7MSi4uQ68",null,[[17,"homescreen",["_name"],[4,["32dj/DIk9AG72d/xJI4jQG"]]],[38,["_lpos"],[4,["32dj/DIk9AG72d/xJI4jQG"]],[1,0,0,0]],[38,["_lrot"],[4,["32dj/DIk9AG72d/xJI4jQG"]],[3,0,0,0,1]],[38,["_euler"],[4,["32dj/DIk9AG72d/xJI4jQG"]],[1,0,0,0]],[38,["_contentSize"],[4,["ab5k3QUrtFVq67r72GSN5i"]],[5,1280,768]],[17,false,["_active"],[4,["d0k7s5s2hAoYbEoi+OQQc/"]]],[17,false,["_active"],[4,["63SJFSrA5PjrA3M1BTe/c6"]]],[17,false,["_active"],[4,["aapm77hudHE7oT1H8MOvPy"]]],[10,"ButtonMissions",["_name"],-138],[7,["_lpos"],-139,[1,-236.406,-193.21499999999997,0]],[7,["_lscale"],-140,[1,0.78,0.78,1]],[10,"titleArea",["_name"],-141],[7,["_lpos"],-142,[1,0,117.475,0]],[7,["_lscale"],-143,[1,2.1,2.2,1]],[10,"title",["_name"],-144],[7,["_lpos"],-145,[1,-223.53300000000002,-142.769,0]],[7,["_lscale"],-146,[1,0.95,0.95,1]],[10,"hbplus_w_straight",["_name"],-147],[7,["_lpos"],-148,[1,260.245,77.925,0]],[7,["_lscale"],-149,[1,0.42105263157894735,0.42105263157894735,1]],[10,"PlayerInfo",["_name"],-150],[7,["_lpos"],-151,[1,640,0,0]],[10,"levelLabel",["_name"],-152],[7,["_lpos"],-153,[1,-240,-90.206,0]],[7,["_lscale"],-154,[1,0.6000000000000001,0.6000000000000001,1]],[17,false,["_active"],[4,["535xuJTehNnrEL9ksSwXU7"]]],[17,false,["_active"],[4,["1281oAtlNDC651T+/D1hut"]]],[10,"button_settings",["_name"],-155],[7,["_lpos"],-156,[1,-184.011,-256.677,0]],[10,"button_senseiSwags",["_name"],-157],[7,["_lpos"],-158,[1,184.011,-256.677,0]],[7,["_lscale"],-159,[1,0.7,0.7,0.7]],[10,"button_Classic",["_name"],-160],[7,["_lpos"],-161,[1,0,-36.861999999999995,0]],[7,["_lscale"],-162,[1,1.7,1.7,1.7]],[10,"button_Zen",["_name"],-163],[7,["_lpos"],-164,[1,-372.934,-36.861999999999995,0]],[7,["_lscale"],-165,[1,1.7,1.7,1.7]],[10,"button_Arcade",["_name"],-166],[7,["_lpos"],-167,[1,372.934,-36.861999999999995,0]],[7,["_lscale"],-168,[1,1.7,1.7,1.7]],[17,false,["_active"],[4,["8fZa3iQ4FG4qRh9p3dJdr+"]]]]],36]],[88,"selectMode",33554432,3,[[66,-170,[5,1280,768]],[96,45,100,100,-171],[107,"prefab screen/selectMode","select_mode",-172]]],[88,"gameplay",33554432,3,[[66,-173,[5,1280,768]],[96,45,100,100,-174],[107,"prefab screen/gameplay","gameplay",-175]]],[88,"container_senseiSwag",33554432,3,[[66,-176,[5,1280,768]],[96,45,100,100,-177],[107,"prefab screen/container_senseiSwag","senseiswag",-178]]],[88,"container_settings",33554432,3,[[66,-179,[5,1280,768]],[96,45,100,100,-180],[107,"prefab screen/container_settings","settings",-181]]],[88,"container_language",33554432,3,[[66,-182,[5,1280,768]],[96,45,100,100,-183],[107,"prefab screen/container_language","language",-184]]],[88,"result_score",33554432,3,[[66,-185,[5,1280,768]],[96,45,100,100,-186],[107,"prefab screen/container_resultScoreEXP","result_score",-187]]],[136,"text_loading",131072,12,[[66,-188,[5,250,90]],[274,"Loading...",40,0,2,false,false,-189,42,43],[208,4,-190,[4,4282729797]]],[1,0,84.8,0]],[4,["463uZWAFFKFK8IZTHlMV9A","e9NrY21E9Oqbwmm5fUqjMm"]],[4,["42jYEX9WlC36KXsFkQ7Zar","e9NrY21E9Oqbwmm5fUqjMm"]],[4,["9bxzhORCpPXKHXpOPSm5QH","e9NrY21E9Oqbwmm5fUqjMm"]],[4,["3aB5SbUIdKI4HCE3C5Y4AQ","e9NrY21E9Oqbwmm5fUqjMm"]],[4,["52SiLeQI9EZKO6aqqv988W","e9NrY21E9Oqbwmm5fUqjMm"]],[4,["5ctLGPndNPB6JtufA+mErH","e9NrY21E9Oqbwmm5fUqjMm"]],[88,"container_berryBlast",131072,1,[[66,-191,[5,1280,768]],[96,45,100,100,-192],[107,"prefab screen/container_berryBlast","cont_berryblast",-193]]],[88,"container_deflect",131072,1,[[66,-194,[5,1280,768]],[96,45,100,100,-195],[107,"prefab screen/container_deflect","cont_deflect",-196]]],[88,"container_peachyTime",131072,1,[[66,-197,[5,1280,768]],[96,45,100,100,-198],[107,"prefab screen/container_peachyTime","cont_peachy",-199]]],[126,"FruitManager",524288,"beZiM3rFFEJJReceFWErmn",2,[-203,-204],[[357,-202,[70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],[[93,null,94,95,96,97,98,99,100,101,null,null,null,null,102,103,null,104,105,null,106,107,108],6,0,6,6,6,6,6,6,6,6,0,0,0,0,6,6,0,6,6,0,6,6,6],-201,-200,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129]],[1,0,0,-1]],[235,0,3,1,6,1073741824,4],[168,"BGMManager","68vd+bWlhLFJiBPS5iB4O7",2,[[358,-205,[0,1,2]],[359,-206]]],[51,0,null,22,[53,"d7HbP1TqRIQJNYEV6Ue48C",-207,[149,"24l8SZRnFCmb0gUlshFQox",[[10,"BladeTip",["_name"],15],[7,["_lpos"],15,[1,0,0,0]],[7,["_lrot"],15,[3,0,0,0,1]],[7,["_euler"],15,[1,0,0,0]],[10,true,["_active"],15]]],3]],[256,"Trail",false,"00tIodRadCtoYTpysTicyq",2,[-208],[1,0,1.873,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[137,"Camera",4096,7,[[-209,[162,-210]],1,4],[1,0,0,1000]],[137,"Camera",8192,8,[[-211,[162,-212]],1,4],[1,0,0,1000]],[137,"Camera",16384,6,[[-213,[162,-214]],1,4],[1,0,0,1000]],[137,"Camera",33554432,3,[[-215,[171,-216,[35]]],1,4],[1,0,0,1000]],[4,["17lXVB4/FJbZe+Px5NRNzg"]],[4,["42b8tqlCBJw6lwvZdlIBMR"]],[4,["04/aK6TthM14tAHsLe0T8Y"]],[4,["6d/Cjx9PxF7J8U4Jy3c6u/"]],[4,["1fMv5Ew5lKCoLjEmURAK/c"]],[4,["28eOPDAFtLKrzlqnm/9CEh"]],[4,["2eeAM6iKlL96gzyahZh1Ed"]],[4,["35Qz9b6F1Ko6j83CbMeh8X"]],[4,["26ZWj+v+1MzLNZsrsEuQpA"]],[246,"TestBlade",false,33554432,3,[[66,-217,[5,40,36]],[360,-218,37,38]],[1,184,14,0]],[199,"HUDWatermelon",131072,12,[[66,-219,[5,106,123]],[219,-220,41]],[1,0.8,0.8,1]],[88,"layer_for_next_profpic",131072,1,[[66,-221,[5,1280,768]],[96,45,1280,768,-222]]],[51,0,{},1,[53,"34Y34et0VLbafUs88I0RBN",-280,[115,"d0zPIK3L9NMb2dc+p0uUs+",null,[[17,"container_pause",["_name"],[4,["34Y34et0VLbafUs88I0RBN"]]],[38,["_lpos"],[4,["34Y34et0VLbafUs88I0RBN"]],[1,0,0,0]],[38,["_lrot"],[4,["34Y34et0VLbafUs88I0RBN"]],[3,0,0,0,1]],[38,["_euler"],[4,["34Y34et0VLbafUs88I0RBN"]],[1,0,0,0]],[17,2,["_alignMode"],[4,["03Zrkk0dZFfK/1MW6Ttd6K"]]],[17,true,["_active"],[4,["34Y34et0VLbafUs88I0RBN"]]],[10,"missions_text",["_name"],-223],[7,["_lpos"],-224,[1,5.684341886080802e-14,25,0]],[10,131072,["_layer"],-225],[10,"missions_textProgress",["_name"],-226],[7,["_lpos"],-227,[1,5.684341886080802e-14,-23.35,0]],[10,131072,["_layer"],-228],[10,"layoutMissionReward",["_name"],33],[7,["_lpos"],33,[1,58.678,0,0]],[7,["_lscale"],33,[1,0.9,0.9,0.9]],[10,131072,["_layer"],33],[10,"Icon",["_name"],-229],[7,["_lpos"],-230,[1,-20,0,0]],[10,131072,["_layer"],-231],[10,"text_point",["_name"],-232],[7,["_lpos"],-233,[1,-46,0,0]],[10,131072,["_layer"],-234],[10,"missions_text",["_name"],-235],[7,["_lpos"],-236,[1,5.684341886080802e-14,25,0]],[10,131072,["_layer"],-237],[10,"missions_textProgress",["_name"],-238],[7,["_lpos"],-239,[1,5.684341886080802e-14,-23.35,0]],[10,131072,["_layer"],-240],[10,"layoutMissionReward",["_name"],34],[7,["_lpos"],34,[1,58.678,0,0]],[7,["_lscale"],34,[1,0.9,0.9,0.9]],[10,131072,["_layer"],34],[10,"Icon",["_name"],-241],[7,["_lpos"],-242,[1,-20,0,0]],[10,131072,["_layer"],-243],[10,"text_point",["_name"],-244],[7,["_lpos"],-245,[1,-46,0,0]],[10,131072,["_layer"],-246],[10,"missions_text",["_name"],-247],[7,["_lpos"],-248,[1,5.684341886080802e-14,25,0]],[10,131072,["_layer"],-249],[10,"missions_textProgress",["_name"],-250],[7,["_lpos"],-251,[1,5.684341886080802e-14,-23.35,0]],[10,131072,["_layer"],-252],[10,"layoutMissionReward",["_name"],35],[7,["_lpos"],35,[1,58.678,0,0]],[7,["_lscale"],35,[1,0.9,0.9,0.9]],[10,131072,["_layer"],35],[10,"Icon",["_name"],-253],[7,["_lpos"],-254,[1,-20,0,0]],[10,131072,["_layer"],-255],[10,"text_point",["_name"],-256],[7,["_lpos"],-257,[1,-46,0,0]],[10,131072,["_layer"],-258],[10,"text_paused",["_name"],-259],[7,["_lpos"],-260,[1,0,1124,0]],[7,["_lscale"],-261,[1,0.8,0.8,0.8]],[10,"ButtonExit",["_name"],-262],[7,["_lpos"],-263,[1,-180,-626.4,0]],[7,["_lscale"],-264,[1,0.9,0.9,1]],[10,"ButtonRestart",["_name"],-265],[7,["_lpos"],-266,[1,0,-626.4,0]],[7,["_lscale"],-267,[1,0.9,0.9,1]],[10,"ButtonPlay",["_name"],-268],[7,["_lpos"],-269,[1,180,-626.4,0]],[7,["_lscale"],-270,[1,0.9,0.9,1]],[10,"ButtonSFX",["_name"],-271],[7,["_lpos"],-272,[1,579,-656.306,0]],[7,["_lscale"],-273,[1,0.65,0.65,1]],[10,"ButtonMusic",["_name"],-274],[7,["_lpos"],-275,[1,488.93000000000006,-656.306,0]],[7,["_lscale"],-276,[1,0.65,0.65,1]],[10,"ButtonPause",["_name"],-277],[7,["_lpos"],-278,[1,804.8,-316.755,0]],[7,["_lscale"],-279,[1,0.55,0.55,1]],[17,false,["_active"],[4,["4d4sCFO/ZFyovhozyPA+gM"]]],[17,"popup",["_name"],[4,["92/ygY3QRNlKrMwg4VnJXq"]]],[38,["_contentSize"],[4,["34FlMpyCVBc4PTfJzCa6d3"]],[5,1280,768]]]],46]],[4,["463uZWAFFKFK8IZTHlMV9A","a9c18zzfxH87UNGwgfJ7tP"]],[4,["463uZWAFFKFK8IZTHlMV9A","25YXsB869CVqIY2QSmSCBI"]],[4,["463uZWAFFKFK8IZTHlMV9A","53r/vig3JO+b1Ob4cPq73E"]],[4,["463uZWAFFKFK8IZTHlMV9A","d9qaAXPCVGIqa90y1A4H87"]],[4,["42jYEX9WlC36KXsFkQ7Zar","a9c18zzfxH87UNGwgfJ7tP"]],[4,["42jYEX9WlC36KXsFkQ7Zar","25YXsB869CVqIY2QSmSCBI"]],[4,["42jYEX9WlC36KXsFkQ7Zar","53r/vig3JO+b1Ob4cPq73E"]],[4,["42jYEX9WlC36KXsFkQ7Zar","d9qaAXPCVGIqa90y1A4H87"]],[4,["9bxzhORCpPXKHXpOPSm5QH","a9c18zzfxH87UNGwgfJ7tP"]],[4,["9bxzhORCpPXKHXpOPSm5QH","25YXsB869CVqIY2QSmSCBI"]],[4,["9bxzhORCpPXKHXpOPSm5QH","53r/vig3JO+b1Ob4cPq73E"]],[4,["9bxzhORCpPXKHXpOPSm5QH","d9qaAXPCVGIqa90y1A4H87"]],[4,["41XzDdH4pK6aNHpcLpLaXs"]],[4,["31cLD8TNhA4JDuh7j35l9Y"]],[4,["fbLm7hK+FDWrJpXrcryJW8"]],[4,["95WH/8tDlG+YcTU7latOmC"]],[4,["e5gnZotDRM36VEM4Mxba3q"]],[4,["22SU0C0TBL06pcUbITqmYj"]],[4,["75hmMOw91K0pRhOUaocnxn"]],[51,0,{},1,[53,"ddJyCrY05H0K1oeapDh2tu",-281,[149,"3480Fo5hVF6ZHTkqXLrlS8",[[10,"container_tutorialDeflect",["_name"],13],[7,["_lpos"],13,[1,0,0,0]],[7,["_lrot"],13,[3,0,0,0,1]],[7,["_euler"],13,[1,0,0,0]],[10,131072,["_layer"],13],[17,131072,["_layer"],[4,["c70Q6lyPFKnaG5iZAm//TX"]]],[17,131072,["_layer"],[4,["5eQMYfMyVB/bzdHFt1oWvk"]]],[17,131072,["_layer"],[4,["91kIvrAzVCOZahihq2262r"]]],[17,131072,["_layer"],[4,["92xefL5MtBGZX7KaVd2ZC4"]]],[17,131072,["_layer"],[4,["9ay3hE7SZCcZlaFMXAqpbM"]]],[17,131072,["_layer"],[4,["5fSMuts/FM+pMh+oWWTX4u"]]],[17,131072,["_layer"],[4,["7emXycjVlDrbNkRdhYJSXs"]]],[17,131072,["_layer"],[4,["4f4fHdtlZGE6sZr7N8osj1"]]],[17,131072,["_layer"],[4,["e8qWb0hApA0615lWvkUC2A"]]],[17,131072,["_layer"],[4,["eazJDk7Q5OM6B/Mbd5q5MX"]]],[10,false,["_active"],13]]],47]],[51,0,{},1,[53,"13+H7u4GtKhrmdElvQzz7b",-287,[115,"85X4tlBLtDaJcB6U9yXCEO",null,[[17,"popup_infoPU",["_name"],[4,["13+H7u4GtKhrmdElvQzz7b"]]],[38,["_lpos"],[4,["13+H7u4GtKhrmdElvQzz7b"]],[1,0,0,0]],[38,["_lrot"],[4,["13+H7u4GtKhrmdElvQzz7b"]],[3,0,0,0,1]],[38,["_euler"],[4,["13+H7u4GtKhrmdElvQzz7b"]],[1,0,0,0]],[17,false,["_active"],[4,["13+H7u4GtKhrmdElvQzz7b"]]],[10,"TabCross",["_name"],-282],[7,["_lpos"],-283,[1,0,-261.526,0]],[7,["_lscale"],-284,[1,0.6,0.6,1]],[17,"BG",["_name"],[4,["0eIUBTRPlGvoFL/7Mo44wN"]]],[10,"Scroll",["_name"],-285],[7,["_lpos"],-286,[1,0,1024,0]]]],48]],[4,["b4PUnSgu9PHIkSN8BfPO+V"]],[51,0,{},1,[53,"f45HTlmfhH64LUQiZDW5XD",-303,[115,"b6hBngVy9JM5ZF8i/AhusJ",null,[[17,"popup_purchasePU",["_name"],[4,["f45HTlmfhH64LUQiZDW5XD"]]],[38,["_lpos"],[4,["f45HTlmfhH64LUQiZDW5XD"]],[1,0,0,0]],[38,["_lrot"],[4,["f45HTlmfhH64LUQiZDW5XD"]],[3,0,0,0,1]],[38,["_euler"],[4,["f45HTlmfhH64LUQiZDW5XD"]],[1,0,0,0]],[17,false,["_active"],[4,["f45HTlmfhH64LUQiZDW5XD"]]],[10,"ButtonPurchase",["_name"],-288],[7,["_lpos"],-289,[1,0,-358.1329999999999,0]],[7,["_lscale"],-290,[1,0.9,0.9,1]],[10,"TabCross",["_name"],-291],[7,["_lpos"],-292,[1,0,-261.526,0]],[7,["_lscale"],-293,[1,0.6,0.6,1]],[10,"starfruitBonus",["_name"],-294],[7,["_lpos"],-295,[1,-62.18000000000001,0,0]],[7,["_lscale"],-296,[1,0.75,0.75,1]],[10,"text_starfruitBonus",["_name"],-297],[7,["_lpos"],-298,[1,35.375,4.389999999999986,0]],[17,"BG",["_name"],[4,["d287HZzJlEIq5Sd1c6+jMx"]]],[10,"StarfruitLabel",["_name"],-299],[7,["_lpos"],-300,[1,485,534,0]],[10,"ScrollPurchase",["_name"],-301],[7,["_lpos"],-302,[1,0,1024,0]]]],49]],[4,["77DgimLYFN1Iwli6gEsedn"]],[4,["e61W9S4KFJCqypiRIIVfwV"]],[4,["90trZ9gWxPAbvBKFKALXtm"]],[51,0,{},1,[53,"ddJyCrY05H0K1oeapDh2tu",-349,[115,"0eSOhqNBdMJKU+J/CRrRqF",null,[[17,"container_missionsPopup",["_name"],[4,["ddJyCrY05H0K1oeapDh2tu"]]],[38,["_lpos"],[4,["ddJyCrY05H0K1oeapDh2tu"]],[1,0,0,0]],[38,["_lrot"],[4,["ddJyCrY05H0K1oeapDh2tu"]],[3,0,0,0,1]],[38,["_euler"],[4,["ddJyCrY05H0K1oeapDh2tu"]],[1,0,0,0]],[17,false,["_active"],[4,["ddJyCrY05H0K1oeapDh2tu"]]],[10,"TabCrossFolded",["_name"],-304],[7,["_lpos"],-305,[1,364.152,80.112,0]],[7,["_lscale"],-306,[1,1.8,1.8,1]],[10,"missions_text",["_name"],-307],[7,["_lpos"],-308,[1,5.684341886080802e-14,25,0]],[10,131072,["_layer"],-309],[10,"missions_textProgress",["_name"],-310],[7,["_lpos"],-311,[1,5.684341886080802e-14,-23.35,0]],[10,131072,["_layer"],-312],[10,"layoutMissionReward",["_name"],36],[7,["_lpos"],36,[1,58.678,0,0]],[7,["_lscale"],36,[1,0.9,0.9,0.9]],[10,131072,["_layer"],36],[10,"Icon",["_name"],-313],[7,["_lpos"],-314,[1,-20,0,0]],[10,131072,["_layer"],-315],[10,"text_point",["_name"],-316],[7,["_lpos"],-317,[1,-46,0,0]],[10,131072,["_layer"],-318],[10,"missions_text",["_name"],-319],[7,["_lpos"],-320,[1,5.684341886080802e-14,25,0]],[10,131072,["_layer"],-321],[10,"missions_textProgress",["_name"],-322],[7,["_lpos"],-323,[1,5.684341886080802e-14,-23.35,0]],[10,131072,["_layer"],-324],[10,"layoutMissionReward",["_name"],37],[7,["_lpos"],37,[1,58.678,0,0]],[7,["_lscale"],37,[1,0.9,0.9,0.9]],[10,131072,["_layer"],37],[10,"Icon",["_name"],-325],[7,["_lpos"],-326,[1,-20,0,0]],[10,131072,["_layer"],-327],[10,"text_point",["_name"],-328],[7,["_lpos"],-329,[1,-46,0,0]],[10,131072,["_layer"],-330],[10,"missions_text",["_name"],-331],[7,["_lpos"],-332,[1,5.684341886080802e-14,25,0]],[10,131072,["_layer"],-333],[10,"missions_textProgress",["_name"],-334],[7,["_lpos"],-335,[1,5.684341886080802e-14,-23.35,0]],[10,131072,["_layer"],-336],[10,"layoutMissionReward",["_name"],38],[7,["_lpos"],38,[1,58.678,0,0]],[7,["_lscale"],38,[1,0.9,0.9,0.9]],[10,131072,["_layer"],38],[10,"Icon",["_name"],-337],[7,["_lpos"],-338,[1,-20,0,0]],[10,131072,["_layer"],-339],[10,"text_point",["_name"],-340],[7,["_lpos"],-341,[1,-46,0,0]],[10,131072,["_layer"],-342],[17,"cont_Popup",["_name"],[4,["c70Q6lyPFKnaG5iZAm//TX"]]],[17,"BG",["_name"],[4,["5eQMYfMyVB/bzdHFt1oWvk"]]],[10,"popup",["_name"],-343],[7,["_lpos"],-344,[1,0,-860.4000000000001,0]],[10,"levelLabel",["_name"],-345],[7,["_lpos"],-346,[1,-372.087,534,0]],[10,"StarfruitLabel",["_name"],-347],[7,["_lpos"],-348,[1,485,534,0]]]],50]],[4,["c6mmUve41BArkVfi1pCfT/"]],[4,["3aB5SbUIdKI4HCE3C5Y4AQ","a9c18zzfxH87UNGwgfJ7tP"]],[4,["3aB5SbUIdKI4HCE3C5Y4AQ","25YXsB869CVqIY2QSmSCBI"]],[4,["3aB5SbUIdKI4HCE3C5Y4AQ","53r/vig3JO+b1Ob4cPq73E"]],[4,["3aB5SbUIdKI4HCE3C5Y4AQ","d9qaAXPCVGIqa90y1A4H87"]],[4,["52SiLeQI9EZKO6aqqv988W","a9c18zzfxH87UNGwgfJ7tP"]],[4,["52SiLeQI9EZKO6aqqv988W","25YXsB869CVqIY2QSmSCBI"]],[4,["52SiLeQI9EZKO6aqqv988W","53r/vig3JO+b1Ob4cPq73E"]],[4,["52SiLeQI9EZKO6aqqv988W","d9qaAXPCVGIqa90y1A4H87"]],[4,["5ctLGPndNPB6JtufA+mErH","a9c18zzfxH87UNGwgfJ7tP"]],[4,["5ctLGPndNPB6JtufA+mErH","25YXsB869CVqIY2QSmSCBI"]],[4,["5ctLGPndNPB6JtufA+mErH","53r/vig3JO+b1Ob4cPq73E"]],[4,["5ctLGPndNPB6JtufA+mErH","d9qaAXPCVGIqa90y1A4H87"]],[51,0,{},1,[53,"76iW9TfctBs7bf9cLh0LH2",-355,[115,"c6Og8slZJPWIqWxfVz5cSE",null,[[17,"cont_LevelUpPopup",["_name"],[4,["76iW9TfctBs7bf9cLh0LH2"]]],[38,["_lpos"],[4,["76iW9TfctBs7bf9cLh0LH2"]],[1,0,0,0]],[38,["_lrot"],[4,["76iW9TfctBs7bf9cLh0LH2"]],[3,0,0,0,1]],[38,["_euler"],[4,["76iW9TfctBs7bf9cLh0LH2"]],[1,0,0,0]],[17,false,["_active"],[4,["76iW9TfctBs7bf9cLh0LH2"]]],[10,"ButtonClaim",["_name"],-350],[7,["_lpos"],-351,[1,0,-157.769,0]],[7,["_lscale"],-352,[1,0.95,0.95,1]],[17,"BG",["_name"],[4,["e4ZbpofPJC/ZjE18+QhFXC"]]],[10,"Scroll",["_name"],-353],[7,["_lpos"],-354,[1,0,1124,0]]]],51]],[4,["a13GMTGYRJNLp5TDbruWbp"]],[51,0,{},42,[53,"d5bIs3FeJDzaGibidtUdcW",-356,[149,"0bHp0YKKBHSL7P3FZapDAL",[[10,"particle_frenzySideLeft",["_name"],20],[7,["_lpos"],20,[1,-17,0,0]],[7,["_lrot"],20,[3,0,0,0,1]],[7,["_euler"],20,[1,0,0,0]],[10,false,["_active"],20]]],68]],[51,0,{},42,[53,"f5rA7NU3BFJ4WKvhFrlaVU",-357,[149,"95vXcVw/1C1KHQ1JrTGPzi",[[10,"particle_frenzySideRight",["_name"],21],[7,["_lpos"],21,[1,17,0,0]],[7,["_lrot"],21,[3,0,0,0,1]],[7,["_euler"],21,[1,0,0,0]],[10,false,["_active"],21]]],69]],[247,"Main Light","c0y6F5f+pAvI805TdmxIjx",2,[[361,0.75,-358,[362]]],[3,-0.24999999999999997,-0.24999999999999997,-0.06698729810778066,0.9330127018922194],[1,-30,-30,0]],[147,"Node",4,[[163,-359,[1,100,20,3]]],[1,18.656,0,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[147,"Node-001",4,[[163,-360,[1,100,20,3]]],[1,-21.361,0,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[147,"Node-002",4,[[163,-361,[1,100,100,3]]],[1,-1.383,-16.066,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[147,"Node-003",4,[[163,-362,[1,100,100,3]]],[1,-1.383,15.977,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[363,false,true,[[[1,0,0,0],[1,1,1,0],[1,-1,1,0],[1,3,3,0]],8,8,8,8],[58,1,20,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[8]],[257,"BladeTrail",false,"e5nBwH5ZZJ7bdN6FKiGeCE",2,[113]],[289,1,46,[4],[8],[3,1],[0],[0],[0],[0],[0],[0],[0],[3,0.2],[0],[0],[3,1],[65,[8]],[213,0,[3,1]],[153,[0],[0],[0],[0]],[141,[0],[0],[0],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[32,1,[5,[0,1],[[9,2,1],[9,2,1]]]],[0]],[300,true,[3,0.2],[3,1],[8],[8],-363],[217,5]],[201,"Camera",5,[-364],[1,0,0,1000]],[134,0,5,384,2000,6,262144,116,[4,4278190080]],[134,0,2,384,2000,6,4096,47,[4,4278190080]],[134,0,4,384,2000,6,8192,48,[4,4278190080]],[134,0,1,384,2000,6,16384,49,[4,4278190080]],[88,"splatEffect",16384,9,[[173,-365]]],[134,0,2,384,2000,6,41943040,50,[4,4278190080]],[88,"splatEffect",33554432,10,[[173,-366]]],[275,"Spawn Fruit: 0/s",0,40,16],[4,["2bjVxMa6FGnoQPLAm7x1j+"]],[4,["3bsiSdJq5Kn5j4r67KJtTv"]],[258,"Camera",131072,1,[-367],[1,0,0,1000]],[134,0,5,384,2000,6,131072,127,[4,4278190080]],[4,["67IaJuIFtJ2o0lyZwbWdM0"]],[4,["f6UnMv9+pOnL+CpgrDKiYy"]],[4,["84Mf0woflBYZILDZlX/Mh6"]],[4,["19Z5GiofRGQK7gVcUa1jpK"]],[4,["75BZ/nQnFJUZjoFIEWbjdl"]],[4,["56DWec7ipDgJ315HT9y5bR","c5r2kEk6VKKKDsl/Rb+qNC"]],[4,["56DWec7ipDgJ315HT9y5bR","fdtF1296xNEo+K21bvUUvQ"]],[4,["e5ZLPvBZ9KepP63aHRp8eU"]],[248,"Blade",false,"3e0KDE+T1M56NJyICEv3Ov",2,[[364,true,-368,[[[1,0,0,0],[1,0.5,0.5,0.5],[1,1,1,1],[1,1.5,1,1.5]],8,8,8,8],[3,0.5],[8]]],[1,-0.818,0,-3.988]],[249,"Cam3DFrontBlade",65536,"29PuOZRTFKnYHAa0vseBKp",2,[[235,0,5,1,6,65536,-369]],[1,0,0,10]]],0,[0,0,1,0,21,128,0,0,1,0,0,1,0,-1,127,0,-2,62,0,-3,63,0,-4,83,0,-5,84,0,-6,86,0,-7,90,0,-8,104,0,-9,39,0,-10,40,0,-11,41,0,-12,18,0,-13,19,0,-1,106,0,-2,107,0,-3,25,0,-4,63,0,-5,83,0,-6,84,0,-7,86,0,-8,90,0,-9,104,0,-10,23,0,-11,45,0,-1,108,0,-2,4,0,-3,44,0,-4,14,0,-5,42,0,-6,6,0,-7,7,0,-8,3,0,-9,8,0,-11,137,0,-12,5,0,-13,22,0,-14,114,0,-15,46,0,-16,138,0,0,3,0,21,122,0,0,3,0,0,3,0,-1,50,0,-2,10,0,-3,16,0,-4,25,0,-5,26,0,-6,27,0,-7,28,0,-8,29,0,-9,30,0,-10,31,0,-11,60,0,-12,11,0,-1,43,0,0,4,0,-1,109,0,-2,110,0,-3,111,0,-4,112,0,0,5,0,21,117,0,0,5,0,0,5,0,-1,116,0,-2,24,0,0,6,0,21,120,0,0,6,0,0,6,0,-1,49,0,-2,9,0,0,7,0,21,118,0,0,7,0,0,7,0,-1,47,0,0,8,0,21,119,0,0,8,0,0,8,0,-1,48,0,0,9,0,0,9,0,0,9,0,0,9,0,-1,121,0,0,10,0,0,10,0,0,10,0,0,10,0,-1,123,0,0,11,0,0,11,0,-1,17,0,-2,12,0,0,12,0,0,12,0,0,12,0,-1,61,0,-2,32,0,40,23,0,41,46,0,42,113,0,43,43,0,44,22,0,0,14,0,45,25,0,0,14,0,0,14,0,0,14,0,0,16,0,-2,124,0,0,16,0,0,16,0,0,17,0,0,17,0,0,17,0,0,17,0,0,18,0,0,18,0,0,18,0,0,18,0,0,19,0,0,19,0,0,19,0,0,19,0,0,22,0,-1,45,0,3,23,0,0,24,0,0,24,0,1,51,0,1,51,0,1,51,0,1,52,0,1,52,0,1,52,0,1,53,0,1,53,0,1,53,0,1,54,0,1,54,0,1,54,0,1,125,0,1,125,0,1,55,0,1,55,0,1,55,0,1,126,0,1,126,0,1,56,0,1,56,0,1,56,0,1,57,0,1,57,0,1,57,0,1,58,0,1,58,0,1,58,0,1,59,0,1,59,0,1,59,0,3,25,0,0,26,0,0,26,0,0,26,0,0,27,0,0,27,0,0,27,0,0,28,0,0,28,0,0,28,0,0,29,0,0,29,0,0,29,0,0,30,0,0,30,0,0,30,0,0,31,0,0,31,0,0,31,0,0,32,0,0,32,0,0,32,0,0,39,0,0,39,0,0,39,0,0,40,0,0,40,0,0,40,0,0,41,0,0,41,0,0,41,0,46,43,0,47,124,0,0,42,0,-1,106,0,-2,107,0,0,44,0,0,44,0,3,45,0,-1,115,0,-1,118,0,0,47,0,-1,119,0,0,48,0,-1,120,0,0,49,0,-1,122,0,0,50,0,0,60,0,0,60,0,0,61,0,0,61,0,0,62,0,0,62,0,1,64,0,1,64,0,1,64,0,1,65,0,1,65,0,1,65,0,1,66,0,1,66,0,1,66,0,1,67,0,1,67,0,1,67,0,1,68,0,1,68,0,1,68,0,1,69,0,1,69,0,1,69,0,1,70,0,1,70,0,1,70,0,1,71,0,1,71,0,1,71,0,1,72,0,1,72,0,1,72,0,1,73,0,1,73,0,1,73,0,1,74,0,1,74,0,1,74,0,1,75,0,1,75,0,1,75,0,1,76,0,1,76,0,1,76,0,1,77,0,1,77,0,1,77,0,1,78,0,1,78,0,1,78,0,1,79,0,1,79,0,1,79,0,1,80,0,1,80,0,1,80,0,1,81,0,1,81,0,1,81,0,1,82,0,1,82,0,1,82,0,3,63,0,3,83,0,1,85,0,1,85,0,1,85,0,1,129,0,1,129,0,3,84,0,1,87,0,1,87,0,1,87,0,1,88,0,1,88,0,1,88,0,1,89,0,1,89,0,1,89,0,1,130,0,1,130,0,1,131,0,1,131,0,1,132,0,1,132,0,3,86,0,1,91,0,1,91,0,1,91,0,1,92,0,1,92,0,1,92,0,1,93,0,1,93,0,1,93,0,1,94,0,1,94,0,1,94,0,1,95,0,1,95,0,1,95,0,1,96,0,1,96,0,1,96,0,1,97,0,1,97,0,1,97,0,1,98,0,1,98,0,1,98,0,1,99,0,1,99,0,1,99,0,1,100,0,1,100,0,1,100,0,1,101,0,1,101,0,1,101,0,1,102,0,1,102,0,1,102,0,1,103,0,1,103,0,1,103,0,1,133,0,1,133,0,1,134,0,1,134,0,1,135,0,1,135,0,3,90,0,1,105,0,1,105,0,1,105,0,1,136,0,1,136,0,3,104,0,3,106,0,3,107,0,0,108,0,0,109,0,0,110,0,0,111,0,0,112,0,9,115,0,-1,117,0,0,121,0,0,123,0,-1,128,0,0,137,0,0,138,0,22,2,1,19,2,23,19,24,113,0,114,369],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,113],[-1,-2,-3,12,-1,10,12,48,49,18,50,-1,-2,-3,-4,-5,-6,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-1,12,7,25,2,15,2,7,5,-1,14,12,12,12,12,12,12,2,-1,-2,2,-1,51,52,53,54,55,-1,-2,-3,-4,-5,-6,12,12,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-1,-3,-4,-5,-6,-7,-8,-9,-10,-15,-16,-18,-19,-21,-22,-23,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,25],[377,378,379,380,111,75,381,382,383,15,384,102,16,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,161,2,2,410,8,0,162,162,411,412,413,414,415,416,2,417,418,2,419,420,421,422,163,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,164,455,456,457,458,459,460,461,462,164,463,464,136,465,466,467,165,468,469,470,165,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,161]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4293981951],"secondColor",8,[4,4288735485],"thirdColor",8,[4,4279982231],"fourthColor",8,[4,4283206088]]],11]]],0,0,[0],[8],[3]],[[[19,"particle_peachyBurst"],[105,"particle_peachyBurst",[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[287,true,0.05,false,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[0,null],6,0],[8],[11,3,1,3],[3,5],[3,4],[11,3,1,5],[0],[0],[0],[0],[3,0.6],[0],[0],[0],[[142,[11,3,16,20]]],[54,true,[82,3,[57,[[93],[12,0.640625,[4,4284961279]]]],[57,[[93],[12,0.6763392857142857,[4,4282225663]]]]]],[296,true,3,2,4,0.94,[0],[1,0,-90,0]],[29,true,[32,1,[5,[0.010256410256410256,1],[[48,2,1,-0.3695090439276486,1,-0.3695090439276486,1],[154,2,-1.4882154882154874,1,-1.4882154882154874,1]]]],[0],[0],[0]],[182,true,[0],[0],[0],[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[45,0.022222222222222223,-0.9777777777777777,1,-0.9777777777777777,1]]]]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[71,3,-0.3490658503988659]],[24,[0],[0]],[27,[0],[0],[8],[8],-3],[301,1,0.2,1,1]]],0,[0,3,1,0,-1,2,0,9,2,0,6,1,3],[0,0],[-1,10],[79,25]],[[[267,[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[75,5]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["eauQwUJMVH6430m6IhBaE9"]}],[1],0,[],[],[]],[[{"name":"BananaDoublePointsTabBacking","rect":{"x":11,"y":0,"width":234,"height":63},"offset":{"x":0,"y":0.5},"originalSize":{"width":256,"height":64},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[487]],[[[22,".bin",3770212487,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":57384,"length":7680,"count":3840,"stride":2}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":84288,"length":2160,"count":1080,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":57384,"count":797,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":65064,"length":19224,"count":267,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.6104131937026978,-0.2902618646621704,-0.5812499523162842],"maxPosition",8,[1,0.6074358224868774,0.43484556674957275,0.5812499523162842]]],-1],0,0,[],[],[]],[[[22,".bin",2676748140,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":60120,"length":8160,"count":4080,"stride":2}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":79032,"length":1200,"count":600,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":60120,"count":835,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":68280,"length":10752,"count":192,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.6120284795761108,-0.6279674768447876,-0.5831313729286194],"maxPosition",8,[1,0.6090333461761475,0.3354702591896057,0.5825115442276001]]],-1],0,0,[],[],[]],[[[22,".bin",2192312781,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":57384,"length":7680,"count":3840,"stride":2}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":83928,"length":2160,"count":1080,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":57384,"count":797,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":65064,"length":18864,"count":262,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5480701923370361,-0.2606166899204254,-0.5218855142593384],"maxPosition",8,[1,0.5453969240188599,0.39043375849723816,0.5218855142593384]]],-1],0,0,[],[],[]],[[[22,".bin",2129595411,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":60120,"length":8160,"count":4080,"stride":2}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":79032,"length":1200,"count":600,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":60120,"count":835,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":68280,"length":10752,"count":192,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5451592206954956,-0.5593567490577698,-0.5194193720817566],"maxPosition",8,[1,0.5424914360046387,0.29881736636161804,0.5188672542572021]]],-1],0,0,[],[],[]],[[[22,".bin",596814131,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":103608,"length":14880,"count":7440,"stride":2}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":134616,"length":1440,"count":720,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":103608,"count":1439,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":118488,"length":16128,"count":224,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.6088219881057739,-0.9117847084999084,-0.579734742641449],"maxPosition",8,[1,0.6058523058891296,0.6932254433631897,0.579734742641449]]],-1],0,0,[],[],[]],[[[22,".bin",1255501110,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":103608,"length":14880,"count":7440,"stride":2}},{"primitiveMode":7,"vertexBundelIndices":[1],"indexView":{"offset":134616,"length":1440,"count":720,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":103608,"count":1439,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]},{"view":{"offset":118488,"length":16128,"count":224,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5480701923370361,-0.8208016157150269,-0.5218855142593384],"maxPosition",8,[1,0.5453969240188599,0.6240515112876892,0.5218855142593384]]],-1],0,0,[],[],[]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[488,7]],[[[19,"particle_juiceMango"],[73,"particle_juiceMango",[-3],[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[72,"particle_juiceSmall",1,[-4],[2,"1eGkpbHVRA7YQtVRbaS87n",1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"17+MscORlKD6npLDx1rPQ0"],[[0,null],6,0],[8],[3,0.42],[0],[0],[3,8.4],[0],[0],[0],[0],[3,0.5],[3,0.3],[0],[0],[[60,0.01,[3,44]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[70,true,1,2,0.0001,2.738,0.20671679660620837,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[0],[0],[0]],[39,true,0,[11,3,-11.7,11.7],[11,3,-3.45,3.45],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[2,null],6,0],[8],[3,1.14],[0],[0],[11,3,3.6,6.4],[0],[0],[0],[0],[3,0.77],[58,1,2.4,[5,[0,1],[[37,1,1,1,1],[45,1,1,1,1,1]]]],[0],[0],[[60,0.01,[3,14]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[83,true,1,2,0.0001,2.738,1.2217304763960306,0.20671679660620837,[0],[1,0,0,55]],[29,true,[32,1,[5,[0,0.14102564102564102,1],[[13,2,1,0.04860266743843023,1],[47,2,0.9629629629629629,-0.6339319845464617,-0.6339319845464617],[37,-1.1210613598673298,1,-1.1210613598673298,1]]]],[0],[0],[0]],[39,true,0,[11,3,-10.2,10.2],[43,3],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[48,35,48,35]],[[[22,".bin",931852955,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":38528,"length":7200,"count":3600,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":38528,"count":602,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3606681227684021,-0.38322415947914124,-0.39927345514297485],"maxPosition",8,[1,0.3418269157409668,0.39019107818603516,0.3992733061313629]]],-1],0,0,[],[],[]],[[[22,".bin",402657924,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":30848,"length":5280,"count":2640,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":30848,"count":482,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3641016185283661,-0.38322415947914124,-0.3992733061313629],"maxPosition",8,[1,0.3418269157409668,0.4038909673690796,8.010864007701457e-7]]],-1],0,0,[],[],[]],[[[22,".bin",2059866745,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":38912,"length":7200,"count":3600,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":38912,"count":608,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4040276110172272,-0.4269278645515442,-0.443256139755249],"maxPosition",8,[1,0.3858266770839691,0.4341737627983093,0.4432559907436371]]],-1],0,0,[],[],[]],[[[102,"outinesMort",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_VERTEX_COLOR":true}],[[[{"metallic":0.400000005960464,"roughness":0.806901276111603},"albedoScale",8,[1,1,1,1],"emissiveScale",8,[2,1,1,1,1]]],11]]],0,0,[0],[8],[13]],[[[22,".bin",2127831207,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":30848,"length":5280,"count":2640,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":30848,"count":482,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3641016185283661,-0.38322415947914124,-8.010864007701457e-7],"maxPosition",8,[1,0.3418269157409668,0.4038909673690796,0.3992733061313629]]],-1],0,0,[],[],[]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[35,5]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[489,7]],[[[19,"popup_purchasePU"],[68,"popup_purchasePU",131072,[-6,-7,-8],[[6,-2,[1,"9cX6PbBcFEJLXbDMXVFY6l"],[5,1280,768]],[131,45,100,100,-3,[1,"6bn7+jbFVMvoSfGepZ10M8"]],[98,-4,[1,"3ebVqlSoZK0I7rz+wJ0xo6"],[28,29]],[365,-5,[1,"0eRftAYilLJ4WqYnNBFsfP"],30,31]],[2,"f45HTlmfhH64LUQiZDW5XD",-1,0]],[49,"StarfruitLabel",131072,1,[-11,-12,-13,-14],[[34,-9,[1,"d94arEkAFMJ72qx2g+uUgH"]],[333,33,105,-200,-10,[1,"ceA3MyTVpLOpcBNqJSn+zS"],1]],[2,"84Mf0woflBYZILDZlX/Mh6",1,0],[1,485,534,0]],[49,"ScrollPurchase",131072,1,[-17,-18,-19,-20],[[6,-15,[1,"58x0A1HtpHqJYu1a9tH+YM"],[5,650,520]],[145,17,-900,-16,[1,"43aQyxXV9EaJ+Kdajo/DBQ"]]],[2,"19Z5GiofRGQK7gVcUa1jpK",1,0],[1,0,1024,0]],[49,"mask",131072,3,[-23,-24,-25,-26],[[21,-21,[1,"78diaYcbZBWaLE5dAdyZEl"],[5,597,450],[0,0.5,1]],[186,-22,[1,"85U6GgpPNBgb7OBtiePV5i"]]],[2,"28HyiU/0xO1ZJXNufzVzoi",1,0],[1,0,211.30099999999993,0]],[28,"BG",131072,1,[[6,-27,[1,"44nCXvWqZL0LFz9DWC6XTl"],[5,2500,1468]],[59,0,-28,[1,"0cK5/EdSBBoKZTf2XJ2LjV"],[4,0],0],[144,45,-610,-610,-350,-350,1320,800,-29,[1,"fbxjymUDJM6aGazBK09Azd"],1],[159,-30,[1,"8dYUEt3EpFhLE3m7Wt2fqm"],1]],[2,"d287HZzJlEIq5Sd1c6+jMx",1,0]],[49,"IconPowerup",131072,4,[-32,-33,-34],[[6,-31,[1,"7eukm5YixEwqc/Jf5HiFsB"],[5,251,251]]],[2,"38NepnCBpIkKWi5evb23rT",1,0],[1,0,-161.255,0]],[67,"ButtonPurchase",131072,4,[-38],[[6,-35,[1,"adHHnYZNRGf6CiBNzgECem"],[5,296,105]],[18,-36,[1,"2653yPmgVObYVXmppSXrMt"],20],[80,3,0.9,-37,[1,"21LFXGPWVNwbiOAlef4fSH"],[[95,"3f1d5S6BcFPt47lc32Lcgq0","buttonBuyClicked",1]],21]],[2,"77DgimLYFN1Iwli6gEsedn",1,0],[1,0,-358.1329999999999,0],[1,0.9,0.9,1]],[49,"starfruitBonusLayout",131072,7,[-41,-42],[[6,-39,[1,"40q1LQMYZPB53xKOGSW+8f"],[5,185.11,100]],[307,1,1,10,true,-40,[1,"0a+tNvCUVH4aD568xkcwUW"]]],[2,"6fxL4mhPRIT40jKT7+RcM0",1,0],[1,-1.719,3.359,0]],[49,"starfruitLabelIcon",131072,2,[-45],[[21,-43,[1,"2dBes0p7xD9Z9A19p+eHXz"],[5,72,66],[0,0.5,1]],[18,-44,[1,"95rERGb1hGo4I8MF8M+Jnd"],5]],[2,"25EZrEPk9L+YCS4/CN/lud",1,0],[1,97.191,0,0]],[20,"text_starfruitTop",131072,2,[[21,-46,[1,"5aGPWivNFCQaQS7gkrI/3H"],[5,137,50],[0,1,0.5]],[174,"0",2,40,0,2,false,false,-47,[1,"8aQch5EtJCC48XmMtnADR0"],6,7],[25,3,-48,[1,"f4DgDTLhBBEYJiLp+WiWPV"],[4,4278210099]]],[2,"97Th8AtUdKSYhJl6ZBuPNZ",1,0],[1,55.306,-20.779,0]],[125,"BeryBlast",131072,6,[-50,-51],[[34,-49,[1,"80xoVArbFAZZlFgDFN7U7W"]]],[2,"fbb7AFrCpKNJeKiOIxAzXk",1,0]],[79,"BombDeflect",false,131072,6,[-53,-54],[[34,-52,[1,"d659eI6fhBNbeGd4xsJ/kk"]]],[2,"f3/gipAExFlaGcgRI9XMb6",1,0]],[79,"PeachyTime",false,131072,6,[-56,-57],[[34,-55,[1,"d8GbAYdfFCkodrtV0Andwo"]]],[2,"10oUTyai9PtLnEIQLre+Ji",1,0]],[20,"text_amount",131072,4,[[6,-58,[1,"16aTKwLXFFzaHouFqcAj4M"],[5,160,100]],[74,"x3",90,90,0,2,false,false,-59,[1,"44Xjqw/49Clo810WxRvgKK"],15,16],[25,4,-60,[1,"cb61wrZihDzJp0wwAzrq6K"],[4,4278725508]]],[2,"78SiCiybBGJbbluu7ZDsL6",1,0],[1,83.99900000000002,-255.4339999999999,0]],[20,"text_starfruitBonus",131072,8,[[6,-61,[1,"41MO9OagpOT6h9AZJjZrdm"],[5,114.36,91.9]],[276,"150",2,65,65,0,false,false,-62,[1,"e2aZTjjpNPCZBRtgJ7zZ6B"],18,19],[25,5,-63,[1,"be+KgzePlPKZ/qNo60+Pu5"],[4,4278210099]]],[2,"f6UnMv9+pOnL+CpgrDKiYy",1,0],[1,35.375,4.389999999999986,0]],[67,"ScrollHeader",131072,3,[-66],[[21,-64,[1,"a5n3zRF2BF94PMY4x//pYu"],[5,1050,139],[0,0.5,1]],[78,1,0,-65,[1,"e6lvtRNctJtr4xk/M167Uk"],24]],[2,"cfPwyHb3BGZI3ggEg7VI9e",1,0],[1,0,250,0],[1,0.6,0.6,1]],[20,"text_header",131072,16,[[6,-67,[1,"57Qq6AyFFMSY/hn61xu9HK"],[5,800,100]],[74,"PURCHASE?",80,80,0,2,false,false,-68,[1,"14uMiwYm9JvJc//jtiP7ye"],22,23],[140,0,-69,[1,"1fNMi+dB1Kr6TtQiNBNQD3"],[4,2097207039],[0,1,-1]]],[2,"f6mB/0pp9J/IcSZFmomcBI",1,0],[1,0,-46.292,0]],[30,"TabCross",131072,3,[[21,-70,[1,"2d08nJpZZEsruXD9hzjnCi"],[5,134,96],[0,0.5,1]],[18,-71,[1,"41dg253gxOjbn9bwmJvrnI"],25],[80,3,0.95,-72,[1,"dbMX9LJvdKBLEXzJjymzZD"],[[95,"3f1d5S6BcFPt47lc32Lcgq0","buttonCloseClicked",1]],26]],[2,"e61W9S4KFJCqypiRIIVfwV",1,0],[1,0,-261.526,0],[1,0.6,0.6,1]],[28,"starfruitLabelSpace",131072,2,[[21,-73,[1,"080Z1UbZVP9oeKZ3jWkvPn"],[5,200,60],[0,0.5,1]],[78,1,0,-74,[1,"f0y7tvkutCcJm8CpEQFb7l"],2]],[2,"07hIpNL6tMqonbv+Egl4IM",1,0]],[20,"starfruitLabelEdge",131072,2,[[21,-75,[1,"e3l/ZMDrdG6pqnKI8lJNHi"],[5,9,50],[0,0.5,1]],[118,-76,[1,"e2JC3HtV1OJ46JdD51adQY"],[4,4289045925],3]],[2,"f3z3Yej89HHKIYIghRcHbq",1,0],[1,-88.0870000000001,0,0]],[30,"CurrencyStarfruitIcon",131072,9,[[6,-77,[1,"27XxSRAblBKZM8Xtd/ZcHu"],[5,81,81]],[18,-78,[1,"64hX6Txd9Adbo79QuqVXx0"],4]],[2,"11PfFQUOZLxrQQ+1IiDdeU",1,0],[1,-1.421,-25.82,0],[1,0.5,0.5,1]],[28,"ScrollBacking",131072,4,[[21,-79,[1,"41se3CCGJBZ4yYi8WrxdaE"],[5,597,450],[0,0.5,1]],[78,1,0,-80,[1,"a4pPF1WglPop0cr4x8ePX1"],8]],[2,"a5ugKcqzpL27LUuCqei8Su",1,0]],[28,"BerryBlastBacking",131072,11,[[6,-81,[1,"b9X55VRbFB8b8yf1QGNHSw"],[5,241,241]],[18,-82,[1,"afqzNFvfBAuIBGeRkOO/E4"],9]],[2,"caDEiMeXJJNanotkEfu540",1,0]],[30,"IconHudPowerupBerryBlast",131072,11,[[6,-83,[1,"3aKqUO/QdL8aLNCvg18FLC"],[5,224,235]],[18,-84,[1,"f66ddTPKJJMZAA/U1dDUHO"],10]],[2,"0efQ1855dIJ7UGOqf12WQ4",1,0],[1,-8.81,-6.777,0],[1,0.9,0.9,1]],[28,"BombDeflectBacking",131072,12,[[6,-85,[1,"a9aPO2P0RIjrrD+FagTT+2"],[5,241,241]],[18,-86,[1,"08tfmxdglInqjrycVwCH0W"],11]],[2,"2c/vgzCaZHhblh0Ee/OyEm",1,0]],[87,"IconHudPowerupBombDeflect",131072,12,[[6,-87,[1,"10aPUPbv5Kiatq0oMEeuYL"],[5,210,229]],[18,-88,[1,"d5nmLp/hhPdIe0s1GIUOyK"],12]],[2,"30xSn4Ee9CF5eTjYo9Dpwd",1,0],[1,0.9,0.9,1]],[28,"PeachyTimeBacking",131072,13,[[6,-89,[1,"ec9NS6attAULGT0QGancAf"],[5,241,241]],[18,-90,[1,"7aH9up7xlCuo2qh76qX4Va"],13]],[2,"e5zc6QosBLWYxkfq/yGx6C",1,0]],[30,"IconHudPowerupPeachyTime",131072,13,[[6,-91,[1,"fcNvG7g+5IWaGQbtzL17jg"],[5,214,223]],[18,-92,[1,"00I34BXI5DlqxWqAjLqQ36"],14]],[2,"87B6qHpIZPw57gvl+Deyef",1,0],[1,0,-6.887,0],[1,0.9,0.9,1]],[30,"starfruitBonus",131072,8,[[6,-93,[1,"29nc+uZFlOMIZRivaW2T6K"],[5,81,81]],[18,-94,[1,"e6LX/VycVD16aYI9zqB8zm"],17]],[2,"90trZ9gWxPAbvBKFKALXtm",1,0],[1,-62.18000000000001,0,0],[1,0.75,0.75,1]],[20,"ScrollBottom",131072,3,[[21,-95,[1,"e2kEi3x2BCDoZDD69VP3Nq"],[5,659.03,111],[0,0.5,0]],[78,1,0,-96,[1,"d8Xpa+YiJKTploFtUX5kss"],27]],[2,"dcgZD0XJlGr4PsIUM11+3i",1,0],[1,0,-286.476,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,5,0,-2,2,0,-3,3,0,0,2,0,0,2,0,-1,19,0,-2,20,0,-3,9,0,-4,10,0,0,3,0,0,3,0,-1,4,0,-2,16,0,-3,18,0,-4,30,0,0,4,0,0,4,0,-1,22,0,-2,6,0,-3,14,0,-4,7,0,0,5,0,0,5,0,0,5,0,0,5,0,0,6,0,-1,11,0,-2,12,0,-3,13,0,0,7,0,0,7,0,0,7,0,-1,8,0,0,8,0,0,8,0,-1,29,0,-2,15,0,0,9,0,0,9,0,-1,21,0,0,10,0,0,10,0,0,10,0,0,11,0,-1,23,0,-2,24,0,0,12,0,-1,25,0,-2,26,0,0,13,0,-1,27,0,-2,28,0,0,14,0,0,14,0,0,14,0,0,15,0,0,15,0,0,15,0,0,16,0,0,16,0,-1,17,0,0,17,0,0,17,0,0,17,0,0,18,0,0,18,0,0,18,0,0,19,0,0,19,0,0,20,0,0,20,0,0,21,0,0,21,0,0,22,0,0,22,0,0,23,0,0,23,0,0,24,0,0,24,0,0,25,0,0,25,0,0,26,0,0,26,0,0,27,0,0,27,0,0,28,0,0,28,0,0,29,0,0,29,0,0,30,0,0,30,0,6,1,96],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,15,2,2,2,2,7,5,2,2,2,2,2,2,2,7,5,2,7,5,2,15,7,5,2,2,15,2,-1,-2,77,78],[2,2,45,47,78,125,33,0,72,36,26,37,18,38,27,163,0,78,33,0,23,23,44,0,74,51,51,73,490,491,33,8]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["f1QSizCAxOO7abuQS1qKjB"]}],[1],0,[],[],[]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4278190333]]],11]]],0,0,[0],[8],[7]],[[[19,"particle_juiceCoconut"],[73,"particle_juiceCoconut",[-3],[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[72,"particle_juiceSmall",1,[-4],[2,"1eGkpbHVRA7YQtVRbaS87n",1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,2,[1,"17+MscORlKD6npLDx1rPQ0"],[[0,null],6,0],[8],[3,0.42],[0],[0],[3,8.4],[0],[0],[0],[0],[3,0.495],[3,0.3],[0],[0],[[60,0.01,[3,45]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[70,true,1,2,0.0001,2.738,0.20671679660620837,[0]],[29,true,[32,1,[5,[0,1],[[45,1,-1,1,-1,1],[37,-1,1,-1,1]]]],[0],[0],[0]],[39,true,0,[11,3,-11.7,11.7],[11,3,-3.45,3.45],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-5],[31,1,1]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[2,null],6,0],[8],[3,1.14],[0],[0],[11,3,3.6,6.4],[0],[0],[0],[0],[3,0.77],[58,1,2.4,[5,[0,1],[[37,1,1,1,1],[45,1,1,1,1,1]]]],[0],[0],[[60,0.01,[3,14]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,4280193532]],[12,0.6049107142857143,[4,4278190335]],[61,1]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[83,true,1,2,0.0001,2.738,1.2217304763960306,0.20671679660620837,[0],[1,0,0,55]],[29,true,[32,1,[5,[0,0.14102564102564102,1],[[13,2,1,0.04860266743843023,1],[47,2,0.9629629629629629,-0.6339319845464617,-0.6339319845464617],[37,-1.1210613598673298,1,-1.1210613598673298,1]]]],[0],[0],[0]],[39,true,0,[11,3,-10.2,10.2],[43,3],[43,3],[3,1]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-6],[31,1,3]]],0,[0,3,1,0,-1,4,0,-1,2,0,-1,3,0,9,3,0,9,4,0,6,1,6],[0,0,0,0],[-1,10,-1,10],[166,76,166,76]],[[[19,"particle_juicePome"],[105,"particle_juicePome",[-2],[2,"21VjHvuN9GNI9gCaRF+WeF",-1,0]],[56,0.1,false,1.0383165568890103,5.84675632831708,1.0316669964007352,1000,0,1,[1,"d95GbZc2FJspockrI2TGig"],[[0,null],6,0],[8],[3,1],[0],[0],[11,3,7,14],[0],[0],[0],[0],[3,0.16],[58,1,2.4,[5,[0,1],[[37,1,1,1,1],[45,1,1,1,1,1]]]],[0],[0],[[60,0.01,[3,14]]],[65,[33,1,[36,[[12,0.004464285714285714,[4,18780668]],[12,0.6049107142857143,[4,16777471]],[12,1,[4,33554431]]],[[14,255,0.002232142857142857],[14,255,0.6071428571428571],[14,0,0.9933035714285714]]]]],[83,true,1,2,0.0001,2.738,1.2217304763960306,0.20671679660620837,[0],[1,0,0,55]],[29,true,[32,1,[5,[0,0.14102564102564102,1],[[13,2,1,0.04860266743843023,1],[47,2,0.9629629629629629,-0.6339319845464617,-0.6339319845464617],[37,-1.1210613598673298,1,-1.1210613598673298,1]]]],[0],[0],[0]],[39,true,0,[11,3,-30,30],[43,3],[43,3],[3,2]],[26,[0],[0],[0]],[23,[0],[0],[0],[0]],[41,[0],[0],[0]],[24,[0],[0]],[27,[0],[0],[8],[8],-3],[31,1,1]]],0,[0,3,1,0,-1,2,0,9,2,0,6,1,3],[0,0],[-1,10],[62,41]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["f3kij+TH1EcYQ4pPXWimnj"]}],[1],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["f3zTdF9bJCM7OMMUF8BwZ/"]}],[1],0,[],[],[]],[[{"name":"LoadingBar","rect":{"x":0,"y":0,"width":32,"height":32},"offset":{"x":0,"y":0},"originalSize":{"width":32,"height":32},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[492]],[[[19,"AppleRed"],[91,"AppleRed",[-6,-7,-8,-9],[[35,2,-2,[1,"5dwTks15RBx4CiPz0MF13h"]],[77,0.5,-3,[1,"bakwwmchtPvJd05DFmOuoP"]],[55,-4,[1,"a8ojpF4mBIqpekD7nLKcJd"]],[84,-5,[1,"b0Pdkk5E9Ks7XcZXgM/i12"]]],[2,"0cin1tpphNsL5hOKb6IG/H",-1,0],[1,-2.746,0,0]],[123,"AppleRedHalf1",false,1,[[15,-10,[1,"eamoRDM3lF9bP1e/QT0FQn"],[2],[16],3],[35,8,-11,[1,"24VBQvmMJAHI4AebLWXHvi"]]],[2,"3baIG6aSNCL5XwhrTTgEYm",1,0],[1,0.0011468292213976383,0.000318600534228608,3.851859802678694e-36],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[123,"AppleRedHalf2",false,1,[[15,-12,[1,"9ctWTbSiZFqLTs+kUAkF/n"],[4],[16],5],[35,8,-13,[1,"5bVE0AshdImJ6a0Why/BRC"]]],[2,"8aMa/hyhlByrT6HLiMDAXz",1,0],[1,0.0011468292213976383,0.000318600534228608,3.851859802678694e-36],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[124,"AppleRedWhole",1,[[15,-14,[1,"544BD6JkFH2bIvWG/QTmda"],[0],[16],1]],[2,"94OV2AIiBB3a5KS1hsODLz",1,0],[1,0.0011468292213976383,0.000318600534228608,3.851859802678694e-36],[3,-0.7071067811865475,0,0,0.7071067811865476],[1,-90,0,0]],[123,"AppleRedOutline",false,1,[[15,-15,[1,"02g+m8XRFKbbL0T3H19GjG"],[6],[16],7]],[2,"8dchmNBDNExZwWL2u/i2hQ",1,0],[1,0.0011468292213976383,0.000318600534228608,3.851859802678694e-36],[3,-0.7071067811865476,0,0,0.7071067811865476],[1,-90.00000000000003,0,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,4,0,-2,2,0,-3,3,0,-4,5,0,0,2,0,0,2,0,0,3,0,0,3,0,0,4,0,0,5,0,6,1,15],[0,0,0,0,0,0,0,0],[-1,4,-1,4,-1,4,-1,4],[1,493,1,494,1,495,138,496]],[[[75,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[13,8],[80,5]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["fa+a9QaOhK8LmJ7RohLJKE"]}],[1],0,[],[],[]],[[{"name":"LogoNinjaNew","rect":{"x":12,"y":23,"width":492,"height":205},"offset":{"x":2,"y":2.5},"originalSize":{"width":512,"height":256},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[497]],[[[19,"crosses_gameplay"],[192,"crosses_gameplay",33554432,[[6,-2,[1,"1czpbDmJJPArFM7BStO6tn"],[5,64,64]],[94,2,-3,[1,"b9VsL7QvBNE60jxJDHeurA"],0],[98,-4,[1,"ab/WNxx5RBDKf6rSYivdsU"],[1]]],[2,"e8KmYmyJdDFov4JbyH5kG2",-1,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,6,1,4],[0,0],[2,-1],[498,499]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["fdCImM4bBABrV3cSjCasrF"]}],[1],0,[],[],[]],[[{"name":"ButtonRestart","rect":{"x":0,"y":0,"width":128,"height":128},"offset":{"x":0,"y":0},"originalSize":{"width":128,"height":128},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[500]],[[[366,[[367,"ShadowFlow",[[368,"ShadowStage"]]],[369,"ForwardFlow",1,[[370,"ForwardStage",[[371,["default"]],[372,true,1,["default"]]]]]]]]],0,0,[],[],[]],[[[268,[{}],[{"USE_TEXTURE":true}]]],0,0,[0],[8],[501]],[[[19,"popup_infoPU"],[68,"popup_infoPU",131072,[-6,-7,-8],[[6,-2,[1,"192dMBCk1BRrdLYGFetkkz"],[5,1280,768]],[131,45,100,100,-3,[1,"d7aJ97ZDhGE4CYCSyzWL5G"]],[98,-4,[1,"116e//VSRHKbm0JFMHBvvN"],[58,59]],[373,-5,[1,"52wivUXc5MFJtMbHPkrfvz"]]],[2,"13+H7u4GtKhrmdElvQzz7b",-1,0]],[164,"mask",131072,[-11,-12,-13,-14,-15],[[21,-9,[1,"405suMHghJAbPQ5n10sS93"],[5,597,450],[0,0.5,1]],[186,-10,[1,"85ZDf2dbxKdb2cntn2J5h0"]]],[2,"0du/h9GTFD65R4h+SEN1wN",1,0],[1,0,211.301,0]],[49,"PU1",131072,2,[-17,-18,-19,-20,-21,-22],[[34,-16,[1,"14PgIN7IRO8on+qVR1kbay"]]],[2,"79dcDIdUNJBZXhUytSahFi",1,0],[1,0,-134.421,0]],[49,"PU2",131072,2,[-24,-25,-26,-27,-28,-29],[[34,-23,[1,"2fR2nsvmRM2JNH5OihcNY5"]]],[2,"24PlLiByRC94Zt4oB7MKR5",1,0],[1,0,-347.277,0]],[49,"PU3",131072,2,[-31,-32,-33,-34,-35,-36],[[34,-30,[1,"07CkqUe9xIqYWbFFQ04pcp"]]],[2,"17vfdjBUpA3pOxtJal+AJU",1,0],[1,0,-240.849,0]],[49,"Scroll",131072,1,[2,-39,-40,-41],[[6,-37,[1,"efnH9C9gRMS5ysqylA3N5D"],[5,650,520]],[145,17,-900,-38,[1,"60M8CfRe5DeYGpb6udHWVZ"]]],[2,"67IaJuIFtJ2o0lyZwbWdM0",1,0],[1,0,1024,0]],[166,"PowerUpButton",false,131072,1,[-43,-44,-45,-46,-47],[[34,-42,[1,"17q67pFaJGnrLXHpVxdvBU"]]],[2,"2dnpgz5IdDDoFmzGVBYafY",1,0],[1,-117.272,-6.305,0]],[28,"BG",131072,1,[[6,-48,[1,"a70u0GYiJL5KzpmSlPu9r2"],[5,2500,1468]],[59,0,-49,[1,"31omv8YKtIZ4H3AKeWFIMm"],[4,0],0],[144,45,-610,-610,-350,-350,1320,800,-50,[1,"c2EqfhKKNOLa2aXvfkqtuf"],1],[159,-51,[1,"feU/skILJPoL8GoqZ2+ya8"],1]],[2,"0eIUBTRPlGvoFL/7Mo44wN",1,0]],[67,"IconPowerup",131072,3,[-53,-54,-55],[[6,-52,[1,"635X43U2FJZr4eIWJgoGvu"],[5,251,251]]],[2,"6ctqv6G/dDFbygWnfSV2mo",1,0],[1,-192.343,0,0],[1,0.4,0.4,0.9999999999999999]],[67,"IconPowerup",131072,4,[-57,-58,-59],[[6,-56,[1,"33E+pf+yVAAJVZeSEsimlm"],[5,251,251]]],[2,"40jW1tuZ1CorMDuCO8UWhK",1,0],[1,-192.343,0,0],[1,0.4,0.4,0.9999999999999999]],[67,"IconPowerup",131072,5,[-61,-62,-63],[[6,-60,[1,"b4Jd4LFpZAlJtkucmpE8qw"],[5,251,251]]],[2,"7eQb1FuwxLRY/tvWx/0YyG",1,0],[1,-192.343,0,0],[1,0.4,0.4,0.9999999999999999]],[250,"IconPowerup",131072,7,[-65,-66,-67],[[6,-64,[1,"96o59PFa9CzKLR+iIG6iwu"],[5,251,251]]],[2,"07VOOgFhJItJ25t9tRsm/U",1,0],[1,0.3,0.3,0.9999999999999999]],[125,"BeryBlast",131072,9,[-69,-70],[[34,-68,[1,"a4C2C5TI5A15XlQWq8MjQX"]]],[2,"864SBd9flCTJa4W4ieksot",1,0]],[79,"BombDeflect",false,131072,9,[-72,-73],[[34,-71,[1,"a5vtwdOwhFPar/GEdVP+uD"]]],[2,"287eAJmgtGsIp2RpX33rWK",1,0]],[79,"PeachyTime",false,131072,9,[-75,-76],[[34,-74,[1,"f6g6HlokpKdoPzGcDCXMJ2"]]],[2,"ebZqVEVpRGo76Bf22HpjV8",1,0]],[20,"text_PU",131072,3,[[21,-77,[1,"fdEEDSBxpNuL0RZ8BhRFCm"],[5,300,50],[0,0,0.5]],[99,"Berry Blast",0,35,35,0,2,false,false,-78,[1,"49r7e6SUdEvZdPB4IKLJYX"],12,13],[25,3,-79,[1,"1e7hAbA65BAqRR4prnRNbn"],[4,4279177075]]],[2,"b2AFVlOjBLB5/RVI2XDkGu",1,0],[1,-133.018,2.838,0]],[20,"text_desc",131072,3,[[21,-80,[1,"81tNd2R9pHNZ9lrdVW32In"],[5,350,31.5],[0,0,0.5]],[139,"Strawberries explode for 5 points!",0,22,22,0,2,false,false,-81,[1,"48MdzvOYBIbI7p4vA4tpQX"],[4,4280770714],14],[111,false,4,-82,[1,"e8Qaj1JiVIXriooS729Im3"],[4,4282729797]]],[2,"53JIxUQo5LfI3xg7g7X+yI",1,0],[1,-132.383,-43.267,0]],[20,"text1",131072,2,[[6,-83,[1,"7avaI9qEZMdYAiumYVtXiv"],[5,500,31.5]],[117,"Equip Power Ups for a Ninja Advantage!",25,25,0,2,false,false,-84,[1,"08EExIdphCgI7J+zHxMdrv"],[4,4280770714],15],[111,false,4,-85,[1,"fc47kNSx9I7aqX3Dp+c7ue"],[4,4282729797]]],[2,"111Di5cuFLC6FmSAHA8qXu",1,0],[1,0,-58.877,0]],[79,"BeryBlast",false,131072,10,[-87,-88],[[34,-86,[1,"fatcg2W/dMoLDpHPBgSwdC"]]],[2,"ccotEm0a5Cz6COTR1+UlGi",1,0]],[125,"BombDeflect",131072,10,[-90,-91],[[34,-89,[1,"58SrV8sVJOmpnroYQBO1AN"]]],[2,"ee9tsEbeRFu7SSLYaun/uW",1,0]],[79,"PeachyTime",false,131072,10,[-93,-94],[[34,-92,[1,"79LJ35ynZBXbJ+xLnUY0HK"]]],[2,"dcjoilaYBBsbQdDxWRUTF5",1,0]],[20,"text_PU",131072,4,[[21,-95,[1,"fdqKCei8tBYoKAnr8F3HCk"],[5,300,50],[0,0,0.5]],[99,"Bomb Deflect",0,35,35,0,2,false,false,-96,[1,"afSNSB665EEp4xm0aszB4O"],25,26],[25,3,-97,[1,"f7bjgWVnhCaqNydZ3xN4Dp"],[4,4282726193]]],[2,"d9MhjVT7RJXr4HmomJaFj/",1,0],[1,-133.018,2.838,0]],[20,"text_desc",131072,4,[[21,-98,[1,"f96JK6H/ZNdp3C4KC2CLXG"],[5,350,31.5],[0,0,0.5]],[139,"Saves you hitting up to 3 Bombs!",0,22,22,0,2,false,false,-99,[1,"48Q0INIgdLYIG1LqVwRzy2"],[4,4280770714],27],[111,false,4,-100,[1,"80wiLru+lHB5H17t9kDTCt"],[4,4282729797]]],[2,"7c9Q9XaO1Fio4NrBCxBpms",1,0],[1,-132.383,-43.267,0]],[79,"BeryBlast",false,131072,11,[-102,-103],[[34,-101,[1,"14YCzEXlJMWZDzYd05NmU1"]]],[2,"16mEWPBlZLOqaCDqQJnv5t",1,0]],[79,"BombDeflect",false,131072,11,[-105,-106],[[34,-104,[1,"27aqFIUh1DK7Pm7SKVGkoV"]]],[2,"3aLjf5wXhFC5ap9fXFSFjI",1,0]],[125,"PeachyTime",131072,11,[-108,-109],[[34,-107,[1,"0buwk2pIdPrYpU3i7zouKL"]]],[2,"95GP6PQFtOGbAbR1QPmy9j",1,0]],[20,"text_PU",131072,5,[[21,-110,[1,"77eOPJR75JSJkJTjakh/8g"],[5,300,50],[0,0,0.5]],[99,"Peachy Time",0,35,35,0,2,false,false,-111,[1,"55f0jEWHJMHb2wix6GOqWO"],37,38],[25,3,-112,[1,"aeaccM18dBs4Zm8mY6acPV"],[4,4280036734]]],[2,"0bZMsd0hdFE6DTgGimXz06",1,0],[1,-133.018,2.838,0]],[20,"text_desc",131072,5,[[21,-113,[1,"cax1t5iUVF07aB+9hUJZuT"],[5,350,31.5],[0,0,0.5]],[139,"+2 Seconds for each Peach sliced!",0,22,22,0,2,false,false,-114,[1,"11Ve5LipdFNJ4m2ncv5u7p"],[4,4280770714],39],[111,false,4,-115,[1,"cf2ejNjHlG7YWW6pSAgtg/"],[4,4282729797]]],[2,"66YGD1wDxF76TkdCQkliQO",1,0],[1,-132.383,-43.267,0]],[67,"ScrollHeader",131072,6,[-118],[[21,-116,[1,"26HIGxxyxO079912+FJ9qs"],[5,1050,139],[0,0.5,1]],[78,1,0,-117,[1,"dcXZjZsiJFno8GFnUwIa3O"],42]],[2,"a5MVIJlxREq6W+ZaPeYQdz",1,0],[1,0,250,0],[1,0.6,0.6,1]],[20,"text_header",131072,29,[[6,-119,[1,"3cAeXOwhlMip19cg9FQOTD"],[5,800,100]],[74,"Power ups",80,80,0,2,false,false,-120,[1,"99YRt2i3FI3K+2r1xCmKrS"],40,41],[140,0,-121,[1,"8c9cymsyFCuLNo6hSLX29T"],[4,2097207039],[0,1,-1]]],[2,"bbTsB5cslMkKjB7oWBv5gT",1,0],[1,0,-46.292,0]],[30,"TabCross",131072,6,[[21,-122,[1,"c562t0PXpGz7Awlzrn2jkd"],[5,134,96],[0,0.5,1]],[18,-123,[1,"e6mIwwLk5M8LkMAdzBbQQJ"],43],[80,3,0.95,-124,[1,"b91AQA9VpBsZpTlDATrR0T"],[[95,"3f3a4a0/cVFwZvy0Nw/9MrA","buttonCloseClicked",1]],44]],[2,"b4PUnSgu9PHIkSN8BfPO+V",1,0],[1,0,-261.526,0],[1,0.6,0.6,1]],[125,"BeryBlast",131072,12,[-126,-127],[[34,-125,[1,"d88sYqa81NwKbsEJJpfOQs"]]],[2,"1bR3Y5EyhL0JYQVv03M516",1,0]],[79,"BombDeflect",false,131072,12,[-129,-130],[[34,-128,[1,"da7+9KvqtEPJa7wrvT2yRX"]]],[2,"9cQYSjHvhOwY5QNYkCiDw7",1,0]],[79,"PeachyTime",false,131072,12,[-132,-133],[[34,-131,[1,"40xv6WQyRJ1o75bQnaPXqn"]]],[2,"9bLTNpwDpNPpa/HvL7GGO9",1,0]],[135,"LabelAngka",false,131072,7,[-136],[[6,-134,[1,"b69dQASHxD6bhwYVprUei8"],[5,64,69]],[18,-135,[1,"b35Oe7Di5EnYZhYmrni+9w"],54]],[2,"65wm5qehpH17bwCukLmeew",1,0],[1,33.268,-30.809,0],[1,0.45,0.45,0.9999999999999997]],[20,"text_PU",131072,35,[[6,-137,[1,"d61ehep7lJ9ajfB7cdX7FT"],[5,50,50]],[176,"1",40,0,2,false,false,-138,[1,"8ca92JTYhA1oAsssq62hVi"],52,53],[25,4,-139,[1,"233E6gT/9LN4FIWkQTIV/e"],[4,4282729797]]],[2,"d1aqHPZCFIVqeD5Cm9s9aO",1,0],[1,0,3.379,0]],[30,"mode_text",131072,7,[[21,-140,[1,"68VUyCoPJOCItYIJIQPu4G"],[5,400,63],[0,0.5,1]],[277,"All Mode",0,50,50,0,3,false,false,-141,[1,"b9KYiRMzBNEaHPt4xIkEET"],[4,4280770714],57],[111,false,4,-142,[1,"c38OCIn4JJF5Y4Aa9knDux"],[4,4282729797]]],[2,"51n+yVhYNMnazNC9gT2vrH",1,0],[1,0,-47.819,0],[1,0.3,0.3,0.9999999999999999]],[28,"ScrollBacking",131072,2,[[21,-143,[1,"ccsv0bGZZIZ5+kFsj6QEUF"],[5,597,450],[0,0.5,1]],[78,1,0,-144,[1,"c8GXHXHrlACaTzGZHEhkjZ"],2]],[2,"ccqwKFiQlHXaLcHKxmzVb+",1,0]],[30,"ribbon1",131072,3,[[6,-145,[1,"96iBGl/ZtCEp81luwwkKs9"],[5,80,80]],[18,-146,[1,"de5MDCZ+BPG5RvDp+uSksN"],3]],[2,"12XemVL21GVZhRQSRBmNt0",1,0],[1,255.02,-5.272,0],[1,0.5,0.5,1]],[30,"ribbon3",131072,3,[[6,-147,[1,"ffFsx4e/1LNqtKt2C5jAT1"],[5,80,80]],[18,-148,[1,"4fzlSFQ7BETJh9K3l3TSpk"],4]],[2,"94wW8qDItL+KcijJh99Go6",1,0],[1,-255.02,-5.272,0],[1,-0.5,0.5,1]],[20,"ribbon2",131072,3,[[21,-149,[1,"cbuiE8jtZIgJzNI+Qpox4s"],[5,510,40],[0,0.5,1]],[94,0,-150,[1,"bbkJUG/XRErJL7bKFrJKc5"],5]],[2,"ddgaQTlzJM+bgcNGf02n84",1,0],[1,0,20.686,0]],[28,"BerryBlastBacking",131072,13,[[6,-151,[1,"7aDYaJXKpOpKMlUen78q+T"],[5,241,241]],[18,-152,[1,"5aDfuQm69C8Jw2SH/+t71r"],6]],[2,"9fIdQMqHlFvoD2vIDd1fZM",1,0]],[30,"IconHudPowerupBerryBlast",131072,13,[[6,-153,[1,"2bmxfB/DJLT7+yBbz6asiQ"],[5,224,235]],[18,-154,[1,"20Ias/dOdPCZvnnkQbav3+"],7]],[2,"d0v6ur3uxHhp90iJ2xufsb",1,0],[1,-8.81,-6.777,0],[1,0.9,0.9,1]],[28,"BombDeflectBacking",131072,14,[[6,-155,[1,"10x0kLVFVAWYdgKZ0/Z0F/"],[5,241,241]],[18,-156,[1,"aamC2Nz4lMZ4aYhZObCcbx"],8]],[2,"16QVpXSkhIuYnDS/1AF1Ah",1,0]],[87,"IconHudPowerupBombDeflect",131072,14,[[6,-157,[1,"3fMe8BU05A1qIBHycYHFaD"],[5,210,229]],[18,-158,[1,"75AAV2pYFEXaUkSg+BDT/C"],9]],[2,"81MJ5lK59NF5aD6dKuS5MG",1,0],[1,0.9,0.9,1]],[28,"PeachyTimeBacking",131072,15,[[6,-159,[1,"e2A7dcI8ZDVLPY5MMSdEyO"],[5,241,241]],[18,-160,[1,"c3GAGZKY9M04qysx3w+X7j"],10]],[2,"9fQr1a7ltIa5ohYaaK9WKs",1,0]],[30,"IconHudPowerupPeachyTime",131072,15,[[6,-161,[1,"5aiskBl2xFr41ElGR4+Pfg"],[5,214,223]],[18,-162,[1,"d6ihE1VYVHKIvjKOlKEGtp"],11]],[2,"f0Fp5XZi1HsYReVfwEUcve",1,0],[1,0,-6.887,0],[1,0.9,0.9,1]],[30,"ribbon1",131072,4,[[6,-163,[1,"cdDaBYPE1IdoRonO/J4X9o"],[5,80,80]],[18,-164,[1,"demNwA0I1GQLtNUON4s1nR"],16]],[2,"dchcxx81FKSb4U7zQYL6oH",1,0],[1,255.02,-5.272,0],[1,0.5,0.5,1]],[30,"ribbon3",131072,4,[[6,-165,[1,"eb+RJsZBZIS4CvpWlTw7OB"],[5,80,80]],[18,-166,[1,"bd1gP45MlK6rCix2vdTS4X"],17]],[2,"7f/mNnueNMDZJAhgoWcOLy",1,0],[1,-255.02,-5.272,0],[1,-0.5,0.5,1]],[20,"ribbon2",131072,4,[[21,-167,[1,"3ffAz/w4FNZKE2cDNb/kY4"],[5,510,40],[0,0.5,1]],[94,0,-168,[1,"deu0A8XV1C3YEYNGD+t3yt"],18]],[2,"e0+5zetYZGh7Nn/wCwjW5j",1,0],[1,0,20.686,0]],[28,"BerryBlastBacking",131072,19,[[6,-169,[1,"ba4ZiqRxxAHpYHyQc00d8m"],[5,241,241]],[18,-170,[1,"76QYr6UdxOLpkiZ1duBG7P"],19]],[2,"47nMM5TtRCcZH9wNUI7cIN",1,0]],[30,"IconHudPowerupBerryBlast",131072,19,[[6,-171,[1,"84dV6lqpRMu6IJ6tncagts"],[5,224,235]],[18,-172,[1,"4dYPl8q1BLiKG0qR+lxpAF"],20]],[2,"1d5rw58YJDv5wSAD6hmX0D",1,0],[1,-8.81,-6.777,0],[1,0.9,0.9,1]],[28,"BombDeflectBacking",131072,20,[[6,-173,[1,"f2GUWvq9RGE5MBt3E8pxrk"],[5,241,241]],[18,-174,[1,"2cOo0kUS5DZqNoE4l8A5wu"],21]],[2,"9eNmxWxr1Eo5AsZNIU4M5k",1,0]],[87,"IconHudPowerupBombDeflect",131072,20,[[6,-175,[1,"f3S4k2CCZNpqj53dtFc0/u"],[5,210,229]],[18,-176,[1,"22MjQyPWpCEoC9YRe38ZVE"],22]],[2,"bcQI9WePdD/5uSzeR+TJh5",1,0],[1,0.9,0.9,1]],[28,"PeachyTimeBacking",131072,21,[[6,-177,[1,"3291BfQQFAVYwOjkuG8Uhz"],[5,241,241]],[18,-178,[1,"5593SLug9DmaPwdesnOAXk"],23]],[2,"edi1Re9f9HEoDhJlwZS+2b",1,0]],[30,"IconHudPowerupPeachyTime",131072,21,[[6,-179,[1,"5bDd9W3KJEpLuBWbf1carS"],[5,214,223]],[18,-180,[1,"56QUaap+5COaaW/hkQkbjM"],24]],[2,"36epgbUadJ47lqfYSMEVk+",1,0],[1,0,-6.887,0],[1,0.9,0.9,1]],[30,"ribbon1",131072,5,[[6,-181,[1,"aaBdNkj3tJC6bNBqd6lm4A"],[5,80,80]],[18,-182,[1,"659ZNFqs9CLIXx+4iP9Jmf"],28]],[2,"f9muSHZptDmIFf/NnELpGu",1,0],[1,255.02,-5.272,0],[1,0.5,0.5,1]],[30,"ribbon3",131072,5,[[6,-183,[1,"778dbWMrtFwp21CpOYKmr6"],[5,80,80]],[18,-184,[1,"6bsXI3bwBHdbEAfawIHPaA"],29]],[2,"88MHFv4YZJ1JdutZ4/8thZ",1,0],[1,-255.02,-5.272,0],[1,-0.5,0.5,1]],[20,"ribbon2",131072,5,[[21,-185,[1,"31XWFmfWVOCJ9l8axlr/kM"],[5,510,40],[0,0.5,1]],[94,0,-186,[1,"dbmha2ZKdL4ar46PfFT1ho"],30]],[2,"a5sTcJOFtLDJa03dlajnqv",1,0],[1,0,20.686,0]],[28,"BerryBlastBacking",131072,24,[[6,-187,[1,"3bjSRLWpVFhaONG7lMJ7p9"],[5,241,241]],[18,-188,[1,"4fDgFHqEdIkaapsauTkNin"],31]],[2,"e0ZzIQRIxL8roDNrc3sEO4",1,0]],[30,"IconHudPowerupBerryBlast",131072,24,[[6,-189,[1,"9fPPsAnXVFJq5EniynR1zR"],[5,224,235]],[18,-190,[1,"44le+uJZlG6rulHRzKpV59"],32]],[2,"13lsQfBQdEWY4jbBb4RORf",1,0],[1,-8.81,-6.777,0],[1,0.9,0.9,1]],[28,"BombDeflectBacking",131072,25,[[6,-191,[1,"939Ud0IhBOi4dCR2MxoAIj"],[5,241,241]],[18,-192,[1,"2aT3fdSSlPo5zxLXOYJleP"],33]],[2,"eaSQSAauFItIcNEgNalXD3",1,0]],[87,"IconHudPowerupBombDeflect",131072,25,[[6,-193,[1,"a49qxg4fdJL69GBDLTscY5"],[5,210,229]],[18,-194,[1,"d6SZcO4Y5NcKRJDui+QLwi"],34]],[2,"5c9lpw2VtDApilZx6v4FPR",1,0],[1,0.9,0.9,1]],[28,"PeachyTimeBacking",131072,26,[[6,-195,[1,"2ab6BZG7dMFowRfKf3D8L6"],[5,241,241]],[18,-196,[1,"3aKti3s8dK44/WTgaitp0W"],35]],[2,"f6Ggtp3clDx5teamIygs+9",1,0]],[30,"IconHudPowerupPeachyTime",131072,26,[[6,-197,[1,"8bS47u6UBFn4OfWrUfYxV3"],[5,214,223]],[18,-198,[1,"58g7lBqGxGfLv2+ZEqmHXs"],36]],[2,"17A39CGbBJlr1tI9YkHILK",1,0],[1,0,-6.887,0],[1,0.9,0.9,1]],[20,"ScrollBottom",131072,6,[[21,-199,[1,"a3/N8JE8RGlacNG3p6+lqG"],[5,659.03,111],[0,0.5,0]],[78,1,0,-200,[1,"914Dyfru5KLafjtImSHsYY"],45]],[2,"e2Q4nmFSNCh5gdCxlaO9fn",1,0],[1,0,-286.476,0]],[28,"BerryBlastBacking",131072,32,[[6,-201,[1,"30K3C+c6BAaqbztTwam8hh"],[5,241,241]],[18,-202,[1,"ed4oXze1xDdYsiyea0uraE"],46]],[2,"f8dyUKvbRFaaTQatueSRvY",1,0]],[30,"IconHudPowerupBerryBlast",131072,32,[[6,-203,[1,"f6sLtWGKRNZ6cS4zPIBBww"],[5,224,235]],[18,-204,[1,"19iLDnLshFm5CO710eHVnk"],47]],[2,"c9qvvZqbRNw4gkczfJjY5p",1,0],[1,-8.81,-6.777,0],[1,0.9,0.9,1]],[28,"BombDeflectBacking",131072,33,[[6,-205,[1,"e82XijeR1DBqmSSeROjMUu"],[5,241,241]],[18,-206,[1,"10QIUooItEh5TXztSGHZgk"],48]],[2,"eaZBY8oQVC7pIgMQM48UMt",1,0]],[87,"IconHudPowerupBombDeflect",131072,33,[[6,-207,[1,"6bQ4Mth2RB5J6vh8kdbGP5"],[5,210,229]],[18,-208,[1,"e0GAtfDBdPkYKxTvybfSaX"],49]],[2,"774ZwNJj9D7p4KTNeB4r4K",1,0],[1,0.9,0.9,1]],[28,"PeachyTimeBacking",131072,34,[[6,-209,[1,"3aU05ZhN1IaJ+AELqttW8b"],[5,241,241]],[18,-210,[1,"18u3MjdypGg47e0BwEIJgs"],50]],[2,"c8Ur70YU1PKYWawnh9qXdj",1,0]],[30,"IconHudPowerupPeachyTime",131072,34,[[6,-211,[1,"adYh60BKhAGIfisQVHysuX"],[5,214,223]],[18,-212,[1,"b9IVK6/0VCHI6qnkmDcfWi"],51]],[2,"edKHZX/RtIlJ8D6udRdcxD",1,0],[1,0,-6.887,0],[1,0.9,0.9,1]],[167,"GreenEquipped",false,131072,7,[[6,-213,[1,"4eWd71VBVHhr8aufQcPxdm"],[5,94,100]],[18,-214,[1,"4cc4DgJF9KsIzKAGD+Gckm"],55]],[2,"64iD99+CFOwYTguRYltZg7",1,0],[1,33.268,-30.809,0],[1,0.3,0.3,0.9999999999999998]],[30,"YellowPlus",131072,7,[[6,-215,[1,"94elZS/mVIN5aKXPwjsXuC"],[5,94,100]],[18,-216,[1,"d9RxV7/kZH2qo7pIZv63vT"],56]],[2,"c6ybvOjB9KIYWPar54EEFK",1,0],[1,33.268,-30.809,0],[1,0.3,0.3,1]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,8,0,-2,6,0,-3,7,0,0,2,0,0,2,0,-1,38,0,-2,3,0,-3,18,0,-4,4,0,-5,5,0,0,3,0,-1,39,0,-2,40,0,-3,41,0,-4,9,0,-5,16,0,-6,17,0,0,4,0,-1,48,0,-2,49,0,-3,50,0,-4,10,0,-5,22,0,-6,23,0,0,5,0,-1,57,0,-2,58,0,-3,59,0,-4,11,0,-5,27,0,-6,28,0,0,6,0,0,6,0,-2,29,0,-3,31,0,-4,66,0,0,7,0,-1,12,0,-2,35,0,-3,73,0,-4,74,0,-5,37,0,0,8,0,0,8,0,0,8,0,0,8,0,0,9,0,-1,13,0,-2,14,0,-3,15,0,0,10,0,-1,19,0,-2,20,0,-3,21,0,0,11,0,-1,24,0,-2,25,0,-3,26,0,0,12,0,-1,32,0,-2,33,0,-3,34,0,0,13,0,-1,42,0,-2,43,0,0,14,0,-1,44,0,-2,45,0,0,15,0,-1,46,0,-2,47,0,0,16,0,0,16,0,0,16,0,0,17,0,0,17,0,0,17,0,0,18,0,0,18,0,0,18,0,0,19,0,-1,51,0,-2,52,0,0,20,0,-1,53,0,-2,54,0,0,21,0,-1,55,0,-2,56,0,0,22,0,0,22,0,0,22,0,0,23,0,0,23,0,0,23,0,0,24,0,-1,60,0,-2,61,0,0,25,0,-1,62,0,-2,63,0,0,26,0,-1,64,0,-2,65,0,0,27,0,0,27,0,0,27,0,0,28,0,0,28,0,0,28,0,0,29,0,0,29,0,-1,30,0,0,30,0,0,30,0,0,30,0,0,31,0,0,31,0,0,31,0,0,32,0,-1,67,0,-2,68,0,0,33,0,-1,69,0,-2,70,0,0,34,0,-1,71,0,-2,72,0,0,35,0,0,35,0,-1,36,0,0,36,0,0,36,0,0,36,0,0,37,0,0,37,0,0,37,0,0,38,0,0,38,0,0,39,0,0,39,0,0,40,0,0,40,0,0,41,0,0,41,0,0,42,0,0,42,0,0,43,0,0,43,0,0,44,0,0,44,0,0,45,0,0,45,0,0,46,0,0,46,0,0,47,0,0,47,0,0,48,0,0,48,0,0,49,0,0,49,0,0,50,0,0,50,0,0,51,0,0,51,0,0,52,0,0,52,0,0,53,0,0,53,0,0,54,0,0,54,0,0,55,0,0,55,0,0,56,0,0,56,0,0,57,0,0,57,0,0,58,0,0,58,0,0,59,0,0,59,0,0,60,0,0,60,0,0,61,0,0,61,0,0,62,0,0,62,0,0,63,0,0,63,0,0,64,0,0,64,0,0,65,0,0,65,0,0,66,0,0,66,0,0,67,0,0,67,0,0,68,0,0,68,0,0,69,0,0,69,0,0,70,0,0,70,0,0,71,0,0,71,0,0,72,0,0,72,0,0,73,0,0,73,0,0,74,0,0,74,0,6,1,2,19,6,216],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,15,2,2,2,2,2,2,2,2,2,2,7,5,5,5,2,2,2,2,2,2,2,2,2,7,5,5,2,2,2,2,2,2,2,2,2,7,5,5,7,5,2,2,15,2,2,2,2,2,2,2,7,5,2,2,2,5,-1,-2],[2,2,72,167,167,502,36,26,37,18,38,27,60,0,17,17,168,168,503,36,26,37,18,38,27,504,0,17,169,169,505,36,26,37,18,38,27,506,0,17,44,0,74,51,51,73,36,26,37,18,38,27,8,0,507,508,509,17,510,511]],[[[22,".bin",3885036052,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21120,"length":3144,"count":1572,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":21120,"count":330,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5885238647460938,-0.2596062123775482,-0.6486077904701233],"maxPosition",8,[1,0.3850335478782654,0.2605516314506531,0.9504294395446777]]],-1],0,0,[],[],[]],[[[22,".bin",1456838610,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21120,"length":3144,"count":1572,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":21120,"count":330,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5445291996002197,-0.21560634672641754,-0.604667603969574],"maxPosition",8,[1,0.34103572368621826,0.21655181050300598,0.9100562334060669]]],-1],0,0,[],[],[]],[[[22,".bin",1283128049,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13504,"length":1800,"count":900,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":13504,"count":211,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.1945917308330536,-0.21524415910243988,-0.02484912797808647],"maxPosition",8,[1,0.34103572368621826,0.21524745225906372,0.9100562334060669]]],-1],0,0,[],[],[]],[[[102,"outinesMort",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"USE_VERTEX_COLOR":true}],[[[{"metallic":0.400000005960464,"roughness":0.806901276111603},"albedoScale",8,[1,1,1,1],"emissiveScale",8,[2,1,1,1,1]]],11]]],0,0,[0],[8],[13]],[[[22,".bin",2643988878,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10432,"length":1536,"count":768,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":10432,"count":163,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5445291996002197,-0.21524415910243988,-0.604667603969574],"maxPosition",8,[1,0.26817819476127625,0.21524745225906372,0.023938331753015518]]],-1],0,0,[],[],[]],[[[46,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true}],[[[{},"mainColor",8,[4,4294696769],"secondColor",8,[4,4294007341],"thirdColor",8,[4,4290130700],"fourthColor",8,[4,4290130700]]],11]]],0,0,[0],[8],[3]],[[{"fmt":"0","w":0,"h":0},-1],[0],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["ffgZuOriBAqIK0TOrl3fog"]}],[1],0,[],[],[]],[[{"name":"coconut","rect":{"x":1,"y":0,"width":90,"height":88},"offset":{"x":0,"y":0},"originalSize":{"width":92,"height":88},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[3],0,[0],[11],[512]]]]
