[1,["0743lKVjFGNpD7HA379eA1_6c48a","cbuDY41HhLxq6lJODow4YG","b1q7l/fQ1JSpZIUj8hqz1U","348GmXH91NBqyGF9h8TFxm_3f8a7","4fqBRSHnpDuKl/3Gd3tDj8","7fSRePg4tJgL5wKZ4Pa2Ok","9dmAUg1I9BzZvEtN89PCb5","9dpe/GxFdEeINliCpnRPOZ","ebh+SlO8ZCe7OLD+CD0rww","a7K8ecXxFPY6LbXQqQ2oQz","520Kykj0JOmLjelWyTXK3J","57AviJsHhAMr3S+rxA1t+H","acvCnU3zFHpLV4pfIsDO+2","fdNLgohy9K65P4ELxnMiqd","a3zQCfCrBCDZJ4uf2rk5u8","d9YoeBs0tDE4N4npXOrUoz_6c48a","3bfc6wYAdGv6aIVDIPiEBA"],["node","root","data","_effectAsset","lineTexture","myMat","_mesh","trailPrefab","mainTexture","texture1"],[["cc.Node",["_name","_layer","_components","_prefab","_lpos","_lscale"],1,9,4,5,5],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Prefab",["_name"],2],["cc.UITransform",["node","__prefab"],3,1,4],["cc.CompPrefabInfo",["fileId"],2],["7ee77fHCIFPWaMiOgsN5IKA",["_lineWidth","_lineJoin","_miterLimit","myLineWidth","node","__prefab","_strokeColor","lineTexture","myMat"],-1,1,4,5,6,6],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.MeshRenderer",["node","__prefab","_materials","lightmapSettings","_mesh"],3,1,4,3,4,6],["cc.ModelLightmapSettings",[],3],["3bda4vN6YZNR6VR8krEOY8O",["node","__prefab","particlesPrefab","bladeSFX","sliceSFX","trailPrefab"],3,1,4,3,3,3,6],["cc.Material",["_states","_defines","_props"],1,12]],[[4,0,2],[2,0,2],[6,0,1,2,2],[10,0,1,2,3],[1,0,1,2,4],[0,0,1,2,3,3],[0,0,2,3,4,5,2],[3,0,1,1],[5,0,1,2,3,4,5,6,7,8,5],[7,0,1,2,3,4,1],[8,1],[9,0,1,2,3,4,5,1]],[[[[4,"../extension/effects/pathLineStretch",[{"hash":3871780965,"name":"../extension/effects/pathLineStretch|vs:vert|fs:frag","blocks":[],"samplerTextures":[{"name":"texture1","type":28,"count":1,"stageFlags":16,"binding":0,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_color","format":44,"location":1,"defines":[]},{"name":"a_dist","format":11,"location":2,"defines":[]},{"name":"a_line","format":11,"location":3,"defines":[]}],"varyings":[{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_dist","type":13,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_line","type":13,"count":1,"stageFlags":17,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_color;\nlayout(location = 0) out vec4 v_color;\nlayout(location = 2) in float a_dist;\nlayout(location = 1) out float v_dist;\nlayout(location = 3) in float a_line;\nlayout(location = 2) out float v_line;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_color = a_color;\n  v_dist = a_dist;\n  v_line = a_line;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\nlayout(location = 0) in vec4 v_color;\nlayout(location = 1) in float v_dist;\nlayout(location = 2) in float v_line;\nlayout(set = 1, binding = 0) uniform sampler2D texture1;\nvec4 frag () {\n  vec4 o = v_color;\n    float aa = fwidth(v_dist);\n  vec2 uv0 = vec2((1.0-v_line)*0.9+0.05,(v_dist + 1.)/2.*-1.0);\n  uv0.x = fract(uv0.x);\n  uv0.y = fract(uv0.y);\n  o *= CCSampleWithAlphaSeparated(texture1,uv0);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin float a_dist;\nout float v_dist;\nin float a_line;\nout float v_line;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_color = a_color;\n  v_dist = a_dist;\n  v_line = a_line;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\nin vec4 v_color;\nin float v_dist;\nin float v_line;\nuniform sampler2D texture1;\nvec4 frag () {\n  vec4 o = v_color;\n    float aa = fwidth(v_dist);\n  vec2 uv0 = vec2((1.0-v_line)*0.9+0.05,(v_dist + 1.)/2.*-1.0);\n  uv0.x = fract(uv0.x);\n  uv0.y = fract(uv0.y);\n  o *= CCSampleWithAlphaSeparated(texture1,uv0);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\nuniform highp mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute float a_dist;\nvarying float v_dist;\nattribute float a_line;\nvarying float v_line;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * cc_matWorld * pos;\n  v_color = a_color;\n  v_dist = a_dist;\n  v_line = a_line;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\nvarying vec4 v_color;\nvarying float v_dist;\nvarying float v_line;\nuniform sampler2D texture1;\nvec4 frag () {\n  vec4 o = v_color;\n    #ifdef GL_OES_standard_derivatives\n      float aa = fwidth(v_dist);\n    #else\n      float aa = 0.05;\n    #endif\n  vec2 uv0 = vec2((1.0-v_line)*0.9+0.05,(v_dist + 1.)/2.*-1.0);\n  uv0.x = fract(uv0.x);\n  uv0.y = fract(uv0.y);\n  o *= CCSampleWithAlphaSeparated(texture1,uv0);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":49,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":0}},"defines":[{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean","defines":[]}]}],[{"passes":[{"program":"../extension/effects/pathLineStretch|vs:vert|fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"texture1":{"value":"white","type":28}}}]}]]],0,0,[],[],[]],[[[1,"TrailFirecrackerBlade"],[5,"TrailFirecrackerBlade",262144,[[7,-2,[0,"7f600jocZNf66NN9HIz7bg"]],[8,32,1,0,58,-3,[0,"2fpe5scIlJ56Vf6r9kDZC0"],[4,4294967295],0,1]],[2,"4ep6ZVEVtIko9NAyukc5S0",-1,0]]],0,[0,1,1,0,0,1,0,0,1,0,2,1,3],[0,0],[4,5],[0,1]],[[[1,"TipFirecrackerBlade"],[6,"TipFirecrackerBlade",[[9,-2,[0,"5c3stZmDpCQJP75s2eNOzQ"],[0],[10],1],[11,-3,[0,"536TdUwkdNmoXlVQEAWnD1"],[3],[4,5,6,7,8],[9,10,11],2]],[2,"d7HbP1TqRIQJNYEV6Ue48C",-1,0],[1,0.104,0,0],[1,2.4,2.4,2.4]]],0,[0,1,1,0,0,1,0,0,1,0,2,1,3],[0,0,0,0,0,0,0,0,0,0,0,0],[-1,6,7,-1,-1,-2,-3,-4,-5,-1,-2,-3],[2,3,4,5,6,7,8,9,10,11,12,13]],[[[3,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"USE_ALPHA_TEST":true}],[[[{},"tilingOffset",8,[2,0.05,1,0.95,0],"mainTexture",6,0]],11]]],0,0,[0,0],[8,3],[0,14]],[[[3,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"texture1",6,0]],11]]],0,0,[0,0],[9,3],[15,16]]]]
